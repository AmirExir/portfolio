PSSE API Manual
indexmodules |Home | Structure of Manual
Release
35.6.0

Date
July 12, 2023

Structure of Manual
This document defines the PSS®E Application Program Interface (API) to the various engineering functions in PSS®E.

How API Routines are Described
Each API is documented with following information in this order.

If API is obsolete and its replacement API (if applicable).

Brief explanation of its function.

The PSSE version when the API was released.

Python Syntax

Parameters (both input and output arguments) - their types and descriptions.

For array arguments, possible values for each array element ((if applicable).

BAT command syntax

IPLAN command syntax (if applicable)

FORTRAN call syntax (if applicable)

The syntaxes for calling the API routines will include at least one of the PSS®E automation file languages, and will usually include a syntax for use from a Fortran program. The set of syntaxes will include all the PSS®E automation file languages where the API routine can be used.

PSS®E Automation File Languages
Batch commands: This is a free-format input syntax. Items can be separated by a comma or spaces, strings need only be quoted if they contain spaces or commas, omitted items can be indicated by consecutive commas, arrays are entered as a sequence of scalar values, and a semi-colon can be used to terminate the command and return the remaining items to default values (it must be a separate data item, i.e., it must be separated from the previous data item by a space or comma). Except for unquoted filenames, a forward slash will terminate a line. Commands may be continued over multiple lines. The sequence @! at the beginning of the line will cause that line to be ignored.

Python commands: Python is an open source language; its syntax is well documented. Some of are arguments are defined as arrays (in keeping with Fortran nomenclature, as mentioned above). Python does not have arrays, and in general you should interpret arrays to mean lists (although tuples will usually work on input). Arrays that have some elements as input and some as output in the Fortran syntax are represented in the Python syntax as two separate arrays (i.e. lists). Keywords can be used for arguments, and any argument can be omitted. Additionally, any element of an input array can be specified as a keyword, e.g. myarray6=2 specifies that the 6th element of the array myarray has the value 2. If an alias is documented for a specific array element, it can also be used as a keyword for that element.

Fortran call statements: Fortran is a well-documented language (where it matters, we will use the Fortran 2019 standard). We will not use features that require explicit interfaces without stating so clearly in the description. Unless specifically stated, arguments cannot be omitted.

IPLAN commands: The IPLAN language is described in the IPLAN manual. For purposes of the CALL statement it resembles Fortran. Unless specifically stated, arguments cannot be omitted.

Return Codes / Error Codes
Most API routines return a integer return code, where zero indicates success. In Python, where multiple values are returned (a tuple), the return code will always be the first value. When non-successful (usually non-zero) error codes are returned, other returned values are set to None in Python, and are either uninitialized or unchanged (for input/output values) in other syntaxes. The Python interface can be made to throw exceptions instead of returning error codes values (the default). Enter:

psspy.setThrowPsseExceptions(True)
or
psspy.param.throwPsseExceptions = True
To see if the Python interface is set to throw exceptions instead of returning error code values:

val = psspy.getThrowPsseExceptions()
Default Values
When values are omitted, special “no input” values are supplied. These special values - for each variable type - are meant to indicate that “no input” was supplied. Many of the API routines permit this and will use documented default values when “no input” values are supplied.

The actual “no input” values can be retrieved from the API routines GETDEFAULTINT, GETDEFAULTREAL, and GETDEFAULTCHAR (capitalization depends on syntax). Users should never depend on the actual values returned, by these functions. They should be used only for supplying values to the PSS®E API routines. When automation files are recorded, items that have the default value are omitted in batch commands (i.e. recorded as “,,”) and recorded as _i, _f, _s, or _o (for integer, real/float, character/string, and filename, respectively). In the PSS®E embedded Python environment there will be local variables _i, _f, and _s set to the values returned from GETDEFAULTxxx routines mentioned above (_o will be treated as blanks). Outside of PSS®E it is the user’s responsibility to set those variables. In Python syntax get these default values as:

_i = psspy.getdefaultint()
_f = psspy.getdefaultreal()
_s = psspy.getdefaultchar()
Recording
Two recording formats are available: batch commands and Python.

Not all API routines are recordable. Routines that only retrieve data do not record, for example. If an API routine is recordable, it will have a batch command format specified; routines without a batch command format specified are not recordable.

Table of Contents
Structure of Manual
How API Routines are Described
PSS®E Automation File Languages
Return Codes / Error Codes
Default Values
Recording
Quick search
indexmodules |Home | Structure of Manual
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |Home | psspy Module
Release
35.6.0

Date
July 12, 2023

psspy Module
psspy module defines API routines that are used access PSS®E.

Note that all chapters are not listed in this section. The chapter that has specific information only that information is provided here.

When recorded for Python, the recording will reference each of these functions within the psspy namespace.

Power Flow Operation
This chapter describes the API routines corresponding to the operational functions of the PSS®E Power Flow. Also included are those routines that control basic program operations and the Open Access option.

Power Flow Data
This chapter describes the API routines used to add, modify, or remove power flow data, other than substation data.

For most categories of power flow data, there are a pair of API routines for specifying data.

one of these contains “_DATA” as part of the API name, and

the other contains “_CHNG” in its API name.

The “_DATA” API routines may be used to add a new network element to the working case, or to modify the data of an existing network element.

The “_CHNG” API routines may be used only to modify the data of an existing network element; specifying a network element that does not already exist in the working case to one of the “_CHNG” API routines is treated as a fatal error by the API routine.

Generally, when an API is adding a new element to the working case, data items that are defaulted are set to the value listed in the data item’s description. When an API is modifying the data of an existing element, defaulted data items are unchanged.

Fault Analysis Data
Fault Analysis, or Short Circuit, Data Changing APIs contains API routines specific to adding, modifying and deleting short circuit data.

Note that, except for the SEQ_MUTUAL_DATA API, the SEQ_ APIs always modify data of an existing element. As in power flow data, there are no “_CHNG” APIs to just change sequece data.

Dynamic Simulation - Operation
Dynamic Simulation Operation contains API routines that deals with general operations of dynamics simulation functions, including option settings and reports.

Dynamic Simulation - Output Channel Operations
Output Channel Operations contains API routines that deals with managing channel output operations, and with assigning quantities to output channels.

Dynamic Simulation - Auxiliary Signal Models
Auxiliary Signal Model APIs handle the models that inject supplementary signals into dc lines and FACTS devices (auxiliary signal models).

Dynamic Simulation - Set Disturbance
Set Disturbance API routines for applying and removing disturbances during dynamics simulations.

Subsystem Definition
This chapter defines API routines that control subsystems. There are four kinds of subsystems in PSS®E:

area subsystems,

bus subsystems,

owner subsystems, and

zone subsystems.

Area subsystems are a set of areas, bus subsystems are a set of buses, etc.

Many PSS®E API routines accept a subsystem definition to limit the scope of operation of the routine. Most such use bus subsystems. Bus subsystems can be defined in terms of areas, zones, and/or owners; but a bus subsystem defined by areas, for example, is not an area subsystem, which is a set of areas, not a set of buses in an area.

Diagram View
This chapter defines API routines that are used to manipulate Slider Diagrams in the interface. They will elicit no action if a GUI is not present when invoked.

Single Element Data
This chapter defines API routines that are used to retrieve data for a single element (e.g., bus, branch, area, etc.) from the PSS®E engine and test on various program states.

These routines do not record themselves when called with recording enabled.

Extension Data Access
This chapter defines API routines that are used to retrieve and set extension data for a single element (e.g., bus, branch, area, etc.) in the PSS®E engine.

These routines do not record themselves when called with recording enabled.

Subsystem Data Retrieval
The subsystem data retrieval APIs are used to retrieve data from the PSS®E engine for elements (e.g., buses, branches, etc.) in a subsystem. One or more input data items to each API allow the user to restrict the elements for which data is returned to a subset of subsystem elements (e.g., to omit out-of-service elements). These APIs are grouped into families with each family containing up to six APIs:

An API that returns the number of array entries required to hold one set of subsystem data items returned by the data retrieval APIs in the family (e.g., GET_BUS_COUNT returns the number of buses in subsystem SID that meet the editing criterion indicated by FLAG).

A data retrieval API that returns an array of one or more sets of integer data values.

A data retrieval API that returns an array of one or more sets of real data values.

A data retrieval API that returns an array of one or more sets of complex data values.

A data retrieval API that returns an array of one or more sets of character data values.

An API that returns information on the data types corresponding to specified STRING values, each of which may be specified to one or more of the data retrieval APIs in the family. STRING values that are valid input values for both the real and complex data retrieval APIs of a family are indicated as being of type complex.

Each of the data retrieval APIs returns an array of one or more columns containing subsystem data items. Input arguments specify the name of the array to be used, the number data items to be retrieved (which is also the minimum number of columns required in the array), and the number of elements in each column (which must be at least as large as the number returned by the first API listed above). Array elements beyond those required to accommodate the requested data items are left unchanged by the data retrieval APIs.

These routines do not record themselves when called with recording enabled.

Subsystem Data Retrieval - Character Data
Prior to calling any of the subsystem data retrieval APIs, space for the array that is to receive the set(s) of data items that are to be returned must be allocated. For character data items, the number of characters required for each array entry for the data corresponding to any of the STRING arguments of the character data retrieval APIs (i.e., the a*Char APIs) may be obtained from the GET_CHAR_LENGTH API.

Subsystem Data Retrieval - Bus Data
The bus data family of subsystem data retrieval APIs returns arrays of data for buses in a specified subsystem. One of the input items to each API allows the user to elect either to retrieve data for all subsystem buses, or to restrict the array entries to data for in-service buses.

Data for subsystem buses is returned from all APIs in the bus data family in the same order: ascending bus number order or alphabetic extended bus name order, according to the bus output option setting in effect at the time the API is referenced.

Graphical Analysis Output
This chapter defines API routines that interact with displays and files associated with the graphical analysis capabilities of the PSS®E GUI. They will elicit no action if a GUI is not present when invoked.

Multiple Element Data
This chapter defines API routines that are used to retrieve data that are neither single elements nor based on subsystems.

These routines do not record themselves when called with recording enabled.

Using the Vendor Neutral Contingency and RAS Auxiliary File
This chapter defines API routines that work with the auxilary contingency/RAS file, a vendor neutral format for providing these specifications.

Non-Engineering
This chapter defines API routines that provide functions not associated with PSS®E data, analysis, or graphics capabilities.

Most of these routines do not record themselves when called with recording enabled. Those that have a batch format documented can record themselves.

pssplot Module
pssplot module defines API routines that are used to manipulate plots in the interface. They will elicit no action if the GUI is not present when invoked.

When recorded for Python, the recording will reference each of these functions within the pssplot namespace.

mustpy Module
mustpy module defines API routines that are used for Transfer Analysis and Sensitivities features.

When recorded for Python, the recording will reference each of these functions within the mustpy namespace.

Table of Contents
psspy Module
Power Flow Operation
Power Flow Data
Fault Analysis Data
Dynamic Simulation - Operation
Dynamic Simulation - Output Channel Operations
Dynamic Simulation - Auxiliary Signal Models
Dynamic Simulation - Set Disturbance
Subsystem Definition
Diagram View
Single Element Data
Extension Data Access
Subsystem Data Retrieval
Subsystem Data Retrieval - Character Data
Subsystem Data Retrieval - Bus Data
Graphical Analysis Output
Multiple Element Data
Using the Vendor Neutral Contingency and RAS Auxiliary File
Non-Engineering
pssplot Module
mustpy Module
Quick search
indexmodules |Home | psspy Module
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |Home | PSS®E - Different Methods to Open and Run
PSS®E - Different Methods to Open and Run
Release
35.6.0

Date
July 12, 2023

Following are different methods to open PSS®E and run different activities.

Open PSS®E GUI
Open using PSS®E short cut from desk top icon

Open using PSS®E short cut from Windows Programs menu

Run command psse from PSS®E Command Prompt

Run command psseXX.exe from PSS®E Command Prompt (where XX is PSS®E major version number)

How to run PSS®E from outside of PSS®E GUI?
It is allowed to install many PSS®E versions in the same computer. Also each PSS®E version is compatible to more than one version of Python. Therefore, PSS®E installer does not set any Windows environment variables. Following Python statements sets PSS®E environment and starts PSS®E. The Python version used will be the version in which this statement is executed. [This example is for PSS®E 35, but do similar for other PSS®E versions.]

import psse35
import psspy
psspy.psseinit()
It is allowed to install many minor versions of PSS®E 35. Following Python statement sets PSS®E 35.4.x environment. Do similar for other minor versions of PSS®E 35.

import psse3504
How to use specific Python version from PSS®E GUI?
By default, PSSE version has one default Python version to use defined. For example, PSSE 35 uses 64 bit Python 3.9 as default Python version. Use steps below to change to a different Python version.

Right click on PSSE short cut (either from Start >Programs … item or PSSE desktop icon)

Select Properties

Change Target to add Python version to use.

For example to use Python 3.9 in PSSE 35 add -pyver 39 as below.

….\PSSBIN\psse35.exe” -pyver 39

Change Start in if its value is: “If changing, remove -gohome from Target line”

Specify working directory path or leave it blank

How to capture disappearing error message from wxPython based utilities?
The GUI for Excel Export and WECCLF converter utilities is developed using wxPython module. When wxPython installation has errors or not found, the GUI of these utilties may not open. To find out the error information, follow steps below.

Following instructions assumes PSS®E version 35.4 and Python version 3.9 64-bit.

PSS®E installation folder

C:\Program Files\PTI\PSSE35\35.4

Working in 64 bit Python 3.9.x and its installation folder

C:\Python39x64

Start Python Interpreter, IDLE

Start >Programs >Python3.9 >IDLE (Python 3.9 64-bit)

Open following files

For Excel Export

C:\Program Files\PTI\PSSE35\35.4\psspy39\excelexportw.pyw

For WECCLF converter

C:\Program Files\PTI\PSSE35\35.4\psspy39\wecclf_w.pyw

From menu Run >Run Module

At this point you should see error in IDLE shell.

If the error is due to wxPython module not found, install that and re-test. For any other error, constact PSS®E Support.

If PSS®E and Python version and its installation location are different, change these commands accordingly.

Also choose 64 bit or 32 bit Python IDLE depending on PSS®E version.

Table of Contents
PSS®E - Different Methods to Open and Run
Open PSS®E GUI
How to run PSS®E from outside of PSS®E GUI?
How to use specific Python version from PSS®E GUI?
How to capture disappearing error message from wxPython based utilities?
Quick search
indexmodules |Home | PSS®E - Different Methods to Open and Run
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |Home | PSS®E - Installed, but cannot run from Python
PSS®E - Installed, but cannot run from Python
Release
35.6.0

Date
July 12, 2023

The just installed PSSE version fails when running PSSE from Python interpreter, like below.

import psse3505
import psspy
psspy.psseinit()
The first thought when this happens is to un-install and re-install PSSE version just installed.

The better approach would be to check following, which may solve the problem.

Installed Files in Python's site-packages folder
PSSE installer puts following files in Python’s lib\site-packages folder:

psseXX.py

psseXXYY.py

psseloc.pyc

Here XX is PSSE major version (like 35) and YY is minor version (specified in 2 digits like 05) for PSSE version 35.5.zz.

For example:

Python 3.9 64 bit is installed in folder C:\Python39x64

PSSE 35.5.zz is installed in folder C:\Program Files\PTI\PSSE35\35.5

Then PSSE 35.5 installer would put following files in folder C:\Python39x64\Lib\site-packages

psse35.py

psse3505.py

psseloc.pyc

Python's site-packages folder does not have these files
If for some unexplained reasons, PSSE installer fails to install these files, one can copy these files from PSSE installation folder.

Copy following files from folder C:\Program Files\PTI\PSSE35\35.5\PSSPY39

to folder C:\Python39x64\Lib\site-packages

psse35.py

psse3505.py

psseloc.pyc

The process described above can be followed with other PSSE versions (like PSSE 36.0) and Python versions (like Python 3.10 64 bit).

Table of Contents
PSS®E - Installed, but cannot run from Python
Installed Files in Python's site-packages folder
Python's site-packages folder does not have these files
Quick search
indexmodules |Home | PSS®E - Installed, but cannot run from Python
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |Home | Drive PSS®E from Python - Example Scripts
Drive PSS®E from Python - Example Scripts
Release
35.6.0

Date
July 12, 2023

These Python scripts are installed in Example directory.

File Name

Description

accc_reports.py

Extract and post process .acc file information

ascc_demo.py

Shows three different ways to calculate faults using ASCC

ascc_report.py

Creating custom ASCC reports using arrbox.ascc.ascc_currents

BPA2PSSE.py

Convert BPA format data to PSS®E raw file data

brnflows_csv.py

Shows how to use Subsystem Data Retrieval APIs

dyntools_demo.py

Extract and post process PSS®E dynamics output file using dyntools

excelpy_howto_qv_export.py

Shows how to use excelpy module

gic_demo.py

Shows how to run different GIC Events with and without supplemental event moving boxes

gic_report.py

Different activities that can be run under GIC Analysis

harmonics_demo.py

Shows how to run harmonics analysis and create custom plots using matplotlib

harmonics_demo_arrbox.py

Shows how to use arrbox.harmonics module to post process harmonic results

iec60909_testnetwork_calculations.py

IEC 60909 Test Network Calculations using circuit theory and network reduction

iecs_demo.py

Shows different ways to calculate faults using IECS

iecs_report.py

Creating custom ASCC reports using arrbox.iecs.iecs_currents

nlevel_buses.py

Get N level buses from Home (starting) Bus

OpenCase.py

Open SAVNW .sav and .sld files

otdffactors_excel.py

Export OTDF factors to Excel using arrbox.dfax_pp.DFAX_PP and excelpy module

otdffactors_report.py

Export OTDF factors to Text file using arrbox.dfax_pp.DFAX_PP

pout_excel.py

Export Power Flow results to Excel [shows how to build custom report]

pout_report.py

Export Power Flow results to Text [shows how to build custom report]

preparer_transfomers_iec_data.py

Template to provide IEC 60909 transformer data (.iec file)

pssexcel_demo.py

Shows how to use pssexcel module to export ACCC, PV and QV solution results to excel spreadsheets

pv_export.py

Export PV solution results to Excel and Text File

qv_export.py

Export QV solution results to Excel and Text File

RunIdle.py

Start Python IDLE shell

sample_add_substations.py

Shows how to to add Node Breaker configuration using Data APIs for sample network

sample_zils_add_substations.py

Shows how to to add Node Breaker configuration using Data APIs for sample network with many ZILs

sensitivity_factors.py

Sensitivity Analysis Report and Accesing them in Python Script

usrgrpg.py

Python Functions to emulate GRPG [decorate slider diagrams with data/results]

wecclf_demo.py

Run WECCLF converter from Python Scripts (PSLF to PSS®E data conversion)

wordpy_demo.py

Demo for using functions from wordpy module

Quick search
indexmodules |Home | Drive PSS®E from Python - Example Scripts
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |Home | PSS®E Data Input Examples
PSS®E Data Input Examples
Release
35.6.0

Date
July 12, 2023

These data files are installed in Example directory:

savnw
Ubiquitous test network used during PSS®E courses and run all sorts of activities in PSS®E.

Power Flow (no Node Breaker Data):

savnw.raw
savnw.rawx
savnw.sav
Power flow (with node breaker data):

savnw_nb.raw
savnw_nb.rawx
savnw_nb.sav
Contingency analysis:

savnw.con
savnw.dfx (activity DFAX output)
savnw.mon
savnw.trp (tripping corrective action)
savnw.sub
Dynamics simulation:

savcnv.sav (Generators and Loads converted case)
savnw.dyr
savnw.dfx
savnw.snp
savnwchn.idv (add channels)
Optimal power flow:

savnw.ecd
Short circuit:

savnw.bkd (activity BKDY)
savnw.seq
savnw_ncs_TI_rdch.seq (add NCS Time-Current characterictics data)
savnw_ncs_VI_rdch.seq (add NCS Voltage-Current characterictics data)
Slider diagram:

savnw.sld
Voltage droop:

savnw_vd.rawx
sample
Test network contains all possible equipment and data categories that can be modelled in PSS®E.

No node breaker data, no zero impedance lines:

sample.ltl (long title)
sample.raw
sample.rawx
sample.sav
sample.seq
sample.sld
Node breaker data, no substation sections, no zero impedance lines:

sample_nb.raw
sample_nb.rawx
sample_nb.sav
sample_nb.seq
sample.sld
Node breaker data, substation sections, no zero impedance lines:

sample_nb_sec.raw
sample_nb_sec.rawx
sample_nb_sec.sav
sample_nb_seq.seq
sample.sld
No node breaker data, zero impedance lines:

sample_zils.raw
sample_zils.rawx
sample_zils.sav
sample_zils.seq
sample_zils.sld
Node breaker data, no substation sections, zero impedance lines:

sample_zils_nb.raw
sample_zils_nb.rawx
sample_zils_nb.sav
sample_zils_nb.seq
sample_zils.sld
Node breaker data, substation sections, zero impedance lines:

sample_zils_nb_sec.raw
sample_zils_nb_sec.rawx
sample_zils_nb_sec.sav
sample_zils_nb_seq.seq
sample_zils.sld
Bench Network
Relatively big size case, use to run power flow and dynamics simulation:

bench.dyr
bench.raw
bench.rawx
bench.sav
bench2.raw
bench2.sav
IEC 60909 Short Circuit Calculations
Use to run short circuit calculations per IEC 60909 standard.

IEC 60909 test network:

iec60909_testnetwork.iec
iec60909_testnetwork_wind_pv.iec
iec60909_testnetwork_50hz.raw
iec60909_testnetwork_50hz.seq
iec60909_testnetwork_50hz.sav
IEC 60909 test network (modified with induction motor):

iec60909_testnetwork_indmachine.iec
iec60909_testnetwork_indmachine_wind_pv.iec
iec60909_testnetwork_50hz_indmachine.raw
iec60909_testnetwork_50hz_indmachine.seq
iec60909_testnetwork_50hz_indmachine.sav
Slider diagram:

iec60909_testnetwork.sld
N-1-1 Calculations
IEEE 25 bus test network setup to run N-1-1 calculations:

ieee_25bus.mon
ieee_25bus.raw
ieee_25bus.sav
ieee_25bus.sub
ieee_25bus_n1.con
ieee_25bus_n11.con
GIC Analysis
IEEE GIC test case:

ieee_gic_test_case.gic
ieee_gic_test_case.raw
ieee_gic_test_case.sav
ieee_gic_test_case.sld
Sample test case (contains no substation data) and GIC data file version 4:

sample.sav
sample_fv4.gic

sample_zils.sav
sample_zils_fv4.gic
Sample test case (contains substation data) and GIC data file version 5:

sample_nb.sav
sample_nb_sec.sav
sample_fv5.gic

sample_zils_nb.sav
sample_zils_nb_sec.sav
sample_zils_fv5.gic
Harmonic Analysis
IEEE harmonics test case:

ieee_harmonics_test_case_har.rawx
ieee_harmonics_test_case_har_inherit.rawx
ieee_harmonics_test_case.raw
ieee_harmonics_test_case.rawx
ieee_harmonics_test_case.sld
Sample test case (contains no zero impedance lines):

sample_har.rawx
sample.sav
sample_nb.sav
sample_nb_sec.sav
Sample test case (contains zero impedance lines):

sample_zils_har.rawx
sample_zils.sav
sample_zils_nb.sav
sample_zils_nb_sec.sav
Table of Contents
PSS®E Data Input Examples
savnw
sample
Bench Network
IEC 60909 Short Circuit Calculations
N-1-1 Calculations
GIC Analysis
Harmonic Analysis
Quick search
indexmodules |Home | PSS®E Data Input Examples
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy
psspy
Release
35.6.0

Date
July 12, 2023

Power Flow
Power Flow Operation

Power Flow Data

Node Breaker
Node Breaker Operation

Node Breaker Data

Optimal Power Flow
Optimal Power Flow Operation

Optimal Power Flow Data

Fault Analysis
Fault Analysis Operation

Fault Analysis Data

Harmonics Analysis
Harmonics Operation

Harmonics Data

GIC Analysis
Gic Operation

Gic Data

Time Series Power Flow
Time Series Power Flow Operation

Time Series Power Flow Data

Dynamic Simulation - Operation
Dynamic Simulation Operation

Dynamic Simulation - Output Channel Operations
Dynamic Simulation Output Channel Operation

Assign Machine Quantities To Output Channels

Assign Branch Quantities To Output Channels

Assign Other Quantities To Output Channels

Dynamic Simulation - Models
Plant Related Models

Wind Related Models

Load Related Models

Load Component Models

Line Relay Models

Dc Line Related Models

Facts Device Models

Switched Shunt Models

Auxiliary Signal Models

Induction Machine Models

Cct Models

Set Disturbance

Set Disturbance Definition

Subsystem Definition
Area Subsystems

Bus Subsystems

Owner Subsystems

Zone Subsystems

Slider Diagram
Diagram View

Data Access - Single Element Data
Single Element Data

Data Access - Extension Data
Extension Data Access

Data Access - Subsystem Data Retrieval
Character Data

Bus Data

Plant Bus Data

Machine Data

Load Bus Data

Load Data

Fixed Shunt Bus Data

Fixed Shunt Data

Switched Shunt Bus Data

Switched Shunt Data

Branch Flow Data

Branch Data

Two-Winding Transformer Data

Three-Winding Transformer Data

Three-Winding Transformer Winding Data

Two-Terminal Dc Line Data

Two-Terminal Dc Line Converter Data

Multi-Terminal Dc Line Data

Multi-Terminal Dc Line Converter Data

Vsc Dc Line Data

Vsc Dc Line Converter Data

Facts Device Data

Facts Device Bus Data

Area Data

Owner Data

Zone Data

Induction Machine Bus Data

Induction Machine Data

Substation Data

Substation Node Data

Substation Switching Device Data

Substation Terminal Data

Zero Sequence Mutuals Data

Graphical Analysis
Graphical Analysis Output

Scenarios
Scenarios

Event Studies
Event Studies

Multiple Element Data
Multiple Element Data

RAS
Using The Vendor Neutral Contingency And Ras Auxiliary File

Non-Engineering
Non-Engineering

Table of Contents
psspy
Power Flow
Node Breaker
Optimal Power Flow
Fault Analysis
Harmonics Analysis
GIC Analysis
Time Series Power Flow
Dynamic Simulation - Operation
Dynamic Simulation - Output Channel Operations
Dynamic Simulation - Models
Subsystem Definition
Slider Diagram
Data Access - Single Element Data
Data Access - Extension Data
Data Access - Subsystem Data Retrieval
Graphical Analysis
Scenarios
Event Studies
Multiple Element Data
RAS
Non-Engineering
Previous topic
Introduction

Next topic
Power Flow Operation

Quick search
indexmodules |next |previous |Home | psspy
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation
Power Flow Operation
Release
35.6.0

Date
July 12, 2023

accc

This API routine is obsolete.

accc_2

This API routine is obsolete.

accc_multiple_merge

Use this API to merge a number of AC contingency solution files (acc files) into one acc file.

accc_multiple_run_report

This API routine is obsolete.

accc_multiple_run_report_2

Use this API to report the results of up to twenty two executions of the AC Contingency Calculation function.

accc_parallel

This API routine is obsolete.

accc_parallel_2

Use this API routine to run the second release of the parallel implementation of the AC contingency calculation function (use ACCC_WITH_DSP_3 to run AC contingency calculation function serially).

accc_single_run_report

This API routine is obsolete.

accc_single_run_report_2

This API routine is obsolete.

accc_single_run_report_3

This API routine is obsolete.

accc_single_run_report_4

This API routine is obsolete.

accc_single_run_report_5

This API routine is obsolete.

accc_single_run_report_6

This API is the sixth release of the AC Contingency Report function.

accc_trip_cor

This API routine is obsolete.

accc_trip_cor_2

This API routine is obsolete.

accc_trip_cor_3

This API is the third release of the function to run AC contingency analysis with tripping simulation and corrective actions.

accc_with_cor

This API routine is obsolete.

accc_with_cor_2

This API routine is obsolete.

accc_with_cor_3

This API is the third release of function to run AC contingency analysis with corrective actions.

accc_with_dsp

This API routine is obsolete.

accc_with_dsp_2

This API routine is obsolete.

accc_with_dsp_3

Use this API to run the second release of AC contingency calculation function (ACCC, ACCC_WITH_DSP).

accc_with_trip

This API routine is obsolete.

accc_with_trip_2

Use this API to run the second version of AC contingency calculation function with a post- contingency tripping function.

accc_with_trip_parallel

Use this API to run the parallel version of AC contingency calculation function with a post- contingency tripping function (use ACCC_WITH_TRIP_2 to run the function sequentially).

accor

This API routine is obsolete.

accor_2

This API routine is obsolete.

accor_3

This API is the third release of corrective action function.

alert_output

Use this API to specify the alert device.

allow_pssuserpf

Use this API to specify or return the option to allow or disallow the loading or use of the Powerflow Customization Interface (PCI) implementation module (pssuserpf).

alph

Use this API to print an alphabetically sorted table of all buses in a specified subsystem of the working case (activity ALPH).

append_accc

Use this API to replicate system conditions of a contingency case solution, as contained in a designated Saved Case File, in the form of a Contingency Solution Output File.

apply_var_limits

Use this API to specify or return the option for the default VAR limits setting; either apply automatically, apply immediately, ignore, or apply on a specific iteration

area

This API routine is obsolete.

area_2

Use this API to tabulate area totals by area, as well as the desired area net interchange (activity AREA).

area_zone

Use this API to tabulate area totals by area, along with subtotals by zone.

arnm

This API routine is obsolete.

arnm_2

This API routine is the second release of the area renumbering function.

base_frequency

Use this API to specify or return the value of the base frequency option setting.

bgen

Use this API to convert the mismatch at boundary buses to equivalent load and/or generation (activity BGEN).

brch

This API routine is obsolete.

brch_2

Use this API to tabulate those branches where impedances or other characteristics are such that they may be detrimental to the rate of convergence of one or more of the power flow solution activities.

bsnm

Use this API to change the bus numbers of specified network buses in the working case and retain a tabulation, in file form, of bus number changes made (activity BSNM).

bus_input

Use this API to specify or return the bus input option setting, for either numbers or names.

bus_output

Use this API to specify or return the bus output option setting, for either numbers or names.

bus_size_level

Use this API to specify or return the value of the PSSE size level option setting to a multiple of 1,000 between 1,000 and 200,000.

busn

Use this API to tabulate unused bus numbers within a specified bus number range (activity BUSN).

ca_iterations

Use this API to specify or return the contingency iterations limit setting.

case

Use this API to open a PSSE Saved Case file and transfers its data into the PSSE working case.

check_powerflow_data

Use this API routine to perform data checks on the selected categories of powerflow data for all buses in the working case or for all buses in a specified subsystem.

checkvoltagelimits

Use this API to tabulate those buses where voltage magnitude is beyond their normal or emergency voltage limits.

chkcntduplicon

Check duplicate labels in Contingengy (CON) file.

chkcntduplidfx

Check duplicate labels in DFAX file.

close_powerflow

Removes the current powerflow working case from PSSE’s working memory.

close_report

Sets the report output device to the standard output and sets the command line to request device selection for individual reporting activities (Activity CLOS).

cmpr

Use this API to tabulate certain case totals, as contained in the working case, with those of a designated Saved Case (activity CMPR).

cntb

Use this API to tabulate the voltage setpoints and desired voltage bands of voltage-controlling equipment in the working case (activity CNTB).

cong

Use this API to convert generators from their power flow representation in preparation for switching studies and dynamic simulations (activity CONG).

conl

Use this API to convert the constant MVA load for a specified grouping of network loads to a specified mixture of the constant MVA, constant current, and constant admittance load characteristics (activity CONL).

connectivity_check

Use this API to specify or return the option to enable or disable the solution connectivity checking option setting.

control_area_interchange

Use this API to to specify or return the area interchange control option setting to disabled, or enabled with tie lines only, or enabled with tie lines and loads.

csv_to_rawx

Use this API to import a rawx (extended raw data) data table from a CSV (comma-separated values) file.

csv_to_rawx_with_metamodel

Use this API to import a rawx (extended raw data) data table from a CSV (comma-separated values) file with metamodel.

dc_tap_adjustment

Use this API to specify or return the option to enable or disable the dc tap adjustment option setting.

dccc

This API routine is obsolete.

dccc_2

Use this API to run contingency case solutions using a linear network (dc) model (activity DCCC).

dccor

Use this API to apply corrective actions to the base case using linear programming methods.

dccor_2

Use this API to apply corrective actions to the base case using linear programming methods.

dclf

This API routine is obsolete.

dclf_2

Use this API routine to apply the dc analogy network solution algorithm to the network modeled in the working case (activity DCLF).

dcpscopf

This API is the DC based Preventive Security Constrained Optimal Power Flow solution (DCPSCOPF).

deltmpfiles

Delete closed temporary files.

dfax

This API routine is obsolete.

dfax_2

Use this API to construct a Distribution Factor Data File (activity DFAX).

dfax_contingency

Use this API to combine one contingency in the first Distribution Factor file with one contingency in the second Distribution Factor file and so on, till specified contingency level is reached, to create multiple event contingencies and then export resulting contingencies to user defined report device.

dfti

Use this API to compare tie lines, as contained in the working case, with those of a designated Saved Case (activity DFTI).

diff

Use this API to compare specified power flow data and solution results, as contained in the working case, with those of a designated Saved Case (activity DIFF).

dscn

Use this API to electrically disconnect a bus (activity DSCN).

duplicate_cntlabel_check

Use this API to specify or return the option to enable or disable the duplicated contingency labels check when Distribution Factor Data File (.dfx) or Contingency Description Data File (.con) files are used.

ecdi

Use this API to place machines in a specified subsystem on- or off-line to satisfy a given subsystem minimum capacity; the in-service machines in the subsystem are then dispatched on the basis of incremental cost to meet a specified total subsystem generation (activity ECDI).

echo

Use this API to enable or disable response echoing (activity ECHO).

eeqv

Use this API to construct an electrical equivalent of a specified subsystem of the working case (activity EEQV).

eqrd

Use this API to build an electrical equivalent of radial and, optionally, two-point Type 1 buses in a specified subsystem of the working case (activity EQRD).

exam

Use this API to tabulate all power flow data pertaining to a specified bus (activity EXAM).

fact

Use this API to factorize the network admittance matrix in preparation for switching studies and dynamic simulations (activity FACT).

fdns

Use this API to apply the fixed slope decoupled Newton-Raphson power flow calculation (activity FDNS).

file_overwrite

Use this API to specify or return the option to set the file overwrite option setting to either ask first or overwrite.

find

Use this API to tabulate a list of buses matching a partial extended bus name (activity FIND).

flat_start

Use this API to specify or return the option to enable or disable the voltage flat start option setting.

fnsl

Use this API to apply the Newton-Raphson power flow calculation (activity FNSL).

gcap

This API routine is obsolete.

gcap_2

Use this API to print a report of machine loading and reactive power limit data (activity GCAP).

gdif

Use this API to calculate differences between the working case and a designated Saved Case (activity GDIF).

gendsp

Use this API to impose a contingency specified in the Distribution Factor Data file and apply the generation dispatch algorithm used in contingency analysis on the working case.

gendsp_2

Use this API to impose a contingency specified in the Distribution Factor Data file and apply the generation dispatch algorithm used in contingency analysis on the working case.

gens

Use this API to tabulate the loading and voltage conditions at plant buses (activity GENS).

geol

Use this API to tabulate the loading and voltage conditions at the generator terminals for online machines at Type 2 and 3 buses in the working case (activity GEOL).

getcontingencysavedcase

Use this API routine to place the working case in the form of a specified system condition as calculated during a previous run of one of the members of the the AC contingency calculation family.

gic_pf

Add activity GIC calculated Mvar Qloss in scaled manner to the working case to arrive at the converged power flow solution.

gnestatus

Use this API to specify or return the status of a GNE device.

gnet

Use this API to change in-service generation to negative MVA load at all Type 2 and 3 buses in the subsystem specified by the user.

imnet

Use this API routine to change the status of induction machines that are in-service to out-of- service, and to replace the power flowing from the network into the machine with constant power load.

imoutage

Use this API routine to change the status of induction machines that are in-service, but that have been set to the “stalled” (for motors) or “tripped” (for generators) state by the power flow solution, to out-of-service.

impc

Use this API to calculate the impact of transaction events on MW flows using a linear network (dc) model.

implement_transfer

This API routine is obsolete.

implement_transfer_2

Use this API routine to apply a specified transfer using the same transfer dispatch methods that are available in the PV analysis calculation engine.

inlf

This API routine is obsolete.

inlf_2

Use this API routine to run the second release of the inertial and governor response power flow calculation.

inta

Use this API to summarize tie flows between an interchange area and all other areas in the working case.

intz

Use this API to summarize tie flows between each zone and all other zones in the working case.

isolate_levels

Use this API to specify or return the maximum number of levels to go outward when isolating an element by breaker.

join

The API combines two buses into a single bus.

lamp

Use this API to print power flow solution output, including loadings in amps, in a traditional power flow report format.

line_shunt_reporting

Use this API to specify or return the option to enable or disable the line shunt reporting.

lines_per_page

Use this API to specify or return the page length limits for the four output devices; also retrieve device names.

lines_per_page_one_device

Use this API to specify or return the page length limit and device name for one of the four output devices.

list

Use this API routine to tabulate the power flow working case in a form suitable for problem data documentation.

listcontingencysavedcases

Use this API routine to obtain a report listing some or all of the system conditions preserved in a ZIP Archive Output File that was created during a previous run of one of the members of the the AC contingency calculation family.

llrf

Use this API to apply the line loading relief calculation using a linear network (dc) model.

load_reduction

Use this API to tabulate the amount of load reduction in a specified subsystem due to the voltage at the bus to which the load is connected being below PQBRAK (for constant MVA load) or 0.5 (for constant current load.

lout

Use this API to print the power flow solution results in a traditional power flow report format.

ltap

Use this API to insert a bus at a designated location along a line.

maccc

This API routine is obsolete.

maccc_2

Use this API to run the second release of multiple level contingency analysis.

maccc_3

Use this API to run the third release of multiple level contingency analysis.

maccc_parallel

Use this API to run the multiple level contingency analysis in parallel when the number of contingency processors in Program Settings is greater than 1.

maccc_parallel_2

Use this API to run the multiple level contingency analysis in parallel when the number of contingency processors in Program Settings is greater than 1.

maccc_trip_cor

This API routine is obsolete.

maccc_trip_cor_2

This API routine is obsolete.

maccc_trip_cor_3

This API is the third release of function to run multiple AC contingency analysis with tripping simulations and corrective actions.

maccc_trip_cor_4

This API is the third release of function to run multiple AC contingency analysis with tripping simulations and corrective actions.

maccc_with_cor

This API routine is obsolete.

maccc_with_cor_2

This API routine is obsolete.

maccc_with_cor_3

This API is the third release of function to run multiple AC contingency analysis with corrective actions.

maccc_with_cor_4

This API is the third release of function to run multiple AC contingency analysis with corrective actions.

maccc_with_trip

This API routine is obsolete.

maccc_with_trip_2

Use this API to run the second version of multiple level contingency analysis with tripping simulation.

maccc_with_trip_3

Use this API to run the second version of multiple level contingency analysis with tripping simulation.

maccc_with_trip_parallel

Use this API to run the multiple level contingency analysis with tripping simulation in parallel when the number of contingency processors in Program Settings is greater than 1.

maccc_with_trip_parallel_2

Use this API to run the multiple level contingency analysis with tripping simulation in parallel when the number of contingency processors in Program Settings is greater than 1.

matrix_growth_factor

Use this API to specify or return the value of the matrix growth factor option setting.

mcre

Use this API to read a Machine Impedance Data File and add the data specified in it to the working case.

modr

Use this API to uniformly increase or decrease the line resistances of in-service nontransformer branches.

mov_alpha

Use this API to specify or return the value of the MOV iteration ALPHA option setting.

mov_iterations

Use this API to specify or return the value of the maximum MOV iterations option setting.

mov_tolerance

Use this API to specify or return the value of the MOV iteration tolerance option setting.

move3wnd

Use this API to disconnect the third bus of a specified three-winding transformer from the bus to which it is currently connected, and reconnect it to a designated bus.

movebrn

Use this API to disconnect the to bus of a specified non-transformer branch or two-winding transformer from the bus to which it is currently connected, and reconnect it to a designated bus.

moveindmac

Use this API routine to disconnect the specified induction machine from the bus to which it is currently connected, and reconnect it to a designated bus.

moveindmacs

Use this API routine to disconnect all of the induction machines at the specified bus, and reconnect them to a designated bus.

moveload

Use this API to disconnect the specified load from the bus to which it is currently connected, and reconnect it to a designated bus.

moveloads

Use this API to disconnect all of the load from the specified bus, and reconnect it to a designated bus.

movemac

Use this API to disconnect the specified machine from the bus to which it is currently connected, and reconnect it to a designated bus.

moveplnt

Use this API to disconnect all of the machines from the specified bus, and reconnect it to a designated bus.

moveshunt

Use this API to disconnect the specified fixed shunt from the bus to which it is currently connected, and reconnect it to a designated bus.

moveshunts

Use this API to disconnect all of the fixed shunts from the specified bus and reconnect them to a designated bus.

movesws

This API routine is obsolete.

moveswshunt

Use this API to disconnect the specified switched shunt from the bus to which it is currently connected, and reconnect it to a designated bus.

moveswshunts

Use this API to disconnect all of the switched shunts from the specified bus and reconnect them to a designated bus.

mslv

Use this API to apply the modified Gauss-Seidel power flow calculation.

msum

Use this API to print a summary of mileage by owner.

mtdc

Use this API to produce a report of bus voltages and flows for each in-service multi-terminal dc line.

multisection_reporting

Use this API to specify or return the option to enable or disable multi-section line reporting.

mwmi

Use this API to apply the MAPP MW-mile calculation .

mwomwmsf

Use this API to tabulate generation (MW) on MW-mile shift factors for a specified transaction event.

mwomwosf

Use this API to tabulate generation (MW) on MW-ohm shift factors for a specified transaction event.

n11_accc

This API routine is obsolete.

n11_accc_2

This API is the second release of N-1-1 contingency analysis solution.

n11_accc_3

This API is the second release of N-1-1 contingency analysis solution.

n11_accc_parallel

Use this API to run the N-1-1 contingency analysis in parallel when the number of contingency processors in Program Settings is greater than 1.

n11_accc_parallel_2

Use this API to run the N-1-1 contingency analysis in parallel when the number of contingency processors in Program Settings is greater than 1.

n11_accc_pscopf

This API routine is obsolete.

n11_accc_pscopf_2

The API is the second release of N-1-1 contingency analysis solution in either corrective mode or security constrained optimal power flow mode (SCOPF).

n11_accc_pscopf_3

The API is the second release of N-1-1 contingency analysis solution in either corrective mode or security constrained optimal power flow mode (SCOPF).

netg

Use this API to change the in-service generation to negative MVA load at all Type 2 and 3 buses except those in the subsystem specified by the user.

new_dimension

Use this API to reset PSSE to an increased bus size level.

newcas

This API routine is obsolete.

newcase_2

This API is the second release of the function used to initialize a new power flow case.

newton_tolerance

Use this API to specify or return the value of the default Newton-Raphson convergence tolerance.

non_divergent

Use this API to specify or return the option to specify or return the option to enable or disable the non-divergent Newton power flow solution.

non_trans_percent_units

Use this API to set the non-transformer branch percent units option setting to either MVA or current expressed as MVA.

nsol

Use this API to apply the decoupled Newton-Raphson power flow calculation.

number_threads

Use this API to specify or return the number of processors available for parallel operations.

ordr

Use this API to calculate a sparsity preserving ordering of buses in preparation for the processing of network matrices.

otdf

Use this API to tabulate vectors of distribution factors using a linear network (dc) model.

output_y_matrix

Use this API to display the network admittance matrix for a subsystem of the working case in the form of a list of matrix terms.

outs

Use this API to tabulate those components in the working case that are removed from service.

ownm

This API routine is obsolete.

ownm_2

This API routine is obsolete.

ownm_3

This API routine is the third release of the owner renumbering function.

ownr

Use this API to tabulate owner totals by owner.

path

Use this API to specify a directory pathname.

phase_shift_adjustment

Use this API to specify or return the option to enable or disable the phase shift adjustment.

poly

Use this API to calculate interchange limits of a study system against two opposing systems using a linear network (dc) model.

pout

Use this API to print the power flow solution results with boundary condition and flow information on the left side of the report and other information on the right side.

power_output

Use this API to specify or return the option to display power output in either MVA or kVA.

pp_accc

Use this API to report the results of the AC contingency calculation function.

pp_accc_multi_case

This API routine is obsolete.

print_outaged_branches

Use this API to specify or return the option to enable or disable whether to print out-of- service branches.

print_winding_buses

Use this API to specify or return the option to enable or disable whether to print winding “to” buses of three-winding transformers.

progress_output

Use this API to specify the progress output device.

prompt_output

Use this API to specify the prompt output device.

prti

Use this API to print the 16 line long title.

pscopf

This API routine is obsolete.

pscopf_2

This API is the second release of Preventive Security Constrained Optimal Power Flow solution (PSCOPF).

pseb

Use this API to convert a PSEB command file into a PSSE response file.

pssehalt

This API routine is obsolete.

pssehalt_2

Use this API to end the operation of PSSE, closes all associated files and returns to the calling application.

pv_engine

This API routine is obsolete.

pv_engine_1a

This API routine is obsolete.

pv_engine_2

This API routine is obsolete.

pv_engine_3

This API routine is obsolete.

pv_engine_4

This API routine is obsolete.

pv_engine_5

This API routine is obsolete.

pv_engine_6

Use this API routine to run the PV analysis calculation engine.

qv_engine

This API routine is obsolete.

qv_engine_2

This API routine is obsolete.

qv_engine_3

This API routine is obsolete.

qv_engine_4

Use this API routine to run the QV analysis calculation engine.

rank

Use this API to estimate the severity of designated single branch outage contingencies and builds a contingency solution output file with contingencies specified in decreasing order of their estimated severities.

rank_brn_and_mac

Use this API to estimate the severity of designated single element outage contingencies and builds a contingency description data file with contingencies specified in decreasing order of their estimated severities.

rate

This API routine is obsolete.

rate_2

Use this API to check branch loadings.

rating_set

Use this API to specify or return the current rating set, from 1 to 12.

rawd

This API routine is obsolete.

rawd_2

Use this API to replicate the working case in the form of a power flow raw data file.

rawdx

This API routine is obsolete.

rawx_to_csv

Use this API to export rawx (extended raw data) table to a CSV (comma-separated values) file.

rdch

Use this API to read power flow change data into the working case.

rdchrawversion

Use this API to read a Power Flow Change Raw Data File into the working case.

rdeq

Use this API to build an electrical equivalent of radial and, optionally, two-point Type 1 buses outside of a specified subsystem of the working case.

read

Use this API to read a power flow raw data file and add all the data specified in it to the working case.

readcapcurves

Use this API to read data contained in a Machine Capability Curve Data File into the working case.

readrawversion

Use this API to read a power flow raw data file and add all the data specified in it to the working case.

readrawx

Use this API to read an extended raw data file and add all the data specified to the working case.

readsub

Use this API to read a power flow raw data file and add subsystem data specified in it to the working case.

readsubrawversion

Use this API to read a power flow raw data file and add subsystem data specified in it to the working case.

readx

This API routine is obsolete.

recn

Use this API to electrically reconnect a bus.

regb

Use this API to tabulate those buses where voltages are controlled by generation, switched shunts, and/or other voltage controlling equipment.

relind

This API routine is obsolete.

relind_2

Use this API to run probabilistic reliability assessment for transmission systems.

remm

Use this API to read transaction event data from a transactions raw data file and add it to PSSE working memory.

report_output

Use this API to specify the report output device.

resq

Use this API to read sequence data from a sequence data file and add it to the working case.

resqversion

Use this API to read a network sequence data file and add all the data specified in it to the working case.

result_table_output

Use this API to get and set the default tabular output.

reti

Use this API to read the long title from an input file into the working case.

retry_pssuserpf

Use this API to allow the loading or use of the Powerflow Customization Interface (PCI) implementation module (pssuserpf) after a failure.

rev29_names

Use this API to set the extended bus name input format to either the PSSE-29 or PSSE-30 format.

rnfi

Use this API to reproduce the results of a working case bus renumbering operation in auxiliary data input files.

rsol

Use this API to perform a robust power flow solution (activity RSOL).

runlastsolution

Use this API to run the last known power flow solution.

rwcm

Use this API to replicate the working case in IEEE common tape format.

rwma

Use this API to replicate machine parametric data from the working case in the form of a machine impedance data file.

rwmm

Use this API to replicate transaction event data in the form of a transactions data file.

rwsq

This API routine is obsolete.

rwsq_2

Use this API to replicate the sequence data contained in the working case in the form of a sequence data file.

save

Use this API to save the PSSE working case in a saved case file.

scal

This API routine is obsolete.

scal_2

This API routine is obsolete.

scal_3

This API routine is obsolete.

scal_4

Use this API routine to uniformly increase or decrease any or all specified bus quantities for a specified group of buses.

sensitivity_flow

This API is used to calculate sensitivity factors of a branch flow to MW power at buses, MW power at generator buses, MW at load buses, phase angle of phase shifters, tap postion of tap changing transformers as well as admittance of switched shunts:

sensitivity_flows

This API is used to calculate sensitivity factors of flows on the branches in a subsystem to MW power at buses, MW power at generator buses, MW power at load buses, phase angle of phase shifters, tap postion of tap changing transformers as well as admittance of switched shunts.

sensitivity_interface

This API is used to calculate sensitivity factors of an interface flow to MW power at buses, MW power at generator buses, MW power at load buses, phase angle of phase shifters, tap position of tap changing transformers as well as admittance of switched shunts.

sensitivity_voltage

This API is used to calculate sensitivity factors of a bus voltage to MW and MVar power at buses, MW power at generator buses, MW and MVar at load buses, phase angle of phase shifters, tap postion of tap changing transformers as well as admittance of switched shunts.

sensitivity_voltages

This API is used to calculate sensitivity factors of bus voltages in a subsystem to MW and MVar power at buses, MW power at generator buses, MW and MVar at load buses, phase angle of phase shifters, tap postion of tap changing transformers as well as admittance of switched shunts.

set_input_dev

Use this API to set the terminal input device to a file.

set_progress_verbose

Use this API to to set the option progress message verbose value.

shnt

Use this API to tabulate fixed and/or switched bus shunts contained in the working case.

short_circuit_coordinates

Use this API to specify or return the option to set the fault analysis voltage and current output coordinates to either rectangular or polar coordinates.

short_circuit_modeling

Use this API to specify or return the option for the fault analysis modeling setting; either normal three-phase or center tapped two-phase.

short_circuit_units

Use this API to specify or return the option to set the fault analysis voltage and current output units to either per unit or physical units.

short_circuit_warning

Use this API to specify or return the option to enable or disable the fault analysis warning option setting.

short_circuit_z_coordinates

Use this API to specify or return the option to set the fault analysis output impedance coordinates to either rectangular or polar coordinates.

short_circuit_z_units

Use this API to specify or return the option to set the fault analysis output impedance units to either per unit or ohms.

show

Use this API to tabulate summaries of Saved Case and/or Snapshot Files.

showtable

Directs a report table to output console.

showtablebyindex

This API routine was first introduced in release 35.0.0.

size

Use this API to obtain a summary of the number of components in the working case (activity SIZE).

solv

Use this API to apply the Gauss-Seidel power flow calculation.

spcb

Use this API to calculate positive sequence equivalents of branch unbalances.

spil

Use this API to calculate transmission interchange limits using a linear network (dc) model.

splt

Use this API to add a bus to the working case and place a zero impedance line between bus BUS and the new bus.

sqli

Use this API to tabulate the sequence data in a form suitable for problem data documentation.

sraind

Use this API to run the substation reliability analysis.

stop

This API routine is obsolete.

stop_2

Use this API to end the operation of PSSE.

subs

Use this API to summarize conditions in the working case by tabulating the conditions at each swing system bus, conditions at each area slack area bus, number of components, generation/ load/shunt totals, and loss/line shunt/charging totals by voltage levels.

switched_shunt_adjustment

Use this API to specify or return the option to enable or disable switched shunt adjustment.

tap_adjustment

Use this API to specify or return the option for the default tap adjustment setting; either disabled, stepping or direct.

text

This API does nothing.

tflg

Use this API to set or reset the adjustment control mode flags for all automatically adjustable transformers contained in the specified subsystem.

ties

Use this API to tabulate the flows on all area tie lines, with tie flows grouped by area.

tiez

Use this API to tabulate the flows on all zone tie lines, with tie flows grouped by zone.

time

Use this API to tabulate timing statistics.

tlst

Use this API to tabulate those transformers in the working case where off-nominal turns ratio or phase shift angle may be adjusted by the power flow solution activities.

tltg

Use this API to calculate transmission interchange limits using a linear network (dc) model.

tpch

Use this API to check the adjustment data associated with voltage or flow controlling transformers.

transformer_percent_units

Use this API to specify or return the option to set the transformer percent units to either MVA or current expressed as MVA.

transmission_line_units

Use this API to to specify or return the option set the transmission line units to either per unit or ohms.

tree

Use this API to check for the existence of in-service ac islands that do not contain a Type 3 (swing) bus.

tspfprofilecurvevalue

Use this API to return real parameters of Time Series Power Flow profile data.

tysl

Use this API to run switching study network solutions.

user

Use this API to run the user-written activity, subroutine USERAC.

vamm

Use this API to tabulate the vector absolute MW-mile report.

vamo

Use this API to tabulate the vector absolute MW-ohm report.

vchk

Use this API to tabulate those buses where voltage magnitude is outside a specified range.

voltage_input

Use this API to specify or return the voltage input option setting; either per unit or kV.

voltage_output

Use this API to specify or return the voltage output option setting; either per unit or kV.

vsmo

Use this API to tabulate the vector MW-ohm report.

write_options_file

Use this API to save the present values of the PSSE-25 program option settings to the file psse.opt.

writecapcurves

Use this API to write the capability curve data in the working case in the form of a Capability Curve Raw Data File.

writerawversion

Use this API to replicate the working case in the form of power flow raw data file compatible with PSSE 15 or later.

writerawx

Use this API to write an extended raw data file from data in the current working case.

writerawxsubsys

Use this API to write an extended raw data file from data in the current working case, specifying a subsystem.

writeseqversion

This API routine is obsolete.

writeseqversion_2

Use this API to replicate the working case in the form of a network sequence data file compatible with PSSE 27 or later.

xeqv

Use this API to build an electrical equivalent of the portion of the working case outside of a specified subsystem of the working case.

zone

This API routine is obsolete.

zone_2

Use this API to tabulate zone totals by zone.

zone_area

Use this API to tabulate zone totals by zone, along with subtotals by area.

zonm

This API routine is obsolete.

zonm_2

Use this API routine to reassign the buses, loads and/or induction machines in a specified subsystem of the working case from their original zone to a designated zone.

Previous topic
psspy

Next topic
psspy.accc

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Data
Power Flow Data
Release
35.6.0

Date
July 12, 2023

area_data

Use this API to modify area data in the working case (see PSSE Program Operation Manual, Areas, Zones and Owners).

branch_chng

This API routine is obsolete.

branch_chng_3

Use this API routine to modify the data of an existing non-transformer branch in the working case (see PSSE Program Operation Manual, Non-Transformer Branch Data).

branch_data

This API routine is obsolete.

branch_data_3

Use this API to modify the data of an existing non-transformer branch in the working case or to add a new non-transformer branch to the working case (see PSSE Program Operation Manual, Non- Transformer Branch Data).

bus_chng_3

Use this API routine to modify the data of an existing bus in the working case (see PSSE Program Operation Manual, Bus Data).

bus_chng_4

Use this API routine to modify the data of an existing bus in the working case (see PSSE Program Operation Manual, Bus Data).

bus_data

This API routine is obsolete.

bus_data_2

This API routine is obsolete.

bus_data_3

This API routine is obsolete.

bus_data_4

Use this API routine to modify the data of an existing bus in the working case, or to add a new bus to the working case (see PSSE Program Operation Manual, Bus Data).

bus_number

Use this API to change the bus number of an existing bus in the working case.

case_title_data

Use this API to change the two line case title in the working case (see PSSE Program Operation Manual, Case Identification Data).

casolution_parameters

Use this API to modify the contingency analysis solution parameters.

casolution_parameters_2

Use this API to modify the contingency analysis solution parameters.

casolution_parameters_3

Use this API to modify the contingency analysis solution parameters.

extr

Use this API to purge specified buses and all branches connected to them from the working case (activity EXTR).

facts_chng_2

This API routine is obsolete.

facts_chng_3

Use this API routine to modify the data of an existing FACTS device in the working case (see PSSE Program Operation Manual, FACTS Device Data).

facts_data

This API routine is obsolete.

facts_data_2

This API routine is obsolete.

facts_data_3

Use this API to modify the data of an existing FACTS device in the working case, or to add a new FACTS device to the working case (see PSSE Program Operation Manual, FACTS Device Data).

gne_chng

Use this API routine to modify the data of an existing GNE device in the working case (see PSSE Program Operation Manual, GNE Device Data).

gne_data

Use this API routine to run the GNE device data specification function.

impedance_correction_data

This API routine is obsolete.

impedance_correction_data_3

Use this API to modify the data of an existing transformer impedance correction table in the working case or to add a new transformer impedance correction table to the working case (see PSSE Program Operation Manual, Transformer Impedance Correction Table Data).

induction_machine_chng

Use this API routine to modify the data of an existing induction machine in the working case (see PSSE Program Operation Manual, Induction Machine Data).

induction_machine_data

Use this API routine to modify the data of an existing induction machine in the working case, or to add a new induction machine to the working case (see PSSE Program Operation Manual, Induction Machine Data).

load_chng_4

This API routine is obsolete.

load_chng_5

This API routine is obsolete.

load_chng_6

Use this API routine to modify the data of an existing load in the working case (see PSSE Program Operation Manual, Load Data).

load_data

This API routine is obsolete.

load_data_3

This API routine is obsolete.

load_data_4

This API routine is obsolete.

load_data_5

This API routine is obsolete.

load_data_6

Use this API routine to modify the data of an existing load in the working case, or to add a new load to the working case (see PSSE Program Operation Manual, Load Data).

long_title_data

Use this API to change the sixteen line long title in the working case (see PSSE Program Operation Manual, activity CHTI).

machine_cap_curve_chng

Use this API routine to modify the capability curve data of an existing machine in the working case.

machine_cap_curve_data

Use this API routine to specify or modify the capability curve data of an existing machine in the working case.

machine_chng_2

This API routine is obsolete.

machine_chng_3

Use this API routine to modify the data of an existing machine in the working case (see PSSE Program Operation Manual, Plant Data).

machine_chng_4

Use this API routine to modify the data of an existing machine in the working case (see PSSE Program Operation Manual, Plant Data).

machine_data

This API routine is obsolete.

machine_data_2

This API routine is obsolete.

machine_data_3

Use this API to modify the data of an existing machine in the working case, or to add a new machine to a plant bus in the working case (see PSSE Program Operation Manual, Plant Data).

machine_data_4

Use this API to modify the data of an existing machine in the working case, or to add a new machine to a plant bus in the working case (see PSSE Program Operation Manual, Plant Data).

mbid2dc

Use this API to change the name of the specified two-terminal dc line.

mbid3wnd

Use this API to change the identifier of the specified three-winding transformer.

mbidatrn

Use this API to change the identifier of the specified inter-area transfer.

mbidbrn

Use this API to change the identifier of the specified non-transformer branch or two-winding transformer.

mbidfacts

Use this API to change the name of the specified FACTS device.

mbidgne

Use this API routine to change the GNE device name of the specified GNE device.

mbidindmac

Use this API routine to change the identifier of the specified induction machine.

mbidload

Use this API to change the identifier of the specified load.

mbidmac

Use this API to change the identifier of the specified machine.

mbidmdc

Use this API to change the name of the specified multi-terminal dc line.

mbidmsl

Use this API to change the identifier of the specified multi-section line.

mbidshunt

Use this API to change the identifier of the specified fixed bus shunt.

mbidswshunt

Use this API to change the identifier of the specified switched bus shunt.

mbidvd

Use this API to change the voltage droop control name of the specified voltage droop control in the working case.

mbidvsc

Use this API to change the VSC dc line name of the specified VSC dc line.

multi_section_line_data

Use this API to modify the definition of an existing multi-section line grouping in the working case or to add a new multi-section line grouping to the working case (see PSSE Program Operation Manual, Multi-Section Line Grouping Data).

multi_section_line_edit

Use this API to modify the status and/or metered end designation of an existing multi-section line grouping in the working case (see PSSE Program Operation Manual, Multi-Section Line Grouping Data).

multi_term_dc_bus_data

Use this API to modify the data of a dc bus of an existing multi-terminal dc line in the working case or to add a new dc bus to a multi-terminal dc line in the working case (see PSSE Program Operation Manual, Multi-Terminal DC Transmission Line Data).

multi_term_dc_convr_data

Use this API to modify the data of a dc converter of an existing multi-terminal dc line in the working case or to add a new converter to a multi-terminal dc line in the working case (see PSSE Program Operation Manual, Multi-Terminal DC Transmission Line Data).

multi_term_dc_line_chng

Use this API routine to modify the control mode and mode switch voltage of an existing multi- terminal dc line in the working case (see PSSE Program Operation Manual, Multi-Terminal DC Transmission Line Data).

multi_term_dc_line_data

Use this API to modify the control mode and mode switch voltage of an existing multi-terminal dc line in the working case or to add a new multi-terminal dc line to the working case (see PSSE Program Operation Manual, Multi-Terminal DC Transmission Line Data).

multi_term_dc_link_data

Use this API to modify the data of a dc link of an existing multi-terminal dc line in the working case or to add a new dc link to a multi-terminal dc line in the working case (see PSSE Program Operation Manual, Multi-Terminal DC Transmission Line Data).

owner_data

Use this API to modify owner data in the working case (see PSSE Program Operation Manual, Interarea Transfer Data).

pbus_add_mod

Use this API to add or modify transaction event participating bus data.

pbus_delete

Use this API to remove a bus from the set of buses that are participating in a transaction event.

plant_chng

This API routine is obsolete.

plant_chng_3

This API routine is obsolete.

plant_chng_4

Use this API routine to modify the data of an existing plant that is part of a substation in the working case.

plant_data

This API routine is obsolete.

plant_data_3

This API routine is obsolete.

plant_data_4

Use this API to modify the data of an existing plant in the working case, or to add a new plant to the working case (see PSSE Program Operation Manual, Fixed Bus Shunt Data).

purg

Use this API routine to delete specified outaged equipment items from the working case.

purg2dc

Use this API to delete the specified two-terminal dc line from the working case.

purg3wnd

Use this API to delete the specified three-winding transformer from the working case.

purg_voltage_droop

Use this API to delete an existing voltage droop control from the working case.

purgarea

Use this API to delete areas with no equipment assigned to them from the working case.

purgatrn

Use this API to delete the specified inter-area transfer from the working case.

purgbrn

Use this API to delete the specified non-transformer branch or two-winding transformer from the working case.

purgcapcurve

Use this API to delete the specified machine’s capability curve from the working case.

purge_multi_term_dc_bus

Use this API to delete the specified dc bus from the specified multi-terminal dc line in the working case.

purge_multi_term_dc_convr

Use this API to delete the specified converter from the specified multi-terminal dc line in the working case.

purge_multi_term_dc_link

Use this API to delete the specified dc link from the specified multi-terminal dc line in the working case.

purgfacts

Use this API to delete the specified FACTS device from the working case.

purggne

Use this API routine to delete the specified GNE device from the working case.

purgindmac

Use this API routine to delete the specified induction machine from the working case.

purgindmacs

Use this API routine to delete all induction machines from the specified bus in the working case.

purgload

Use this API to delete the specified load from the working case.

purgloads

Use this API to delete all loads from the specified bus in the working case.

purgmac

Use this API to delete the specified machine from the working case.

purgmdc

Use this API to delete the specified multi-terminal dc line from the working case.

purgmsl

Use this API to delete the specified multi-section line grouping from the working case.

purgmut

Use this API to delete the specified zero sequence mutual coupling from the working case.

purgowner

Use this API to delete owners with no equipment assigned to them from the working case.

purgplnt

Use this API to delete the plant and machine data at the specified bus from the working case.

purgshunt

Use this API to delete the specified fixed bus shunt from the working case.

purgshunts

Use this API to delete all fixed shunts from the specified bus in the working case.

purgsws

Use this API to delete all switched shunts from the specified bus in the working case.

purgswshunt

Use this API to delete the specified switched bus shunt from the working case.

purgvsc

Use this API to delete the specified VSC dc line from the working case.

purgzone

Use this API to delete zones with no equipment assigned to them from the working case.

ratingsettextdata

Use this API to change the column and descriptions for a particular rating set used in reporting.

shunt_chng

Use this API routine to modify the data of an existing fixed bus shunt in the working case (see PSSE Program Operation Manual, Fixed Bus Shunt Data).

shunt_data

Use this API to modify the data of an existing fixed bus shunt in the working case or to add a new fixed bus shunt to the working case (see PSSE Program Operation Manual, Fixed Bus Shunt Data).

solution_parameters

This API routine is obsolete.

solution_parameters_2

This API routine is obsolete.

solution_parameters_3

This API routine is obsolete.

solution_parameters_4

This API routine is obsolete.

solution_parameters_5

Use this API to modify the power flow solution parameters in the working case (see PSSE Program Operation Manual, Sections 6.3.13, 6.3.18, 6.5.1 and 11.7).

switched_shunt_chng_3

This API routine is obsolete.

switched_shunt_chng_4

This API routine is obsolete.

switched_shunt_chng_5

Use this API routine to modify the data of an existing switched shunt in the working case (see PSSE Program Operation Manual, Switched Shunt Data).

switched_shunt_data

This API routine is obsolete.

switched_shunt_data_3

This API routine is obsolete.

switched_shunt_data_4

This API routine is obsolete.

switched_shunt_data_5

Use this API to modify the data of an existing switched shunt in the working case or to add a new switched shunt to the working case (see PSSE Program Operation Manual, Switched Shunt Data).

three_winding_data

This API routine is obsolete.

three_wnd_imped_chng_3

This API routine is obsolete.

three_wnd_imped_chng_4

Use this API routine to modify the impedance data of an existing three-winding transformer in the working case (see PSSE Program Operation Manual, Non-Transformer Branch Data).

three_wnd_imped_data_3

This API routine is obsolete.

three_wnd_imped_data_4

Use this API routine to modify the impedance data of an existing three-winding transformer in the working case, or to add a new three-winding transformer to the working case (see PSSE Program Operation Manual, Non-Transformer Branch Data).

three_wnd_impedance_data

This API routine is obsolete.

three_wnd_winding_data

This API routine is obsolete.

three_wnd_winding_data_3

This API routine is obsolete.

three_wnd_winding_data_4

This API routine is obsolete.

three_wnd_winding_data_5

Use this API to modify the data of one winding of an existing three-winding transformer in the working case (see PSSE Program Operation Manual, Non-Transformer Branch Data).

transaction_add_mod

Use this API to add or modify transaction event data in PSSE working memory.

transaction_delete

Use this API to delete a transaction event from PSSE working memory.

transfer_chng

Use this API routine to modify the data of an inter-area transfer in the working case (see PSSE Program Operation Manual, Zone Data).

transfer_data

Use this API routine to modify the data of an inter-area transfer in the working case, or to add a new inter-area transfer to the working case (see PSSE Program Operation Manual, Zone Data).

two_term_dc_converter_data_3

Use this API to modify the data of a dc converter of an existing two-terminal dc line in the working case (see PSSE Program Operation Manual, Area Interchange Data).

two_term_dc_convr_data

This API routine is obsolete.

two_terminal_dc_line_chng

Use this API routine to modify the link data of an existing two-terminal dc line in the working case (see PSSE Program Operation Manual, Area Interchange Data).

two_terminal_dc_line_data

Use this API routine to modify the link data of an existing two-terminal dc line in the working case, or to add a new two-terminal dc line and its link data to the working case (see PSSE Program Operation Manual, Area Interchange Data).

two_winding_chng_4

This API routine is obsolete.

two_winding_chng_5

This API routine is obsolete.

two_winding_chng_6

Use this API routine to modify the data of an existing two-winding transformer in the working case (see PSSE Program Operation Manual, Owner Data).

two_winding_data

This API routine is obsolete.

two_winding_data_3

This API routine is obsolete.

two_winding_data_4

This API routine is obsolete.

two_winding_data_5

This API routine is obsolete.

two_winding_data_6

Use this API to modify the data of an existing two-winding transformer in the working case, or to add a new two-winding transformer to the working case (see PSSE Program Operation Manual, Owner Data).

voltage_droop_chng

Use this API routine to modify the voltage droop control in the working case(see PSSE Program Operation Manual.

voltage_droop_data

Use this API routine to modify the voltage droop control in the working case, or to add a new voltage droop control to the working case (see PSSE Program Operation Manual.

vsc_dc_converter_data

This API routine is obsolete.

vsc_dc_converter_data_3

Use this API to modify the data of a dc converter of an existing VSC dc line in the working case (see PSSE Program Operation Manual, Voltage Source Converter (VSC) DC Transmission Line Data).

vsc_dc_line_chng

Use this API routine to modify the link data of an existing VSC dc line in the working case (see PSSE Program Operation Manual, Voltage Source Converter (VSC) DC Transmission Line Data).

vsc_dc_line_data

Use this API routine to modify the link data of an existing VSC dc line in the working case, or to add a new VSC dc line to the working case (see PSSE Program Operation Manual, Voltage Source Converter (VSC) DC Transmission Line Data).

zone_data

Use this API to modify zone data in the working case (see PSSE Program Operation Manual, Zone Data).

Previous topic
psspy.zonm_2

Next topic
psspy.area_data

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Node Breaker Operation
Node Breaker Operation
Release
35.6.0

Date
July 12, 2023

convert_section_to_bus

Use this API routine to convert a bus section, one that had been automatically created within a substation due to open substation switching devices, into a main network bus.

isolate2dclinebybreaker

Use this API to isolate a two-terminal DC line using system or substation breakers.

isolate3wtbybreaker

Use this API to isolate a three-winding transformer using system or substation breakers.

isolatebusbybreaker

Use this API to isolate a bus using system or substation breakers.

isolatefactsbybreaker

Use this API to isolate a FACTS device using system or substation breakers.

isolateindmachinebybreaker

Use this API to isolate an induction machine using system or substation breakers.

isolatelinebybreaker

Use this API to isolate a two-winding transformer or non-transformer line using system or substation breakers.

isolateloadbybreaker

Use this API to isolate a load using system or substation breakers.

isolatemachinebybreaker

Use this API to isolate a machine using system or substation breakers.

isolatemslinebybreaker

Use this API to isolate a multi-section line using system or substation breakers.

isolatemtdclinebybreaker

Use this API to isolate a multi-terminal dc line using system or substation breakers.

isolatenodebybreaker

Use this API to isolate a substation node using system or substation breakers.

isolateshuntbybreaker

Use this API to isolate a fixed shunt using system or substation breakers.

isolateswdbybreaker

Use this API to isolate a substation switching device using system or substation breakers.

isolateswshuntbybreaker

This API routine is obsolete.

isolateswshuntbybreaker_2

Use this API to isolate a switched shunt using system or substation breakers.

isolatevscdclinebybreaker

Use this API to isolate a VSC DC line using system or substation breakers.

restorestatesfromisolate

Use this API to restore the network working case back to its original state; the state prior to all “Isolate By Breaker” actions that have been taken.

station_ampout

Use this API to print current within a substation.

station_build_config

Use this API to automatically build a general layout configuration for a bus being built within a substation.

station_list

Use this API to list components in a substation.

station_pout

This API routine is obsolete.

station_pout_2

Use this API to print power flows within a substation.

station_tree

Use this API routine to check the node breaker model and the consistency between node breaker and bus branch models.

Previous topic
psspy.zone_data

Next topic
psspy.convert_section_to_bus

Quick search
indexmodules |next |previous |Home | psspy »Node Breaker Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Node Breaker Data
Node Breaker Data
Release
35.6.0

Date
July 12, 2023

fetch_adjvar_term_node

Use this API to obtain the terminal node to which an OPF adjustable bus shunt is connected to.

fetch_indmachine_term_node

Use this API to obtain the terminal node to which a machine is connected to.

fetch_load_term_node

Use this API to obtain the terminal node to which a load is connected to.

fetch_machine_term_node

Use this API to obtain the terminal node to which a machine is connected to.

fetch_shunt_term_node

Use this API to obtain the terminal node to which a shunt is connected to.

fetch_sws_shunt_term_node

This API routine is obsolete.

fetch_sws_shunt_term_node_2

Use this API to obtain the terminal node to which a switched shunt is connected to.

plant_bus_section_chng

This API routine is obsolete.

station_2dc_bus_term_chng

Use this API to change the station two-term dc rectifier or inverter node terminal connection in the working case.

station_2dc_conv_term_chng

This API changes both node terminal connections of an existing two-term dc rectifier and inverter terminal data in the working case.

station_adjvar_term_chng

Use this API to change a substation OPF adjustable bus shunt node terminal connection in the working case.

station_branch_term_chng

Use this API to access existing station branch terminal data in the working case.

station_branch_term_move

Use this API to move one terminal node connection of a branch in the working case.

station_bus_purg

This API routine was first introduced in release 34.2.0.

station_chng

Use this API to modify the data of an existing substation data in the working case.

station_data

Use this API to modify the data of an existing substation data in the working case, or to add a new substation to the working case.

station_facts_bus_term_chng

Use this API to change the station FACTS device node terminal data connection in the working case.

station_facts_term_chng

This API changes the FACTS device sending and terminal end node terminal connections.

station_indmachine_term_chng

Use this API to change a substation induction machine node terminal connection in the working case.

station_load_term_chng

Use this API to access existing station load terminal data in the working case.

station_machine_term_chng

Use this API to change a substation machine terminal connection in the working case.

station_mtdc_bus_term_chng

Use this API to change the station multi-terminal converter node terminal connection in the working case.

station_mtdc_term_chng

This API changes both node terminal connections of an existing multi-terminal converter in the working case.

station_node_chng

Use this API to modify the data of an existing substation node in the working case.

station_node_data

Use this API to modify the data of an existing substation node in the working case, or to add a new substation node to the working case.

station_node_number

Use this API to change a node number in an existing substation.

station_node_purg

Use this API to delete a node in an existing substation.

station_number

Use this API to change a substation number for an existing substation.

station_purg

Use this API to delete a substation and all node-breaker components within that substation from the working case.

station_shunt_term_chng

Use this API to change a substation fixed shunt terminal connection in the working case.

station_swd_chng

Use this API to modify the data of an existing station switching device in the working case.

station_swd_data

Use this API to modify the data of an existing substation switching device in the working case, or to add a new substation switching device to the working case.

station_swd_mbid

Use this API to modify the circuit identifier of an existing station switching device in the working case.

station_swd_move

Use this API to move the “to” node of an existing substation switching device in the working case.

station_swd_purg

Use this API to delete an existing substation switching device in the working case.

station_sws_shunt_term_chng

This API routine is obsolete.

station_sws_shunt_term_chng_2

Use this API to change a substation switched shunt node terminal connection in the working case.

station_three_wnd_term_chng

Use this API to access existing substation three-winding transformer terminal data in the working case.

station_three_wnd_term_move

Use this API to move one terminal node connection of a three-winding transformer in the working case.

station_vscdc_bus_term_chng

Use this API to change the vsc dc converter node terminal connection in the working case.

station_vscdc_conv_term_chng

This API changes both node terminal connections of an existing vsc dc converter in the working case.

system_swd_chng

Use this API to modify the data of an existing system switching device in the working case, or to add a new system switching device to the working case.

system_swd_data

Use this API to add or modify the data of an existing system switching device in the working case, or to add a new system switching device to the working case.

Previous topic
psspy.station_tree

Next topic
psspy.fetch_adjvar_term_node

Quick search
indexmodules |next |previous |Home | psspy »Node Breaker Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Optimal Power Flow Operation
Optimal Power Flow Operation
Release
35.6.0

Date
July 12, 2023

add_details_to_opf_log

Use this API to specify or return the value of the OPF solution option to add details of the sensitivity values and Lagrange multipliers to the OPF Output Log file.

apply_alternate_step_size

Use this API to specify or return the value of the OPF solution option for applying an alternate lambda mismatch step size.

apply_automatic_scaling

Use this API to specify or return the value of the OPF solution option to apply automatic scaling of the objective coefficients and derivatives to improve convergence of the OPF solution.

bad_iter_coarse_limit

Use this API to specify or return the number of bad iterations allowed when the barrier coefficient is greater than 0.011 (mu greater then -2) before the solution progress is terminated as being infeasible.

bad_iter_fine_limit

Use this API to specify or return the the bad iteration limit when the barrier coefficient is less than, or equal to 0.011 (mu less than or equal to -2) before the solution progress is terminated as being infeasible.

clamp_nonoptimized_gens

Use this API to specify or return the value of the OPF solution option to apply the clamp equation to non-optimized generators.

constrain_interface_flows

Use this API to specify or return the value of the OPF option to constrain interface flows.

final_opf_barrier_coeff

Use this API to specify or return the value of the final coefficient value that the barrier function is attempting to attain.

import_ecdi

Use this API to import data from an Economics Dispatch Data File, as prepared for use in activity ECDI, into the OPF working data.

initial_opf_barrier_coeff

Use this API to specify or return the value of the initial OPF barrier coefficient.

interface_flow_cost_coeff

Use this API to specify or return the value of the coefficient for the interface flow objective.

lsto

Use this API to list OPF working case data in a form suitable for data documentation.

minimize_adj_bus_shunts

Use this API to specify or return the value of the OPF minimize adjustable bus shunts (var compensation) objective function option.

minimize_fuel_cost

Use this API to specify or return the value of the OPF minimize fuel cost objective option.

minimize_interface_flows

Use this API to specify or return the value of the OPF minimize interface flows objective option.

minimize_load_adjustments

Use this API to specify or return the value of the OPF minimize adjustable bus load objective option.

minimize_p_losses

Use this API to specify or return the value of the OPF minimize active power loss objective option.

minimize_p_slack

Use this API to specify or return the value of the OPF minimize active power slack objective option.

minimize_q_losses

Use this API to specify or return the value of the OPF minimize reactive power loss objective option.

minimize_q_slack

Use this API to specify or return the value of the OPF minimize reactive power slack objective option.

minimize_reactive_reserve

Use this API to specify or return the value of the OPF minimize reactive reserve objective option.

minimize_series_comp

Use this API to specify or return the value of the OPF minimize series compensation (adjustable branch reactance) objective option.

nopf

Use this API to run the Optimal Power Flow solution.

open_bus_voltage_limits

Use this API to specify or return the value of the OPF solution option to automatically adjust bus voltage limits, making them more open for initial feasibility.

opf_barrier_step_length

Use this API to specify or return the value of the barrier function step length setting.

opf_clamp_decay_factor

Use this API to specify or return the value of the clamp equation decay factor.

opf_final_clamp_tol

Use this API to specify or return the value of the final clamp tolerance.

opf_fix_all_generators

Use this API to specify or return the value of the OPF option to treat all generators as nonoptimized (fixed).

opf_fix_phase_shifters

Use this API to specify or return the value of the OPF option to fix transformer phase shift angle settings.

opf_fix_switched_shunts

Use this API to specify or return the value of the OPF option to fix switched shunt settings.

opf_fix_tap_ratios

Use this API to specify or return the value of the OPF option to fix transformer tap ratio settings.

opf_fixed_voltage_penalty

Use this API to specify or return the value of the penalty for fixed voltage excursions.

opf_initial_clamp_tol

Use this API to specify or return the value of the initial clamp tolerance.

opf_interior_shift_factor

Use this API to specify or return the value of the interior shift factor multiplier.

opf_lambda_tolerance

Use this API to specify or return the value of the Lagrange multiplier blow-up tolerance during an optimal power flow solution.

opf_lf_control_penalty

Use this API to specify or return the value of the quadratic penalty for loadflow controls.

opf_max_tap_ratio_step

Use this API to specify or return the value of the maximum transformer tap ratio step.

opf_min_tap_ratio_step

Use this API to set or return the value of the minimum transformer tap ratio step.

opf_regulate_area_int

Use this API to set or return the value of the OPF option to regulate area interchange.

opf_round_switched_shunts

Use this API to set or return the value of the OPF solution option to discretize switched shunts.

opf_round_tap_ratios

Use this API to set or return the value of the OPF solution option to round transformer tap ratio settings.

opf_scale_qgen_limits

Use this API to set or return the value of the OPF option to scale reactive generation limits in the clamped constraint equation.

opf_step_length_tolerance

Use this API to set or return the value of the OPF minimum barrier step length tolerance.

opf_use_generator_vsched

Use this API to set or return the value of the OPF option to employ the generator scheduled voltage.

opto

Please use the individual OPF option setting API’s described in this section.

p_losses_cost_coeff

Use this API to set or return the value of the coefficient for the active power loss objective (OPF Solution Options).

produce_opf_log_file

Use this API to set or return the value of the OPF solution option to produce an OPF solution log file, and if so, the name of the log file.

q_losses_cost_coeff

Use this API to set or return the value of the coefficient for the reactive power loss objective.

reactive_resv_cost_coeff

Use this API to set or return the value of the coefficient for the reactive reserve objective.

ropf

Use this API to read an Optimal Power Flow Raw Data File.

rwop

Use this API to replicate the OPF data contained in the working case in the form of an Optimal Power Flow Data File.

set_opf_report_subsystem

Use this API to define the subsystem to be used when producing the opf output report.

use_dual_criteria

Use this API to set or return the value of the OPF solution option to apply the power flow mismatch tolerance to the dual variable problem.

use_emergency_flow_limits

Use this API to set or return the value of the OPF solution option to impose the emergency flow limits instead of the normal flow limits.

use_emergency_volt_limits

Use this API to set or return the value of the OPF solution option to impose the emergency bus voltage limits instead of the normal bus voltage limits.

write_opf_options_file

Use this API to save the PSSE OPF solution option settings to the PSSOPF.OPT file.

Previous topic
psspy.system_swd_data

Next topic
psspy.add_details_to_opf_log

Quick search
indexmodules |next |previous |Home | psspy »Optimal Power Flow Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Optimal Power Flow Data
Optimal Power Flow Data
Release
35.6.0

Date
July 12, 2023

newopf

Use this API to initialize the working case with default OPF data for all bus oriented data records.

opf_adjbrx_indv

Use this API to add an individual adjustable branch reactance data record to the working case.

opf_adjbrx_subsys

Use this API to add or modify all OPF branch reactance data records in a specified subsystem of the working case.

opf_adjload_tbl

Use this API to add an individual adjustable bus load table record to the working case.

opf_adjvar_indv

This API routine is obsolete.

opf_adjvar_indv_2

Use this API to add an individual OPF adjustable bus shunt data record to the working case.

opf_adjvar_subsys

Use this API to add or modify all OPF adjustable bus shunt records in a specified subsystem of the working case.

opf_apdsp_tbl

Use this API to add an individual active power dispatch table record to the working case.

opf_brflw_3wt_indv

Use this API to add a flow constraint record for an individual winding of a three-winding transformer in the working case.

opf_brflw_brn_indv

Use this API to add an individual branch or two-winding transformer flow constraint record to the working case.

opf_brflw_subsys

Use this API to add or modify all branch flow data records in a specified subsystem of the working case.

opf_bus_indv

This API routine is obsolete.

opf_bus_indv_2

Use this API to add OPF bus voltage magnitude data to the working case.

opf_bus_subsys

Use this API to add OPF bus attribute data for all records in a specified subsystem of the working case.

opf_change_3wt_flow_id

Use this API to change the identifier of a flow constraint record for an individual winding of a three-winding transformer in the working case.

opf_change_adjvar_id

This API routine is obsolete.

opf_change_brn_flow_id

Use this API to change the identifier of a branch or two-winding transformer OPF flow constraint record in the working case.

opf_csttbl_lin

Use this API to add a linear cost curve table record to the working case.

opf_csttbl_poly

Use this API to add a polynomial and exponential cost curve table record to the working case.

opf_csttbl_quad

Use this API to add a quadratic cost curve table record to the working case.

opf_gen_rcap_indv

Use this API to add an individual generation reactive capability data record to the working case.

opf_gen_rcap_subsys

Use this API to add or modify all OPF generator reactive capability records in a specified subsystem of the working case.

opf_gendsp_indv

Use this API to add generator dispatch data to an individual record in the working case.

opf_gendsp_subsys

Use this API to add OPF generator dispatch data to all records in a specified subsystem of the working case.

opf_genrsv_indv

Use this API to add an individual generator reserve data record to the working case.

opf_genrsv_subsys

Use this API to add or modify all OPF generator reserve records in a specified subsystem of the working case.

opf_intflw_3wt

Use this API to add a participating three-winding transformer winding to a specified interface flow constraint in the working case.

opf_intflw_brn

Use this API to add a participating branch to a specified interface flow constraint in the working case.

opf_intflw_main

Use this API to add an interface flow constraint record to the working case.

opf_intflw_reset

Use this API to remove all interface branches associated with a particular interface flow constraint in the working case.

opf_lnceqn_adjload

Use this API to add a participating adjustable bus load variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_adjvar

Use this API to add a participating adjustable bus shunt variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_brflow

Use this API to add a participating branch flow variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_intflow

Use this API to add a participating interface flow constraint variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_main

Use this API to add a linear constraint dependency record to the working case.

opf_lnceqn_pgen

Use this API to add a participating active power dispatch variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_qgen

Use this API to add a participating reactive power dispatch variable of a specified linear constraint dependency equation in the working case.

opf_lnceqn_reset

Use this API to remove all participating variables from a particular OPF linear constraint dependency equation in the working case.

opf_lnceqn_swshunt

This API routine is obsolete.

opf_lnceqn_swshunt_2

Use this API to add a participating switched shunt variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_tran

Use this API to add a participating transformer control variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_vang

This API routine is obsolete.

opf_lnceqn_vang_2

Use this API to add a participating bus voltage angle variable to a specified linear constraint dependency equation in the working case.

opf_lnceqn_vmag

This API routine is obsolete.

opf_lnceqn_vmag_2

Use this API to add a participating bus voltage magnitude variable to a specified linear constraint dependency equation in the working case.

opf_load_indv

Use this API to add an individual OPF bus load data record to the working case.

opf_load_subsys

Use this API to add or modify all OPF bus load data records in a specified subsystem of the working case.

opf_perrsv_gen

Use this API to add a participating generation reserve unit to a previously defined period reserve constraint in the working case.

opf_perrsv_main

Use this API to add a period reserve constraint record to the working case.

opf_perrsv_reset

Use this API to remove all generation reserve units associated with a particular period reserve constraint in the working case.

purge_all_opf_data

Use this API to purge and re-initialize all OPF data records in the working case.

purge_opf_adjbrx_indv

Use this API to purge an individual adjustable branch reactance data record from the working case.

purge_opf_adjbrx_subsys

Use this API to purge all OPF branch reactance data records from a specified subsystem of the working case.

purge_opf_adjload_tbl

Use this API to purge an individual adjustable bus load table from the working case.

purge_opf_adjvar_indv

This API routine is obsolete.

purge_opf_adjvar_indv_3

Use this API to purge an individual OPF adjustable bus shunt data record from the working case.

purge_opf_adjvar_subsys

Use this API to purge all OPF adjustable bus shunt records from a specified subsystem of the working case.

purge_opf_apdsp_tbl

Use this API to purge an individual active power dispatch table record from the working case.

purge_opf_brflw_3wt

Use this API to purge an individual flow constraint record of a three-winding transformer from the working case.

purge_opf_brflw_brn

Use this API to purge an individual branch or two-winding transformer flow constraint record from the working case.

purge_opf_brflw_subsys

Use this API to purge all branch flow data records in a specified subsystem in the working case.

purge_opf_bus_indv

This API routine is obsolete.

purge_opf_bus_indv_3

Use this API to purge (re-initialize) OPF bus voltage magnitude data for an individual bus or bus section record in the working case.

purge_opf_bus_subsys

Use this API to purge (re-initialize) OPF bus attribute data for all records in a specified subsystem of the working case.

purge_opf_csttbl_lin

Use this API to purge an optimal power flow linear cost curve record from the working case.

purge_opf_csttbl_poly

Use this API to purge an optimal power flow polynomial and exponential cost curve record from the working case.

purge_opf_csttbl_quad

Use this API to purge an optimal power flow quadratic cost curve record from the working case.

purge_opf_gen_rcap_indv

Use this API to purge an individual OPF generation reactive capability data record from the working case.

purge_opf_gen_rcap_subsys

Use this API to purge all OPF generator reactive capability records in a specified subsystem from the working case.

purge_opf_gendsp_indv

Use this API to purge generator dispatch data for an individual record from the working case.

purge_opf_gendsp_subsys

Use this API to purge generator dispatch data for all records from a specified subsystem of the working case.

purge_opf_genrsv_indv

Use this API to purge an individual optimal power flow generator reserve data record from the working case.

purge_opf_genrsv_subsys

Use this API to purge all OPF generator reserve records in a specified subsystem from the working case.

purge_opf_intflw

Use this API to purge an OPF interface flow constraint record, including all of its participating branches, from the working case.

purge_opf_intflw_3wt

Use this API to remove a participating three-winding transformer winding from a specified OPF interface flow constraint in the working case.

purge_opf_intflw_brn

Use this API to remove a participating branch from a specified OPF interface flow constraint in the working case.

purge_opf_lnceqn

Use this API to purge an OPF linear constraint dependency record, including all of its participating variables, from the working case.

purge_opf_lnceqn_adjload

Use this API to remove a participating adjustable bus load variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_adjvar

Use this API to remove a participating adjustable bus shunt variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_brflow

Use this API to remove a participating branch flow variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_intflow

Use this API to remove a participating interface flow constraint variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_pgen

Use this API to remove a participating active power dispatch variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_qgen

Use this API to remove a participating reactive power dispatch variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_swshunt

This API routine is obsolete.

purge_opf_lnceqn_swshunt_2

Use this API to remove a participating switched shunt variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_tran

Use this API to remove a participating transformer control variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_vang

This API routine is obsolete.

purge_opf_lnceqn_vang_2

Use this API to remove a participating bus voltage angle variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_lnceqn_vmag

This API routine is obsolete.

purge_opf_lnceqn_vmag_2

Use this API to remove a participating bus voltage magnitude variable from a specified OPF linear constraint dependency equation in the working case.

purge_opf_load_indv

Use this API to purge (re-initialize) an individual OPF bus load data record from the working case.

purge_opf_load_subsys

Use this API to purge (re-initialize) all OPF bus load data records in a specified subsystem of the working case.

purge_opf_perrsv

Use this API to purge an OPF period reserve constraint record and its association with participating reserve units from the working case.

purge_opf_perrsv_gen

Use this API to remove a participating period reserve unit from a specified OPF period reserve constraint.

Previous topic
psspy.write_opf_options_file

Next topic
psspy.newopf

Quick search
indexmodules |next |previous |Home | psspy »Optimal Power Flow Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Fault Analysis Operation
Fault Analysis Operation
Release
35.6.0

Date
July 12, 2023

ansi

This API routine is obsolete.

ansi_2

This API routine is obsolete.

ansi_3

This API routine executes the third release of the ANSI fault calculation function.

ascc

This API routine is obsolete.

ascc_1a

This API routine is obsolete.

ascc_2

This API routine is obsolete.

ascc_3

This API is used to apply a series of faults at various locations in the working case.

ascc_scfile

This API reads ASCC short circuit results from SCFILE and produces same ASCC output report that was generated when SCFILE was created.

bkdy

Use this API to calculate and report circuit breaker interrupting duty for 3-phase faults at all buses in a specified subsystem of the working case (activity BKDY).

check_sequence_data

Use this API routine to perform data checks on the selected categories of sequence data for all buses in the working case or for all buses in a specified subsystem.

flat

This API routine is obsolete.

flat_2

This API routine is the second release of the flat conditions function.

iecs

This API routine is obsolete.

iecs_2

This API routine is obsolete.

iecs_3

This API routine is obsolete.

iecs_4

This API executes the fourth release of the IEC short circuit calculations function.

iecs_scfile

This API reads IECS short circuit results from SCFILE and produces same IECS output report that was generated when SCFILE was created.

newseq

Use this API to initialize the fault analysis data arrays, set them to default values, and set the flag indicating that sequence data is present in the working case.

sceq

Use this API to construct network equivalents of the positive and zero sequence networks and calculates source impedances at equivalent source nodes for all three sequences in preparation for the unbalanced fault analysis activities of PSSE.

scgr

This API routine is obsolete.

scmu

This API routine is obsolete.

scmu_2

Use this API to calculate simultaneous unbalances.

scop

Use this API to tabulate unbalanced fault solution output.

seqd

This API routine is obsolete.

seqd_2

Use this API routine to factorize the sequence matrices in preparation for unbalanced fault calculations SCMU and SPCB.

sequence_network_setup

Use this API to specify or return the option to enable or disable automatic fault analysis sequence network setup.

sqex

Use this API to tabulate all fault analysis data pertaining to a specified bus.

Previous topic
psspy.purge_opf_perrsv_gen

Next topic
psspy.ansi

Quick search
indexmodules |next |previous |Home | psspy »Fault Analysis Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Fault Analysis Data
Fault Analysis Data
Release
35.6.0

Date
July 12, 2023

mbidncs

Use this API to change the table name of the specified non-conventional source fault contribution table in the working case.

seq_3_wind_grounding_data

Use this API to modify the zero sequence grounding data of an existing three-winding transformer in the working case (see PSSE Program Operation Manual, Zero Sequence Transformer Data).

seq_3_wind_winding_data

Use this API to modify the zero sequence impedance data of one winding of an existing three- winding transformer in the working case (see PSSE Program Operation Manual, Zero Sequence Transformer Data).

seq_branch_data

This API routine is obsolete.

seq_branch_data_3

Use this API to modify the zero sequence data of an existing non-transformer branch in the working case (see PSSE Program Operation Manual, Zero Sequence Non-Transformer Branch Data).

seq_bus_data

Bus load sequence data is now accessible as load sequence data.

seq_fixed_shunt_data

Use this API to modify the zero sequence data of an existing fixed bus shunt in the working case (see PSSE Program Operation Manual, Zero Sequence Fixed Shunt Data).

seq_induction_mach_data

This API routine is obsolete.

seq_induction_mach_data_2

Use this API routine to modify the sequence data of an existing induction machine in the working case (see PSSE Program Operation Manual, Induction Machine Impedance Data).

seq_load_data

Use this API routine to modify the sequence data of an existing load in the working case (see PSSE Program Operation Manual, Load Data).

seq_machine_data

This API routine is obsolete.

seq_machine_data_3

This API routine is obsolete.

seq_machine_data_4

Use this API routine to modify the sequence data of an existing machine in the working case (see PSSE Program Operation Manual, Positive Sequence Generator Impedance Data, Negative Sequence Generator Impedance Data and Zero Sequence Generator Impedance Data).

seq_machine_ncs_data

Use this API routine to modify a machine’s existing non-conventional source fault current contribution (NCSFCC) data or to add NCSFCC data to an existing machine in the working case.

seq_machine_ncs_data_purg

Use this API routine to delete a machine’s existing non-conventional source fault current contribution (NCSFCC) data.

seq_mutual_data

Use this API to modify existing zero sequence mutual impedance data in the working case or to add a new zero sequence mutual coupling to the working case (see PSSE Program Operation Manual, Zero Sequence Mutual Impedance Data).

seq_ncs_flt_cntrb_chng

This API routine was first introduced in release 34.0.0.

seq_ncs_flt_cntrb_data

This API routine is obsolete.

seq_ncs_flt_cntrb_purg

This API routine is obsolete.

seq_ncs_table_data

Use this API to modify the data of an existing non-conventional source fault contribution table in the working case or to add a new non-conventional source fault contribution table to the working case.

seq_ncs_table_onept

Use this API to modify the one data point of an existing non-conventional source fault contribution table in the working case or to add a new one data point to non-conventional source fault contribution table to the working case.

seq_ncs_table_purg

Use this API to delete an existing non-conventional source fault contribution table from the working case.

seq_ncs_table_purg_onept

Use this API to delete specified data point in an existing non-conventional source fault contribution table.

seq_ncs_table_type

Use this API to get NCS table type.

seq_switched_shunt_data

This API routine is obsolete.

seq_switched_shunt_data_3

Use this API to modify the zero sequence data of an existing switched shunt in the working case (see PSSE Program Operation Manual, Zero Sequence Switched Shunt Data).

seq_three_winding_data

This API routine is obsolete.

seq_three_winding_data_3

Use this API to modify the zero sequence data of an existing three-winding transformer in the working case.

seq_two_winding_data

This API routine is obsolete.

seq_two_winding_data_3

Use this API to modify the zero sequence data of an existing two-winding transformer in the working case (see PSSE Program Operation Manual, Zero Sequence Transformer Data).

Previous topic
psspy.sqex

Next topic
psspy.mbidncs

Quick search
indexmodules |next |previous |Home | psspy »Fault Analysis Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Harmonics Operation
Harmonics Operation
Release
35.6.0

Date
July 12, 2023

har_analysis

This API routine is obsolete.

har_analysis_2

Use this API to run harmonics analysis.

har_create_pfcase

Use this API to save working case updated for harmonic frequency and passive filters added as fixed shunts.

har_exists_dstn_results

Check if Harmonics Distortion Calculation results available in PSSE working memory from previously run harmonic analysis activity.

har_exists_fscan_results

Check if Harmonics Frequency Scan results available in PSSE working memory from previously run harmonic analysis activity.

har_export_dstn

Use this API to export harmonics distortion calculation results to comma separated (.csv) file.

har_export_fscan

Use this API to export harmonics frequency scan results to comma separated (.csv) file.

har_new

Use this API to initialize all data records required for Harmonics analysis.

har_purg

Use this API to purge all harmonics data from the working case.

har_set_resn_thresholds

Use this API to set parameters to filter resonances from harmonic analysis frequency scan response.

har_set_resn_thresholds_default

Use this API to set default parameters to filter resonances from harmonic analysis frequency scan response.

Previous topic
psspy.seq_two_winding_data_3

Next topic
psspy.har_analysis

Quick search
indexmodules |next |previous |Home | psspy »Harmonics Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Harmonics Data
Harmonics Data
Release
35.6.0

Date
July 12, 2023

har_2tdc

Use this API to modify or add new harmonics Two Terminal DC data to the working case.

har_2tdc_chng

Use this API to modify harmonics Two Terminal DC data in the working case.

har_2tdc_purg

Use this API to purge specified harmonics Two Terminal DC data from the working case.

har_brn

Use this API to modify or add new harmonics branch data to the working case.

har_brn_chng

Use this API to modify harmonics branch data to the working case.

har_brn_purg

Use this API to purge specified harmonics branch data from the working case.

har_cursrc

Use this API to modify or add new harmonics current source table data to the working case.

har_cursrc_chng

Use this API to change harmonics current source table data in the working case.

har_cursrc_chng_name

Use this API to change harmonics current source table name in the working case.

har_cursrc_chng_onept

Use this API to modify one data point to harmonics current source table in the working case.

har_cursrc_name

Use this API to add or change harmonics current source table name in the working case.

har_cursrc_onept

Use this API to modify or add new one data point to harmonics current source table in the working case.

har_cursrc_purg

Use this API to purge specified harmonics current source table data from the working case.

har_cursrc_purg_onept

Use this API to purge specified data point in harmonics current source table.

har_facts

Use this API to modify or add new harmonics FACTS device data to the working case.

har_facts_chng

Use this API to modify harmonics FACTS device data in the working case.

har_facts_purg

Use this API to purge specified harmonics FACTS device data from the working case.

har_impchar

Use this API to modify or add new harmonics impedance characteristics table data to the working case.

har_impchar_chng

Use this API to change harmonics impedance characteristics table data in the working case.

har_impchar_chng_name

Use this API to change harmonics impedance characteristics table name in the working case.

har_impchar_chng_onept

Use this API to modify one data point to harmonics impedance characteristics table in the working case.

har_impchar_name

Use this API to add or change harmonics impedance characteristics table name in the working case.

har_impchar_onept

Use this API to modify or add new one data point to harmonics impedance characteristics table in the working case.

har_impchar_purg

Use this API to purge specified harmonics impedance characteristics table data from the working case.

har_impchar_purg_onept

Use this API to purge specified data point in harmonics impedance characteristics table.

har_indmc

Use this API to modify or add new harmonics induction machine data to the working case.

har_indmc_chng

Use this API to modify harmonics induction machine data to the working case.

har_indmc_purg

Use this API to purge specified harmonics induction machine data from the working case.

har_load

Use this API to modify or add new harmonics load data to the working case.

har_load_chng

Use this API to modify harmonics load data to the working case.

har_load_purg

Use this API to purge specified harmonics load data from the working case.

har_mach

Use this API to modify or add new harmonics machine data to the working case.

har_mach_chng

Use this API to modify harmonics machine data to the working case.

har_mach_purg

Use this API to purge specified harmonics machine data from the working case.

har_mtdc

Use this API to modify or add new harmonics Multi Terminal DC data to the working case.

har_mtdc_chng

Use this API to modify harmonics Multi Terminal DC data in the working case.

har_mtdc_purg

Use this API to purge specified harmonics Multi Terminal DC data from the working case.

har_passive_filter

Use this API to modify or add new harmonics passive filter data to the working case.

har_passive_filter_chng

Use this API to modify harmonics passive filter data in the working case.

har_passive_filter_purg

Use this API to purge specified harmonics passive filter data from the working case.

har_set_par_lodmdl_cigre_measurement

Use this API to set parameters for harmonics load data user model CIGRE_MEASUREMENT.

har_set_par_lodmdl_cigre_motive

Use this API to set parameters for harmonics load data user model CIGRE_MOTIVE.

har_set_par_lodmdl_cigre_passive

Use this API to set parameters for harmonics load data user model CIGRE_PASSIVE.

har_set_par_lodmdl_ieee_2rl_parallel

Use this API to set parameters for harmonics load data user model IEEE_2RL_PARALLEL.

har_set_par_lodmdl_ieee_im

Use this API to set parameters for harmonics load data user model IEEE_IM.

har_set_par_lodmdl_ieee_measurement

Use this API to set parameters for harmonics load data user model IEEE_MEASUREMENT.

har_set_par_lodmdl_ieee_skin

Use this API to set parameters for harmonics load data user model IEEE_SKIN.

har_set_par_lodmdl_large_async_motor

Use this API to set parameters for harmonics load data user model LARGE_ASYNC_MOTOR.

har_trn

Use this API to modify or add new harmonics transformer data to the working case.

har_trn_chng

Use this API to modify harmonics transformer data to the working case.

har_trn_purg

Use this API to purge specified harmonics transformer data from the working case.

har_vltsrc

Use this API to modify or add new harmonics voltage source table data to the working case.

har_vltsrc_chng

Use this API to change harmonics voltage source table data in the working case.

har_vltsrc_chng_name

Use this API to change harmonics voltage source table name in the working case.

har_vltsrc_chng_onept

Use this API to modify one data point to harmonics voltage source table in the working case.

har_vltsrc_name

Use this API to add or change harmonics voltage source table name in the working case.

har_vltsrc_onept

Use this API to modify or add new one data point to harmonics voltage source table in the working case.

har_vltsrc_purg

Use this API to purge specified harmonics voltage source table data from the working case.

har_vltsrc_purg_onept

Use this API to purge specified data point in harmonics voltage source table.

har_vscdc

Use this API to modify or add new harmonics VSCDC data to the working case.

har_vscdc_chng

Use this API to modify harmonics VSCDC data in the working case.

har_vscdc_purg

Use this API to purge specified harmonics VSCDC data from the working case.

Previous topic
psspy.har_set_resn_thresholds_default

Next topic
psspy.har_2tdc

Quick search
indexmodules |next |previous |Home | psspy »Harmonics Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Gic Operation
Gic Operation
Release
35.6.0

Date
July 12, 2023

gic

This API routine is obsolete.

gic_2

This API routine is obsolete.

gic_3

This API routine is obsolete.

gic_4

This API routine is obsolete.

gic_5

This API routine is obsolete.

gic_6

This API routine is obsolete.

gic_7

This API routine is obsolete.

gic_8

Use this API to calculate Geomagnetically Induced Currents (GIC) in electric power system network as a result of Geomagnetic Disturbance (GMD).

gic_branch_efield_nn

Use this API to calculate geoelectric efield induced in the network branches from specified geoelectric efield grid data using nearest neigbor (NN) alogorithm.

gic_earth1d_usr_purg

Use this API to purge GIC User 1D Earth Model data from the working case.

gic_efield_waveshape

For Transformer Thermal Impact assessement due to geomagnetic disturbance event, set the geoelectric field waveshape as provided in EFLDFILE.

gic_efield_waveshape_ref

For Transformer Thermal Impact assessement due to geomagnetic disturbance event, set the geoelectric field waveshape as NERC TPL-007-2 benhcmark event.

gic_efield_waveshape_supp

For Transformer Thermal Impact assessement due to geomagnetic disturbance event, set the geoelectric field waveshape as NERC TPL-007-2 supplemental event.

gic_mvarloss_scaling_factors

Specify KFACTORS to determine transformer reactive power losses due to geomagnetic currents (GICs) flow.

gic_new

Use this API to initialize all data records required for GIC analysis.

gic_pf_options

Use this API to specify the Newton-Raphson power flow solution options used in GIC.

gic_purg

Use this API to purge all GIC data from the working case.

gic_read

Use this API to read GIC Data Text (.gic) File into the working case memory.

gic_read_efield_grid

Use this API to read Geoelectric Efield Grid Data File into the working case memory.

gic_thermal_impact

This API routine is obsolete.

gic_thermal_impact_1

Use this API to calculate Transformer Thermal Impact assessement GIC(t) curve using specified effective Eastward GIC(E) and Nortward GIC(N) for one specific transformer.

gic_write

Use this API to write working case GIC Data to text (.gic) file.

gic_write_stn

Use this API to write working case GIC Data to text (.gic) file version 4 that has substation data.

Previous topic
psspy.har_vscdc_purg

Next topic
psspy.gic

Quick search
indexmodules |next |previous |Home | psspy »Gic Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Gic Data
Gic Data
Release
35.6.0

Date
July 12, 2023

gic_2tdc

Use this API to modify or add new two terminal dc GIC shunt data to the working case.

gic_2tdc_chng

Use this API to modify new two terminal dc GIC shunt data from the working case.

gic_2tdc_purg

Use this API to purge new two terminal dc GIC shunt data from the working case.

gic_brn

Use this API to modify or add new GIC branch data to the working case.

gic_brn_chng

Use this API to modify new GIC branch data from the working case.

gic_brn_purg

Use this API to purge GIC branch data from the working case.

gic_earth1d_usr

Use this API to modify or add new GIC User 1D Earth Model data to the working case.

gic_earth1d_usr_chng

Use this API to modify GIC User 1D Earth Model data from the working case.

gic_facts

Use this API to modify or add new FACTS device GIC shunt data to the working case.

gic_facts_chng

Use this API to modify new FACTS device GIC shunt data from the working case.

gic_facts_purg

Use this API to purge new FACTS device GIC shunt data from the working case.

gic_fxsh

Use this API to modify or add new fixed shunt GIC shunt data to the working case.

gic_fxsh_chng

Use this API to modify fixed shunt GIC shunt data from the working case.

gic_fxsh_purg

Use this API to purge fixed shunt GIC shunt data from the working case.

gic_load

Use this API to modify or add new load GIC shunt data to the working case.

gic_load_chng

Use this API to modify load GIC shunt data from the working case.

gic_load_purg

Use this API to purge load GIC shunt data from the working case.

gic_mtdc

Use this API to modify or add new multi terminal dc GIC shunt data to the working case.

gic_mtdc_chng

Use this API to modify new multi terminal dc GIC shunt data from the working case.

gic_mtdc_purg

Use this API to purge new multi terminal dc GIC shunt data from the working case.

gic_substn

Use this API to modify or add new GIC sub station data to the working case.

gic_substn_chng

Use this API to modify GIC sub station data to the working case.

gic_substn_purg

Use this API to purge GIC sub station data to the working case.

gic_swsh

Use this API to modify or add new GIC switched shunt data to the working case.

gic_swsh_chng

Use this API to modify GIC switched shunt data from the working case.

gic_swsh_purg

Use this API to purge GIC switched shunt data from the working case.

gic_trn

Use this API to modify or add new GIC transformer data to the working case.

gic_trn_chng

Use this API to modify GIC transformer data to the working case.

gic_trn_purg

Use this API to purge GIC transformer data from the working case.

gic_vscdc

Use this API to modify or add new vscdc GIC shunt data to the working case.

gic_vscdc_chng

Use this API to modify new vscdc GIC shunt data from the working case.

gic_vscdc_purg

Use this API to purge new vscdc GIC shunt data from the working case.

Previous topic
psspy.gic_write_stn

Next topic
psspy.gic_2tdc

Quick search
indexmodules |next |previous |Home | psspy »Gic Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Time Series Power Flow Operation
Time Series Power Flow Operation
Release
35.6.0

Date
July 12, 2023

imposeprofile

Use this API to impose generation/load at the given time point on profile curves.

tspf

Use this API to run the time series power flow solution.

tspf_output_pmatrix

Use this API to output the profile curves within one profile set in the matrix format.

tspf_output_pmatrix_2

Use this API to output the profile curves within one profile set in the matrix format.

Previous topic
psspy.gic_vscdc_purg

Next topic
psspy.imposeprofile

Quick search
indexmodules |next |previous |Home | psspy »Time Series Power Flow Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Time Series Power Flow Data
Time Series Power Flow Data
Release
35.6.0

Date
July 12, 2023

purge_tspf_channel

Use this API to delete all Time Series Power Flow profiles for an element.

purge_tspf_channel_all

Use this API to remover all time series power flow channels for a selected element.

purge_tspf_profile

Use this API to delete Time Series Power Flow profile by profile name.

purge_tspf_profilecurve

Use this API to delete Time Series Power Flow profile curve by curvesetid and curvecol and index.

purge_tspf_profilecurveset

Use this API to delete Time Series Power Flow profile curve set by profile curvesetid.

purge_tspf_profiledata

Use this API to delete Time Series Power Flow profile data by curvesetid and curvecol and index.

tspf_channel_chng

Use this API to select time series power flow Cchannels.

tspf_channel_data

Use this API to select time series power flow Cchannels.

tspf_profile_chng

Use this API routine to modify the data of an existing Time Series Power Flow profile.

tspf_profile_data

Use this API routine to modify the data of an existing Time Series Power Flow profile, or to add a new Time Series Power Flow profile.

tspf_profilecurveset_chng

Use this API routine to modify the data of an existing Time Series Power Flow profile curve set.

tspf_profilecurveset_data

Use this API routine to modify the data of an existing Time Series Power Flow profile curve set, or to add a new Time Series Power Flow profile curve set.

tspf_profiledata_chng

Use this API routine to modify the data of an existing Time Series Power Flow profile curve value.

tspf_profiledata_data

Use this API routine to modify the data of an existing Time Series Power Flow profile curve value, or to add a new Time Series Power Flow profile curve value.

Previous topic
psspy.tspf_output_pmatrix_2

Next topic
psspy.purge_tspf_channel

Quick search
indexmodules |next |previous |Home | psspy »Time Series Power Flow Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Dynamic Simulation Operation
Dynamic Simulation Operation
Release
35.6.0

Date
July 12, 2023

addmodellibrary

Use this API to add a library to the list to be searched for library models.

astr

Use this API to calculate and replicates the state variable system matrices in the form required by the Linear Dynamic Analysis Program, LSYSAN (activity ASTR).

aulist

Use this API to list auxiliary signal models that inject signals into dc lines or FACTS devices connected to subsystem buses, along with their storage locations in the dynamics data arrays.

change_channel_out_file

Use this API to modify the dynamic simulation channel output filename in dynamics working memory (see PSSE Program Operation Manual, activity ALTR).

change_chricn

Use this API to change the value of an element of the CHRICN array (a character ICON).

change_con

Use this API to change the value of an element of the CON array.

change_gref

Use this API to change the value of the element of the GREF (governor reference) array associated with a specified machine.

change_icon

Use this API to change the value of an element of the ICON array (an integer ICON).

change_state

Use this API to change the value of an element of the STATE array, as well as the values of the corresponding time derivative (DSTATE) and the associated memory cell used in the integration algorithm (STORE).

change_swsref

This API routine is obsolete.

change_swsref_2

Use this API to change the value of the element of the SWREF array associated with a specified switched shunt.

change_var

Use this API to change the value of an element of the VAR array.

change_vref

Use this API to change the value of the element of the VREF array associated with a specified machine.

crctrun

Use this API to run critical clearing time calculation in dynamic simulations.

dclist

Use this API to list dc line models connected to subsystem buses along with their storage locations in the dynamics data arrays.

dlst

Use this API to tabulate specified portions of one or more of the PSSE dynamics data storage arrays.

docu

Use this API to tabulate the data associated with equipment models referenced in the user’s simulation setup.

dropmodellibrary

Use this API to remove a library from the list being searched for library models.

dropmodelprogram

Use this API to remove a model from the list of known library models; library models are added to this list the first time that they are called.

dyda

Use this API to replicate dynamics model data in the form of a Dynamics Data Input file.

dynamics_solution_param_2

Use this API to modify the dynamic simulation solution parameters (except the channel output filename) in dynamics working memory (see PSSE Program Operation Manual, activity ALTR).

dynamics_solution_params

This API routine is obsolete.

dynamicsmode

Use this API to return PSSE to dynamics mode following the use of the POWERFLOWMODE API while in dynamics mode.

dynexportcsv

Use this API to export dynamics engine and dynamics model messages that are displayed after running a dynamics simulation to CSV file format.

dyre_add

Use this API to read a Dynamics Model Raw Data File and append the model references specified in its data records to the simulation data already contained in dynamics working memory (activity DYRE,ADD).

dyre_new

Use this API to clear dynamics working memory, read a Dynamics Data File, and place the model references specified on its data records into dynamics working memory.

erun

Use this API to calculate PSSE state-space dynamic simulations of excitation system response tests.

estr_open_circuit_test

Use this API to initialize a PSSE dynamic simulation for excitation system open circuit response simulations (i.e., in preparation for activity ERUN) and to specify the Channel Output File into which the output channel values are to be recorded during the simulation.

estr_response_ratio_test

Use this API to initialize a PSSE dynamic simulation for excitation system response ratio test simulations (i.e., in preparation for activity ERUN) and to specify the Channel Output File into which the output channel values are to be recorded during the simulation.

fclist

Use this API to list FACTS device models connected to subsystem buses along with their storage locations in the dynamics data arrays.

grun

Use this API to calculate PSSE state-space dynamic simulations of turbine-governor response tests.

gstr

Use this API to initialize a PSSE dynamic simulation for governor response simulations and to specify the Channel Output File into which the output channel values are to be recorded during the simulation.

increment_gref

Use this API to add a specified value to the value of the element of the GREF (governor reference) array associated with a specified machine.

increment_swsref

This API routine is obsolete.

increment_swsref_2

Use this API to add a specified value to the value of the element of the SWREF (switched shunt reference) array associated with a specified switched shunt.

increment_vref

Use this API to add a specified value to the value of the element of the VREF (voltage reference) array associated with a specified machine.

ldclist

Use this API to list load models connected to subsystem loads along with their storage locations in the dynamics data arrays.

ldlist

Use this API to list load models connected to subsystem loads along with their storage locations in the dynamics data arrays.

load_array_channel

Use this API to add an output channel containing the active or reactive component of a designated load.

mlst

Use this API to list plant models connected to subsystem machines along with their storage locations in the dynamics data arrays.

mrun

Use this API to calculate PSSE extended term dynamic simulations.

mstr

Use this API to initialize a PSSE dynamic simulation for extended term simulations and to specify the Channel Output File into which the output channel values are to be recorded during the dynamic simulation.

powerflowmode

Use this API to switch PSSE from dynamics mode to power flow mode.

psas

Use this API to convert a PSAS Command File into a PSSE Response File.

rllist

Use this API to list line relay models connected to subsystem buses along with their storage locations in the dynamics data arrays.

rstr

Use this API to read a dynamics Snapshot File into PSSE working memory.

run

Use this API to calculate PSSE state-space dynamic simulations.

rwdy

Use this API to replicate portions of dynamics model data in the form of either a breaker duty data file, unit inertia and governor data file, or PSSPLT relay characteristic data file.

set_chnfil_type

Use this API to set/Get the channel output file type (extended type or not).

set_disable_run

Use this API to enable or disable the simulation option setting that precludes dynamic simulation runs in the event there are fatal errors in the model data.

set_freq_relay_v_thresh

This API is used to set voltage threshold for use in frequency relay models.

set_genang

This API routine is obsolete.

set_genang_2

This API routine is obsolete.

set_genang_3

Use this API to enable or disable the simulation option setting that scans for generators for which the angle differs from the angular average by more than a specified threshold.

set_genang_subsys_flag

Use this API api for get/set the flag that is used for the subsystem defintion for performing scan for generators exceeding angle threshold.

set_genpwr

Use this API to enable or disable the simulation option setting that scans for generators for which the mechanical power differs from its electrical power by more than a specified threshold.

set_genspdev

Use this API to enable or disable the simulation option setting that scans for generators for which the speed deviation is more than a specified threshold.

set_genspdev_subsys_flag

Use this API api for get/set the flag that is used for the subsystem defintion for performing scans for generators for which the speed deviation is more than a specified threshold.

set_load_model_thresh

This API is used to set the MW, P over Q, and load bus voltage thresholds for load models.

set_model_debug_output_flag

Use this API to enable or disable the simulation option setting for dynamic model debug output.

set_netfrq

Use this API to enable or disable the simulation option setting that models the frequency dependence of network parameters.

set_next_channel

Use this API to assign the next available channel index value.

set_next_icon

Use this API to assign the next available ICON index value.

set_next_var

Use this API to assign the next available VAR index value.

set_osscan

Use this API to enable or disable the simulation option setting that scans for out-of-step conditions using a generic relay.

set_osscan_2

This API routine is obsolete.

set_osscan_subsys_flag

Use this API api for get/set the flag that is used for the subsystem defintion for performing scans for out-of-step conditions using a generic relay.

set_relang

Use this API to enable or disable the simulation option setting that expresses the ANGLE array relative to a designated reference angle.

set_relscn

Use this API to enable or disable the simulation option setting that scans branches using a generic branch relay.

set_relscn_subsys_flag

Use this API api for get/set the flag that is used for the subsystem defintion for performing scans of branches using a generic branch relay.

set_vltscn

Use this API to enable or disable the simulation option setting that scans buses for high or low values of voltage magnitude.

set_vltscn_subsys_flag

Use this API api for get/set the flag that is used for the subsystem definition for performing scans of buses for high or low voltage magnitudes.

set_volt_viol_subsys_flag

This API is used to set the flag to denote the bus subsystem to be used for voltage violation (voltage recovery and voltage dip) checks.

set_voltage_dip_check

This API is used to enable or disable the simulation option setting which scans buses for voltage dip (back-swing).

set_voltage_rec_check

This API is used to enable or disable the simulation option setting which scans buses for voltage recovery (primary and secondary recovery).

set_zsorce_reconcile_flag

Use this API to enable or disable the simulation option setting for automatic ZSORCE reconciliation.

size_ds

Use this API to obtain a summary of utilization in the general purpose dynamics data storage arrays as well as in the various model connection and allocation tables contained in dynamics working memory.

snap

Use this API to save PSSE dynamics working memory into a Snapshot file.

strt

This API routine is obsolete.

strt_2

This API routine is the second release of the dynamic simulation initialization function.

swslist

Use this API to list switched shunt models connected to subsystem buses along with their storage locations in the dynamics data arrays.

trig_volt_violation_check

This API is used to trigger voltage violation (voltage recovery, voltage dip) checks.

wnlist

Use this API to list wind models connected to subsystem buses along with their storage locations in the dynamics data arrays.

Previous topic
psspy.tspf_profiledata_data

Next topic
psspy.addmodellibrary

Quick search
indexmodules |next |previous |Home | psspy »Dynamic Simulation Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Dynamic Simulation Output Channel Operation
Dynamic Simulation Output Channel Operation
Release
35.6.0

Date
July 12, 2023

change_channel

Use this API to change the channel address and the channel identifier of a specified output channel.

chsb

Use this API to specify, on a subsystem basis, the simulation variables to monitor during dynamic simulation runs (activity CHSB).

crt_plot_channel

Use this API to assign one of the main simulation output channels to a designated CRT plot channel.

delete_all_plot_channels

Use this API to delete all the plot channels in the working case.

dmpc

Use this API to replicate the output channel specifications from dynamics working memory in the form of a response file suitable for transferring them to another snapshot that models essentially the same system.

list_channel_models

Use this API to tabulate the output channel monitoring models referenced in the dynamic model.

remove_unused_chan_models

Use this API to delete from the output channel monitoring model table those model references indicating equipment that is not present in the power flow working case.

Previous topic
psspy.wnlist

Next topic
psspy.change_channel

Quick search
indexmodules |next |previous |Home | psspy »Dynamic Simulation Output Channel Operation
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Assign Machine Quantities To Output Channels
Assign Machine Quantities To Output Channels
Release
35.6.0

Date
July 12, 2023

machine_app_r_x_channel

Use this API to add a pair of output channels containing the apparent impedance of the system, as seen from the terminals of a specified machine, along with a corresponding call to the GENTMZ monitoring model.

machine_array_channel

Use this API to add an output channel containing a plant related model variable of a designated type for a specified machine.

machine_iterm_channel

Use this API to add an output channel containing the terminal current of a specified machine, along with a corresponding call to the GENTMC monitoring model.

Previous topic
psspy.remove_unused_chan_models

Next topic
psspy.machine_app_r_x_channel

Quick search
indexmodules |next |previous |Home | psspy »Assign Machine Quantities To Output Channels
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Assign Branch Quantities To Output Channels
Assign Branch Quantities To Output Channels
Release
35.6.0

Date
July 12, 2023

branch_app_r_x_channel

Use this API to add a pair of output channels containing the apparent impedance, as seen at the from bus of a specified branch, along with a corresponding call to the RELAY2 monitoring model.

branch_mva_channel

Use this API to add an output channel containing the MVA flow at the from bus of a specified branch, along with a corresponding call to the FLOW1 monitoring model.

branch_p_and_q_channel

Use this API to add a pair of output channels containing the active and reactive power flow at the from bus of a specified branch, along with a corresponding call to the FLOW1 monitoring model.

branch_p_channel

Use this API to add an output channel containing the active power flow at the from bus of a specified branch, along with a corresponding call to the FLOW1 monitoring model.

three_wnd_app_r_x_channel

Use this API to add a pair of output channels containing the apparent impedance as seen at the from bus of a specified three-winding transformer, along with a corresponding call to the RELAY3 monitoring model.

three_wnd_mva_channel

Use this API to add an output channel containing the MVA flow at the from bus of a specified three-winding transformer, along with a corresponding call to the FLOW3 monitoring model.

three_wnd_p_and_q_channel

Use this API to add a pair of output channels containing the active and reactive power flow at the from bus of a specified three-winding transformer, along with a corresponding call to the FLOW3 monitoring model.

three_wnd_p_channel

Use this API to add an output channel containing the active power flow at the from bus of a specified three-winding transformer, along with a corresponding call to the FLOW3 monitoring model.

Previous topic
psspy.machine_iterm_channel

Next topic
psspy.branch_app_r_x_channel

Quick search
indexmodules |next |previous |Home | psspy »Assign Branch Quantities To Output Channels
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Assign Other Quantities To Output Channels
Assign Other Quantities To Output Channels
Release
35.6.0

Date
July 12, 2023

bus_frequency_channel

Use this API to add an output channel containing the per unit frequency deviation at a specified bus.

state_channel

Use this API to add an output channel containing the value of a specified STATE.

var_channel

Use this API to add an output channel containing the value of a specified VAR.

voltage_and_angle_channel

Use this API to add a pair of output channels containing the voltage magnitude in per unit and phase angle in degrees of a specified bus, along with a corresponding call to the VOLMAG monitoring model.

voltage_channel

Use this API to add an output channel containing the voltage magnitude in per unit of a specified bus, along with a corresponding call to the VOLMAG monitoring model.

Previous topic
psspy.three_wnd_p_channel

Next topic
psspy.bus_frequency_channel

Quick search
indexmodules |next |previous |Home | psspy »Assign Other Quantities To Output Channels
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Plant Related Models
Plant Related Models
Release
35.6.0

Date
July 12, 2023

add_plant_model

Use this API to add a plant related model of a designated type to a specified machine.

change_plmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of a designated plant related model at a specified machine.

change_plmod_con

Use this API to change the value of a CON of a designated plant related model at a specified machine.

change_plmod_data

This API routine is obsolete.

change_plmod_icon

Use this API to change the value of an integer ICON of a designated plant related model at a specified machine.

change_plmod_var

Use this API to change the value of a VAR of a designated plant related model at a specified machine.

gmb_add_plant_model

Use this API to add a plant related GMB model to a specified machine.

plmod_consistency

Use this API to check consistency among the plant related models referenced at each machine.

plmod_pack

Use this API to remove entries that are marked as unused from the plant model connection tables and the plant model array allocation tables.

plmod_remove

Use this API to remove a plant related model of a designated type from a specified machine.

plmod_status

Use this API to change the status of a plant related model of a designated type at a specified machine.

plmod_unconnected

Use this API to list or remove from dynamics working memory those plant related models that are assigned to machines that are not present in the current power flow working case (unconnected).

plmod_user

Use this API to list user-written plant model definitions or to remove user-written plant model definitions that are not assigned to any machines (unused) from the user model definition tables.

Previous topic
psspy.voltage_channel

Next topic
psspy.add_plant_model

Quick search
indexmodules |next |previous |Home | psspy »Plant Related Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Wind Related Models
Wind Related Models
Release
35.6.0

Date
July 12, 2023

add_wind_model

Use this API to add a renewable related model of a designated type to a specified renewable machine.

change_wnmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of a designated renewable related model at a specified renewable machine.

change_wnmod_con

Use this API to change the value of a CON of a designated renewable machine related model at a specified renewable machine.

change_wnmod_icon

Use this API to change the value of an integer ICON of a designated renewable machine related model at a specified renewable machine.

change_wnmod_var

Use this API to change the value of a VAR of a designated renewable machine related model at a specified renewable machine.

wnmod_consistency

Use this API to check consistency among the renewable machine related models referenced at each machine.

wnmod_pack

Use this API to remove entries that are marked as unused from the wind model connection tables and the renewable machine model array allocation tables.

wnmod_remove

Use this API to remove a renewable machine related model of a designated type from a specified renewable machine.

wnmod_status

Use this API to change the status of a renewable machine related model of a designated type at a specified renewable machine.

wnmod_unconnected

Use this API to list or remove from dynamics working memory those renewable machine related models that are assigned to renewable machines that are not present in the current power flow working case (unconnected).

wnmod_user

Use this API to list user-written renewable machine model definitions or to remove user-written renewable machine model definitions that are not assigned to any renewable machines (unused) from the user model definition tables.

Previous topic
psspy.plmod_user

Next topic
psspy.add_wind_model

Quick search
indexmodules |next |previous |Home | psspy »Wind Related Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Load Related Models
Load Related Models
Release
35.6.0

Date
July 12, 2023

add_load_model

Use this API to add a load related model of a designated type to a specified load or subsystem.

change_ldmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of a load related model at a specified load or subsystem.

change_ldmod_con

Use this API to change the value of a CON of a load related model at a specified load or subsystem.

change_ldmod_data

This API routine is obsolete.

change_ldmod_icon

Use this API to change the value of an integer ICON of a load related model at a specified load or subsystem.

change_ldmod_var

Use this API to change the value of a VAR of a load related model at a specified load or subsystem.

ldmod_pack

Use this API to remove entries that are marked as unused from the load model connection tables and the load model array allocation tables.

ldmod_remove

Use this API to remove a load related model of a designated type from a specified load or subsystem.

ldmod_status

Use this API to change the status of a load related model of a designated type for all subsystem loads at which it is applied.

ldmod_status2

Use this API to change the status of a load related model of a designated type at a specified load.

ldmod_unconnected

Use this API to list or remove from dynamics working memory those load related models that are assigned to loads that are not present in the current power flow working case (unconnected).

ldmod_user

Use this API to list user-written load model definitions or to remove user-written load model definitions that are not assigned to any loads (unused) from the user model definition tables.

ldmodc_pack

Use this API to remove entries that are marked as unused from the load component model connection tables.

ldmodc_remove

Use this API to remove a load component related model of a designated type from a specified load or subsystem.

ldmodc_status

Use this API to change the status of a load related model of a designated type for all subsystem loads at which it is applied.

ldmodc_unconnected

Use this API to list or remove from dynamics working memory those load Component models that are assigned to loads that are not present in the current power flow working case (unconnected).

ldmodc_user

Use this API to list user-written load component model definitions or to remove user-written load model definitions that are not assigned to any loads (unused) from the user model definition tables.

Previous topic
psspy.wnmod_user

Next topic
psspy.add_load_model

Quick search
indexmodules |next |previous |Home | psspy »Load Related Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Load Component Models
Load Component Models
Release
35.6.0

Date
July 12, 2023

add_loadc_model

Use this API to add a load component model of a designated type to a specified load or subsystem.

change_ldmodc_cdesc

Use this API to change the value of a Model Description of a load component model at a specified load or subsystem).

change_ldmodc_chricn

Use this API to change the value of a CHRICN of a load component model at a specified load or subsystem).

change_ldmodc_con

Use this API to change the value of a CON of a load component model at a specified load or subsystem.

change_ldmodc_icon

Use this API to change the value of a ICON of a load component model at a specified load or subsystem.

change_ldmodc_var

Use this API to change the value of a VAR of a load component model at a specified load or subsystem.

Previous topic
psspy.ldmodc_user

Next topic
psspy.add_loadc_model

Quick search
indexmodules |next |previous |Home | psspy »Load Component Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Line Relay Models
Line Relay Models
Release
35.6.0

Date
July 12, 2023

add_relay_model

Use this API to add a line relay model in the designated relay slot of the from bus end of a specified branch.

change_rlmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the line relay model in the designated relay slot of the from bus end of a specified branch.

change_rlmod_con

Use this API to change the value of a CON of the line relay model in the designated relay slot of the from bus end of a specified branch.

change_rlmod_data

This API routine is obsolete.

change_rlmod_icon

Use this API to change the value of an integer ICON of the line relay model in the designated relay slot of the from bus end of a specified branch.

change_rlmod_var

Use this API to change the value of a VAR of the line relay model in the designated relay slot of the from bus end of a specified branch.

rlmod_pack

Use this API to remove entries that are marked as unused from the line relay model connection tables and the line relay model array allocation tables.

rlmod_remove

Use this API to remove the line relay model in the designated relay slot of the from bus end of a specified branch.

rlmod_status

Use this API to change the status of the line relay model in the designated relay slot of the from bus end of a specified branch.

rlmod_unconnected

Use this API to list or remove from dynamics working memory those line relay models that are assigned to branches that are not present in the current power flow working case (unconnected).

rlmod_user

Use this API to list user-written line relay model definitions or to remove user-written line relay model definitions that are not assigned to any branches (unused) from the user model definition tables.

Previous topic
psspy.change_ldmodc_var

Next topic
psspy.add_relay_model

Quick search
indexmodules |next |previous |Home | psspy »Line Relay Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Dc Line Related Models
Dc Line Related Models
Release
35.6.0

Date
July 12, 2023

add_mtdcline_model

Use this API to add a multi-terminal dc line model to the specified multi-terminal dc line.

add_ttdcline_model

Use this API to add a two-terminal dc line model to the specified two-terminal dc line.

add_vsdcline_model

Use this API to add a VSC dc line model to the specified VSC dc line.

change_mtdclmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the multi-terminal dc line model of a specified multi-terminal dc line.

change_mtdclmod_con

Use this API to change the value of a CON of the multi-terminal dc line model of a specified multi-terminal dc line.

change_mtdclmod_data

This API routine is obsolete.

change_mtdclmod_icon

Use this API to change the value of an integer ICON of the multi-terminal dc line model of a specified multi-terminal dc line.

change_mtdclmod_var

Use this API to change the value of a VAR of the multi-terminal dc line model of a specified multi-terminal dc line.

change_ttdclmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the two-terminal dc line model of a specified two-terminal dc line.

change_ttdclmod_con

Use this API to change the value of a CON of the two-terminal dc line model of a specified two- terminal dc line.

change_ttdclmod_data

This API routine is obsolete.

change_ttdclmod_icon

Use this API to change the value of an integer ICON of the two-terminal dc line model of a specified two-terminal dc line.

change_ttdclmod_var

Use this API to change the value of a VAR of the two-terminal dc line model of a specified two- terminal dc line.

change_vsdclmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the VSC dc line model of a specified VSC dc line.

change_vsdclmod_con

Use this API to change the value of a CON of the VSC dc line model of a specified VSC dc line.

change_vsdclmod_data

This API routine is obsolete.

change_vsdclmod_icon

Use this API to change the value of an integer ICON of the VSC dc line model of a specified VSC dc line.

change_vsdclmod_var

Use this API to change the value of a VAR of the VSC dc line model of a specified VSC dc line.

dclmod_pack

Use this API to remove entries that are marked as unused from the dc line model connection tables and the dc line array allocation tables.

dclmod_unconnected

Use this API to list or remove from dynamics working memory those dc line models that are assigned to dc lines that are not present in the current power flow working case (unconnected).

dclmod_user

Use this API to list user-written dc line model definitions or to remove user-written dc line model definitions that are not assigned to any dc lines (unused) from the user model definition tables.

mtdclmod_remove

Use this API to remove the multi-terminal dc line model from a specified multi-terminal dc line.

mtdclmod_status

Use this API to change the status of the multi-terminal dc line model at a specified multi- terminal dc line.

ttdclmod_remove

Use this API to remove the two-terminal dc line model from a specified two-terminal dc line.

ttdclmod_status

Use this API to change the status of the two-terminal dc line model at a specified two-terminal end line.

vsdclmod_remove

Use this API to remove the VSC dc line model from a specified VSC dc line.

vsdclmod_status

Use this API to change the status of the VSC dc line model at a specified VSC dc line.

Previous topic
psspy.rlmod_user

Next topic
psspy.add_mtdcline_model

Quick search
indexmodules |next |previous |Home | psspy »Dc Line Related Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Facts Device Models
Facts Device Models
Release
35.6.0

Date
July 12, 2023

add_facts_device_model

Use this API to add a FACTS device model to the specified FACTS device.

change_fctmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the FACTS device model of a specified FACTS device.

change_fctmod_con

Use this API to change the value of a CON of the FACTS device model of a specified FACTS device.

change_fctmod_data

This API routine is obsolete.

change_fctmod_icon

Use this API to change the value of an integer ICON of the FACTS device model of a specified FACTS device.

change_fctmod_var

Use this API to change the value of a VAR of the FACTS device model of a specified FACTS device.

fctmod_pack

Use this API to remove entries that are marked as unused from the FACTS device model connection tables and the FACTS device model array allocation tables.

fctmod_remove

Use this API to remove the FACTS device model from a specified FACTS device.

fctmod_status

Use this API to change the status of the FACTS device model at a specified FACTS device.

fctmod_unconnected

Use this API to list or remove from dynamics working memory those FACTS device models that are assigned to FACTS device that are not present in the current power flow working case (unconnected).

fctmod_user

Use this API to list user-written FACTS device model definitions or to remove user-written FACTS device model definitions that are not assigned to any FACTS devices (unused) from the user model definition tables.

gmb_add_facts_dev_model

Use this API to add a GMB FACTS device model to the specified FACTS device.

Previous topic
psspy.vsdclmod_status

Next topic
psspy.add_facts_device_model

Quick search
indexmodules |next |previous |Home | psspy »Facts Device Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Switched Shunt Models
Switched Shunt Models
Release
35.6.0

Date
July 12, 2023

add_swshunt_model

This API routine is obsolete.

add_swshunt_model_2

Use this API to add a switched shunt model to the specified switched shunt device.

change_swsmod_chricn

This API routine is obsolete.

change_swsmod_chricn_2

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the switched shunt model of a specified switched shunt device.

change_swsmod_con

This API routine is obsolete.

change_swsmod_con_2

Use this API to change the value of a CON of the switched shunt model of a specified switched shunt device.

change_swsmod_icon

This API routine is obsolete.

change_swsmod_icon_2

Use this API to change the value of an integer ICON (i.e., an element of the ICON array) of the switched shunt model of a specified switched shunt device.

change_swsmod_var

This API routine is obsolete.

change_swsmod_var_2

Use this API to change the value of a VAR of the switched shunt model of a specified switched shunt device.

gmb_add_swshunt_model

This API routine is obsolete.

gmb_add_swshunt_model_2

Use this API to add a GMB switched shunt model to the specified switched shunt device.

swsmod_pack

Use this API to remove entries that are marked as unused from the switched shunt model connection tables and the switched shunt model array allocation tables.

swsmod_remove

This API routine is obsolete.

swsmod_remove_2

Use this API to remove the switched shunt model from a specified switched shunt.

swsmod_status

This API routine is obsolete.

swsmod_status_2

Use this API to change the status of the switched shunt model at a specified switched shunt device.

swsmod_unconnected

Use this API to list or remove from dynamics working memory those switched shunt models that are assigned to switched shunt that are not present in the current power flow working case (unconnected).

swsmod_user

Use this API to list user-written switched shunt model definitions or to remove user-written switched shunt model definitions that are not assigned to any switched shunt devices (unused) from the user model definition tables.

Previous topic
psspy.gmb_add_facts_dev_model

Next topic
psspy.add_swshunt_model

Quick search
indexmodules |next |previous |Home | psspy »Switched Shunt Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Auxiliary Signal Models
Auxiliary Signal Models
Release
35.6.0

Date
July 12, 2023

add_fctsauxsignal_model

Use this API to add a FACTS device auxiliary signal model at the specified injection point of the designated FACTS device.

add_mtdcauxsignal_model

Use this API to add a multi-terminal dc line auxiliary signal model at the specified auxiliary signal index of the designated multi-terminal dc line.

add_ttdcauxsignal_model

Use this API to add a two-terminal dc line auxiliary signal model at the specified injection point of the designated two-terminal dc line.

add_vsdcauxsignal_model

Use this API to add a VSC dc line auxiliary signal model at the specified injection point of the designated VSC dc line.

auxmod_pack

Use this API to remove entries that are marked as unused from the auxiliary signal model connection tables and the auxiliary signal array allocation tables.

auxmod_unconnected

Use this API to list or remove from dynamics working memory those auxiliary signal models that are assigned to dc lines or FACTS devices that are not present in the current power flow working case (unconnected).

auxmod_user

Use this API to list user-written auxiliary signal model definitions or to remove user-written auxiliary signal model definitions that are not assigned to any dc lines or FACTS devices (unused) from the user model definition tables.

change_fctsauxmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of an auxiliary signal model of a specified FACTS device.

change_fctsauxmod_con

Use this API to change the value of a CON of an auxiliary signal model of a specified FACTS device.

change_fctsauxmod_data

This API routine is obsolete.

change_fctsauxmod_icon

Use this API to change the value of an integer ICON of an auxiliary signal model of a specified FACTS device.

change_fctsauxmod_var

Use this API to change the value of a VAR of an auxiliary signal model of a specified FACTS device.

change_mtdcauxmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of an auxiliary signal model of a specified multi-terminal dc line.

change_mtdcauxmod_con

Use this API to change the value of a CON of an auxiliary signal model of a specified multi- terminal dc line.

change_mtdcauxmod_data

This API routine is obsolete.

change_mtdcauxmod_icon

Use this API to change the value of an integer ICON of an auxiliary signal model of a specified multi-terminal dc line.

change_mtdcauxmod_var

Use this API to change the value of a VAR of an auxiliary signal model of a specified multi- terminal dc line.

change_ttdcauxmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of an auxiliary signal model of a specified two-terminal dc line.

change_ttdcauxmod_con

Use this API to change the value of a CON of an auxiliary signal model of a specified two- terminal dc line.

change_ttdcauxmod_data

This API routine is obsolete.

change_ttdcauxmod_icon

Use this API to change the value of an integer ICON of an auxiliary signal model of a specified two-terminal dc line.

change_ttdcauxmod_var

Use this API to change the value of a VAR of an auxiliary signal model of a specified two- terminal dc line.

change_vsdcauxmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of an auxiliary signal model of a specified VSC dc line.

change_vsdcauxmod_con

Use this API to change the value of a CON of an auxiliary signal model of a specified VSC dc line.

change_vsdcauxmod_data

This API routine is obsolete.

change_vsdcauxmod_icon

Use this API to change the value of an integer ICON of an auxiliary signal model of a specified VSC dc line.

change_vsdcauxmod_var

Use this API to change the value of a VAR of an auxiliary signal model of a specified VSC dc line.

fctsauxmod_remove

Use this API to remove an auxiliary signal model from the specified injection point of a designated FACTS device.

fctsauxmod_status

Use this API to change the status of the auxiliary signal model at the specified injection point of a designated FACTS device.

mtdcauxmod_remove

Use this API to remove an auxiliary signal model from the specified auxiliary signal index of the designated multi-terminal dc line.

mtdcauxmod_status

Use this API to change the status of the auxiliary signal model at the specified auxiliary signal index of the designated multi-terminal dc line.

ttdcauxmod_remove

Use this API to remove an auxiliary signal model from the specified injection point of the designated two-terminal dc line.

ttdcauxmod_status

Use this API to change the status of the auxiliary signal model at the specified injection point of the designated two-terminal dc line.

vsdcauxmod_remove

Use this API to remove an auxiliary signal model from the specified injection point of the designated VSC dc line.

vsdcauxmod_status

Use this API to change the status of the auxiliary signal model at the specified injection point of the designated VSC dc line.

Previous topic
psspy.swsmod_user

Next topic
psspy.add_fctsauxsignal_model

Quick search
indexmodules |next |previous |Home | psspy »Auxiliary Signal Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Induction Machine Models
Induction Machine Models
Release
35.6.0

Date
July 12, 2023

add_indmac_model

Use this API to add an induction machine model to a specified machine.

change_immod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of an induction machine model at a specified machine.

change_immod_con

Use this API to change the value of a CON of a designated induction machine model at a specified machine.

change_immod_icon

Use this API to change the value of an integer ICON of a designated induction machine model at a specified machine.

change_immod_var

Use this API to change the value of a VAR of a designated induction machine model at a specified machine.

immod_pack

Use this API to remove entries that are marked as unused from the induction machine model contables.

immod_remove

Use this API to remove an induction machine model of a designated type from a specified machine.

immod_status

Use this API to change the status of an induction machine model at a specified machine.

immod_unconnected

Use this API to list or remove from dynamics working memory those induction machine models that are assigned to machines that are not present in the current power flow working case (unconnected).

immod_user

Use this API to list user-written induction machine model definitions or to remove user-written induction machine model definitions that are not assigned to any machines (unused) from the user model definition tables.

Previous topic
psspy.vsdcauxmod_status

Next topic
psspy.add_indmac_model

Quick search
indexmodules |next |previous |Home | psspy »Induction Machine Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Cct Models
Cct Models
Release
35.6.0

Date
July 12, 2023

add_cct2dco_model

Use this API to add an “other” type model attached to a 2-terminal dc line.

add_cct2wtd_model

Use this API to add a 2-winding transformer device model to the specified 2-winding transformer.

add_cct3wtd_model

Use this API to add a 3-winding transformer device model to the specified 3-winding transformer.

add_cctbrnd_model

Use this API to add a branch device model to the specified branch.

add_cctbrno_model

Use this API to add a branch “other” model to the specified branch.

add_cctbuso_model

Use this API to add an “other” type model attached to a bus.

add_cctmcno_model

Use this API to add a machine other model to the specified machine.

add_cctmcnp_model

Use this API to add a machine protection model to the specified machine.

add_cctmsco_model

Use this API to add a miscellaneous “other” type model with the specified model instance.

add_cctswso_model

This API routine is obsolete.

add_cctswso_model_2

Use this API to add a switched shunt “other” model to the specified bus.

cct2dco_list

Use this API to list “other” type models attached to 2-terminal dc lines.

cct2dcomod_remove

Use this API to remove an “other” type model attached to a 2-terminal dc line.

cct2dcomod_status

Use this API to change status of an “other” type model attached to a 2-terminal dc line.

cct2wtd_list

Use this API to list “other” type models attached to 2-winding transformers.

cct2wtdmod_remove

Use this API to remove a 2-winding transformer device model attached to the specified 2-winding transformer.

cct2wtdmod_status

Use this API to change the status of a 2-winding transformer device model attached to the specified 2-winding transformer.

cct3wtd_list

Use this API to list “other” type models attached to 3-winding transformers.

cct3wtdmod_remove

Use this API to remove a 3-winding transformer device model attached to the specified 3-winding transformer.

cct3wtdmod_status

Use this API to change the status of a 3-winding transformer device model attached to the specified 3-winding transformer.

cctbrnd_list

Use this API to list device type models attached to branches.

cctbrndmod_remove

Use this API to remove a branch device model attached to the specified branch.

cctbrndmod_status

Use this API to change the status of a branch device model attached to the specified branch.

cctbrno_list

Use this API to list “other” type models attached to branches.

cctbrnomod_remove

Use this API to remove a branch “other” model attached to the specified branch.

cctbrnomod_status

Use this API to change the status of a branch “other” model attached to the specified branch.

cctbuso_list

Use this API to list “other” type models attached to buses.

cctbusomod_remove

Use this API to remove an “other” type model attached to a bus.

cctbusomod_status

Use this API to change status of an “other” type model attached to a bus.

cctmcno_list

Use this API to list “other” type models attached to machines.

cctmcnomod_remove

Use this API to remove a machine “other” model attached to the specified machine.

cctmcnomod_status

Use this API to change status of a machine “other” model attached to the specified machine.

cctmcnp_list

Use this API to list protection models attached to machines.

cctmcnpmod_remove

Use this API to remove a machine protection model attached to the specified machine.

cctmcnpmod_status

Use this API to change status of a machine protection model attached to the specified machine.

cctmod_pack

Use this API to pack CCT model definition tables.

cctmod_user

Use this API to list or remove user-written CCT model definitions.

cctmsco_list

Use this API to list miscellaneous “other” type models.

cctmscomod_remove

Use this API to remove a miscellaneous “other” type model with the specified model instance.

cctmscomod_status

Use this API to change status of a miscellaneous “other” type model with the specified model instance.

cctswso_list

Use this API to list “other” type models attached to switched shunts.

cctswsomod_remove

This API routine is obsolete.

cctswsomod_remove_2

Use this API to remove an “other” type model attached to a switched shunt.

cctswsomod_status

This API routine is obsolete.

cctswsomod_status_2

Use this API to change status of an “other” type model attached to a switched shunt.

change_cct2dcomod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the “other” type model attached to a specified 2-terminal dc line.

change_cct2dcomod_con

Use this API to change the value of a real constant (CON) of the “other” type model attached to a specified 2-terminal dc line.

change_cct2dcomod_icon

Use this API to change the value of an integer ICON of the “other” type model attached to a specified 2-terminal dc line.

change_cct2dcomod_var

Use this API to change the value of VAR of the “other” type model attached to a specified 2-terminal dc line.

change_cct2wtdmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the 2-winding transformer device model of a specified branch.

change_cct2wtdmod_con

Use this API to change the value of a real constant (CON) of the 2-winding transformer device model of a specified branch.

change_cct2wtdmod_icon

Use this API to change the value of an integer ICON of the 2-winding transformer device model of a specified branch.

change_cct2wtdmod_var

Use this API to change the value of VAR of the 2-winding transformer device model of a specified branch.

change_cct3wtdmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the 3-winding transformer device model of a specified branch.

change_cct3wtdmod_con

Use this API to change the value of a real constant (CON) of the 3-winding transformer device model of a specified branch.

change_cct3wtdmod_icon

Use this API to change the value of an integer ICON of the 3-winding transformer device model of a specified branch.

change_cct3wtdmod_var

Use this API to change the value of VAR of the 3-winding transformer device model of a specified branch.

change_cctbrndmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the branch device model of a specified branch.

change_cctbrndmod_con

Use this API to change the value of a real constant (CON) of the branch device model of a specified branch.

change_cctbrndmod_icon

Use this API to change the value of an integer ICON of the branch device model of a specified branch.

change_cctbrndmod_var

Use this API to change the value of VAR of the branch device model of a specified branch.

change_cctbrnomod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the branch “other” model of a specified branch.

change_cctbrnomod_con

Use this API to change the value of a real constant (CON) of the branch “other” model of a specified branch.

change_cctbrnomod_icon

Use this API to change the value of an integer ICON of the branch “other” model of a specified branch.

change_cctbrnomod_var

Use this API to change the value of VAR of the branch “other” model of a specified branch.

change_cctbusomod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the “other” type model attached to a specified bus.

change_cctbusomod_con

Use this API to change the value of a real constant (CON) of the “other” type model attached to a specified bus.

change_cctbusomod_icon

Use this API to change the value of an integer ICON of the “other” type model attached to a specified bus.

change_cctbusomod_var

Use this API to change the value of VAR of the “other” type model attached to a specified bus.

change_cctmcnomod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the machine “other” model for a specified machine.

change_cctmcnomod_con

Use this API to change the value of a real constant (CON) of the machine “other” model for a specified machine.

change_cctmcnomod_icon

Use this API to change the value of an integer ICON of the machine “other” model for a specified machine.

change_cctmcnomod_var

Use this API to change the value of VAR of the machine “other” model for a specified machine.

change_cctmcnpmod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the machine protection model of a specified machine.

change_cctmcnpmod_con

Use this API to change the value of a real constant (CON) of the machine protection model of a specified machine.

change_cctmcnpmod_icon

Use this API to change the value of an integer ICON of the machine protection model of a specified machine.

change_cctmcnpmod_var

Use this API to change the value of VAR of the machine protection model of a specified machine.

change_cctmscomod_chricn

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the miscellaneous “other” type model with the specified model instance.

change_cctmscomod_con

Use this API to change the value of a real constant (CON) of the miscellaneous “other” type model with the specified model instance.

change_cctmscomod_icon

Use this API to change the value of an integer ICON of the miscellaneous “other” type model with the specified model instance.

change_cctmscomod_var

Use this API to change the value of VAR of the miscellaneous “other” type model with the specified model instance.

change_cctswsomod_chricn

This API routine is obsolete.

change_cctswsomod_chricn_2

Use this API to change the value of a character ICON (i.e., an element of the CHRICN array) of the “other” type model attached to a specified switched shunt.

change_cctswsomod_con

This API routine is obsolete.

change_cctswsomod_con_2

Use this API to change the value of a real constant (CON) of the “other” type model attached to a specified switched shunt.

change_cctswsomod_icon

This API routine is obsolete.

change_cctswsomod_icon_2

Use this API to change the value of an integer ICON of the “other” type model attached to a specified switched shunt.

change_cctswsomod_var

This API routine is obsolete.

change_cctswsomod_var_2

Use this API to change the value of VAR of the “other” type model attached to a specified switched shunt.

Previous topic
psspy.immod_user

Next topic
psspy.add_cct2dco_model

Quick search
indexmodules |next |previous |Home | psspy »Cct Models
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Set Disturbance
Set Disturbance
Release
35.6.0

Date
July 12, 2023

dist_3phase_bus_fault

Use this API to apply a three phase fault at a bus during dynamic simulations.

dist_3wind_close

Use this API to set a three-winding transformer to in-service during dynamic simulations.

dist_3wind_fault

Use this API to apply a fault at the IBUS end of a three-winding transformer during dynamic simulations.

dist_3wind_trip

Use this API to set a three-winding transformer to out-of-service during dynamic simulations.

dist_branch_close

Use this API to set a non-transformer branch or a two-winding transformer to in-service during dynamic simulations.

dist_branch_fault

Use this API to apply a fault at the IBUS end of a non-transformer branch or a two-winding transformer during dynamic simulations.

dist_branch_trip

Use this API to set a non-transformer branch or a two-winding transformer to out-of-service during dynamic simulations.

dist_bus_fault

This API routine is obsolete.

dist_bus_fault_2

This API routine is obsolete.

dist_bus_fault_3

Use this API to apply an unbalanced fault at a bus during dynamic simulations.

dist_bus_trip

Use this API to disconnect a bus during dynamic simulations.

dist_clear_fault

Use this API to clear a fault during dynamic simulations.

dist_machine_trip

Use this API to set a machine to out-of-service during dynamic simulations.

dist_scmu_fault

This API routine is obsolete.

dist_scmu_fault_2

This API routine is obsolete.

dist_scmu_fault_3

Use this API to calculate an unbalanced fault and apply the equivalent positive sequence fault admittance at a bus during dynamic simulations.

dist_spcb_fault

This API routine is obsolete.

dist_spcb_fault_2

Use this API routine to run the second release of the dynamics branch unbalance function.

Previous topic
psspy.change_cctswsomod_var_2

Next topic
psspy.dist_3phase_bus_fault

Quick search
indexmodules |next |previous |Home | psspy »Set Disturbance
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Set Disturbance Definition
Set Disturbance Definition
Release
35.6.0

Date
July 12, 2023

dist_def_3phase_bus_fault

Use this API to define a three phase fault at a bus in dynamic simulations.

dist_def_3wind_fault

Use this API to define a fault at the IBUS end of a three-winding transformer in dynamic simulations.

dist_def_branch_fault

Use this API to define a fault at the IBUS end of a non-transformer branch or a two-winding transformer in dynamic simulations.

dist_def_scmu_fault_3

Use this API to define an unbalanced fault at a bus in dynamic simulations.

dist_def_spcb_fault_2

Use this API routine to define a branch unbalance in dynamic simulations.

Previous topic
psspy.dist_spcb_fault_2

Next topic
psspy.dist_def_3phase_bus_fault

Quick search
indexmodules |next |previous |Home | psspy »Set Disturbance Definition
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Area Subsystems
Area Subsystems
Release
35.6.0

Date
July 12, 2023

asys

Use this API to define an area subsystem.

asysdef

Use this API to set the definition of an area subsystem.

asysinit

Use this API to initialize or re-initialize an area subsystem.

Previous topic
psspy.dist_def_spcb_fault_2

Next topic
psspy.asys

Quick search
indexmodules |next |previous |Home | psspy »Area Subsystems
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Bus Subsystems
Bus Subsystems
Release
35.6.0

Date
July 12, 2023

bsys

Use this API to define a bus subsystem.

bsysadd

Use this API to add elements to an existing bus subsystem.

bsysdef

Use this API to set the definition of a bus subsystem.

bsysdelo

Use this API to delete a single bus from a bus subsystem.

bsysinit

Use this API to initialize or re-initialize a bus subsystem.

bsysmem

Use this API to replicate the specified bus subsystem in a bus subsystem file.

bsyso

Use this API to build a bus subsystem one bus at a time.

bsysrcl

Use this API to recall a specified bus subsystem saved in a bus subsystem file.

Previous topic
psspy.asysinit

Next topic
psspy.bsys

Quick search
indexmodules |next |previous |Home | psspy »Bus Subsystems
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Owner Subsystems
Owner Subsystems
Release
35.6.0

Date
July 12, 2023

osys

Use this API to define an owner subsystem.

osysdef

Use this API to set the definition of an owner subsystem.

osysinit

Use this API to initialize or re-initialize an owner subsystem.

Previous topic
psspy.bsysrcl

Next topic
psspy.osys

Quick search
indexmodules |next |previous |Home | psspy »Owner Subsystems
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Zone Subsystems
Zone Subsystems
Release
35.6.0

Date
July 12, 2023

zsys

Use this API to define a zone subsystem.

zsysdef

Use this API to set the definition of an zone subsystem.

zsysinit

Use this API to initialize or re-initialize a zone subsystem.

Previous topic
psspy.osysinit

Next topic
psspy.zsys

Quick search
indexmodules |next |previous |Home | psspy »Zone Subsystems
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Zone Subsystems
Zone Subsystems
Release
35.6.0

Date
July 12, 2023

zsys

Use this API to define a zone subsystem.

zsysdef

Use this API to set the definition of an zone subsystem.

zsysinit

Use this API to initialize or re-initialize a zone subsystem.

Previous topic
psspy.osysinit

Next topic
psspy.zsys

Quick search
indexmodules |next |previous |Home | psspy »Zone Subsystems
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Diagram View
Diagram View
Release
35.6.0

Date
July 12, 2023

changediagcontour

Use this API to change the contour parameters for the contour in the active Slider diagram in the GUI.

checkdiagfile

Use this API to check the active Slider Diagram in the GUI against the current network case.

closediagfile

Use this API to close the active Slider Diagram in the GUI without prompting to save the Diagram.

deletediagcontour

Use this API to delete the contour from the active Slider Diagram in the GUI.

enablediagcontour

Use this API to specify the contour parameters and display a contour in the active Slider Diagram in the GUI.

exportbuslocfile

This API routine is obsolete.

exportbuslocfile_2

Use this API to export the bus location from the active Slider Diagram in the GUI to a file.

exportimagefile

This API routine is obsolete.

exportimagefile_2

Use this API to export an image of the active Slider Diagram in the GUI to a file.

gexmbus

Use this API to create a GEXM/GOUT display of a bus in an active Slider diagram in the GUI.

growbus

Use this API to GROW a bus in an active Slider diagram in the GUI.

growbuslevels

Use this API to GROW a bus and all the connected buses up to the specified number of levels away in an active Slider diagram in the GUI.

growdiagram

This API routine is obsolete.

growdiagram_2

Use this API to GROW a bus and all the connected buses in an active Slider diagram in the GUI.

growstation

This API routine was first introduced in release 34.0.0.

grpg

Use this API to produce a GRPG report in the active Slider diagram in the GUI.

importdrawfile

Use this API to import a Draw Data File into an active Slider diagram in the GUI.

importimagefile

Use this API to import an image into the background layer of the active Slider diagram in the GUI.

newdiagfile

Use this API to open a new Slider diagram in the GUI.

nextdiagfiledataset

This API is used to display the next element in the active data set on the active Slider diagram.

openaccfile

This API routine is obsolete.

openaccfile_2

This API is used to open an existing ACC results file for displaying results on diagram.

openbuslocfile

Use this API to open an existing bus location file in the GUI.

opendiagfile

Use this API to open an existing Slider diagram in the GUI.

prevdiagfiledataset

This API is used to display the previous element in the active data set on the active Slider diagram.

printdiagfile

This API routine is obsolete.

printdiagfile_2

Use this API to print the active Slider diagram in the GUI.

refreshdiagcontour

Use this API to refresh the contour in the active Slider diagram in the GUI.

refreshdiagfile

Use this API to refresh the results and styles in the active Slider diagram in the GUI.

renumdiagfile

Use this API to renumber buses in the active Slider diagram in the GUI.

savediagfile

Use this API to save the active Slider diagram in the GUI.

setdiagautofile

Use this API to specify an automation file that is run each time results are updated on the active Slider diagram.

setdiagfont

Use this API to specify the default text font in the active Slider diagram.

setdiagprec

This API routine is obsolete.

setdiagprec_2

Use this API to specify the precision of results displayed in Slider Diagrams.

setdiagprop

This API routine is obsolete.

setdiagprop_2

This API routine is obsolete.

setdiagprop_3

This API routine is obsolete.

setdiagprop_4

This API routine is obsolete.

setdiagprop_5

Use this API to specify basic properties in the active Slider diagram.

setdiagresaccc

This API routine is obsolete.

setdiagresaccc_2

This API routine is obsolete.

setdiagresaccc_3

Use this API to set the ACCC analysis annotation options in the active Slider diagram.

setdiagresascc

This API routine is obsolete.

setdiagresascc_2

This API routine is obsolete.

setdiagresascc_3

This API is used to set the ASCC short circuit analysis annotation options in the active Slider diagram.

setdiagresdata

This API routine is obsolete.

setdiagresdata_2

This API routine is obsolete.

setdiagresdata_3

Use this API to specify the basic Power Flow annotation options in the active Slider Diagram.

setdiagresdyn

This API routine is obsolete.

setdiagresdyn_2

This API is used to set the dynamic simulation annotation options in the active Slider diagram.

setdiagresgdif

Use this API to specify the case comparison voltage and range checking annotation options in the active Slider diagram.

setdiagresiec

This API routine is obsolete.

setdiagresiec_2

This API routine is obsolete.

setdiagresiec_3

Use this API to specify the IEC annotation options in the active Slider diagram.

setdiagresmust

This API is used to set the MUST simulation annotation options in the active Slider diagram.

setdiagresopf

This API routine is obsolete.

setdiagresopf_2

This API routine is obsolete.

setdiagresopf_3

Use this API to specify the OPF annotation options in the active Slider diagram.

setdiagrespflowcheck

This API routine is obsolete.

setdiagrespflowcheck_2

This API routine is obsolete.

setdiagrespflowcheck_3

Use this API to specify the Power Flow voltage and range checking annotation options in the active Slider Diagram.

setdiagrespflowoptions

This API routine is obsolete.

setdiagrespflowoptions_2

This API routine is obsolete.

setdiagrespflowoptions_3

Use this API to specify the basic Power Flow annotation options in the active Slider diagram.

setdiagresrel

This API routine is obsolete.

setdiagresrel_2

This API routine is obsolete.

setdiagresrel_3

Use this API to specify the reliability annotation options in the active Slider diagram.

setdiagresscgr

Use this API to specify the short circuit analysis voltage and range checking annotation options in the active Slider diagram.

setdiagrestypeacc

Use this API to set the type of results displayed in the active Slider diagram to ACCC results.

setdiagrestypeascc

Use this API to set the type of results displayed in the active Slider diagram to ASCC fault calculation results.

setdiagrestypedata

Use this API to set the type of results displayed in the active Slider diagram to impedance data values.

setdiagrestypedyn

Use this API to set the type of results displayed in the active Slider diagram to Dynamics data results.

setdiagrestypegdif

Use this API to set the type of results displayed in the active Slider diagram to the differences in values between the current network case and a supplied comparison case.

setdiagrestypegic

Use this API to set the type of results displayed in the active Slider diagram to GIC solution results.

setdiagrestypeharm

Use this API to set the type of results displayed in the active Slider diagram to Harmonics solution results.

setdiagrestypeiec

Use this API to set the type of results displayed in the active Slider diagram to IEC Fault calculation results.

setdiagrestypemust

Use this API to set the type of results displayed in the active Slider diagram to MUST solution results.

setdiagrestypeopf

Use this API to set the type of results displayed in the active Slider diagram to OPF solution results.

setdiagrestypepflow

Use this API to set the type of results displayed in the active Slider diagram to Power Flow results.

setdiagrestyperel

Use this API to set the type of results displayed in the active Slider diagram to reliability analysis results.

setdiagrestypescgr

Use this API to set the type of results displayed in the active Slider diagram to the results of a short circuit analysis.

setdiagrestypetspf

Use this API to set the type of results displayed in the active Slider diagram to TSPF solution results.

setdiagresvrcs

This API routine is obsolete.

setdiagresvrcs_2

Use this API to specify the system diagram defaults for Voltage coloring and style, Out of Service coloring and style etc.

setdiagtitle

Use this API to set the title of the active Slider diagram.

switchdiagfiledataset

This API is used to rotate through values for the current element in the active data set on the active Slider diagram.

updatebuslocdiagfile

Use this API to update bus locations in the active Slider diagram in the GUI using the positions found in the current bus location file.

Previous topic
psspy.zsysinit

Next topic
psspy.changediagcontour

Quick search
indexmodules |next |previous |Home | psspy »Diagram View
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Single Element Data
Single Element Data
Release
35.6.0

Date
July 12, 2023

apierrstr

Use this API to return the message string associated with a specific error code returned from a recordable PSSE API routine.

ardat

Use this API to return area totals.

aredat

Use this API to return real area data items.

areint

Use this API to return integer area data items.

arenam

Use this API to return the area name.

arenum

Use this API to return the area number.

areuse

Use this API to indicate if an area is in use.

aritoj

Use this API to return the interchange between two areas.

brncur

This API routine is obsolete.

brndat

Use this API to return real branch parameters.

brndt2

Use this API to return complex positive and zero sequence parameters for non-transformer branches, and complex positive sequence parameters for transformer branches.

brnflo

Use this API to return the complex branch flow (P+jQ) as calculated at IBUS.

brnint

Use this API to return integer branch parameters.

brnmsc

Use this API to return real branch flow values.

brnmva

This API routine is obsolete.

brnnam

Use this API to return the name of an AC branch.

brnstt

This API routine is obsolete.

bsysisdef

Use this API to check whether a bus subsystem has been defined for a given subsystem ID.

busdat

Use this API to return real bus values.

busdt1

Use this API to return complex bus parameters as MVA.

busdt2

Use this API to return complex bus parameters.

busexs

Use this API to check for the existence of a specified bus.

busint

Use this API to return integer bus parameters.

busmsm

Use this API to return complex bus mismatch.

busordpos

Use this API to return the ordinal position of the specified bus or bus section in the numerically ordered list of non-star point buses (i.e., star point buses are excluded).

bussectdat

Use this API routine to return real bus section values.

bussectdt1

Use this API routine to return complex bus section parameters as MVA.

bussectdt2

Use this API routine to return complex bus section parameters.

bussectexs

Use this API routine to check for the existence of a specified bus section.

bussectint

Use this API routine to return real bus section values.

cctmdlnam_2dco

Use this API to return model name of CCT 2-terminal dc line other models.

cctmdlnam_2wtd

Use this API to return model name of the CCT 2-winding transformer device model.

cctmdlnam_3wtd

Use this API to return model name of the CCT 3-winding transformer device model.

cctmdlnam_brnd

Use this API to return model name of the CCT branch device model.

cctmdlnam_brno

Use this API to return model name of the CCT branch other model.

cctmdlnam_buso

Use this API to return model name of CCT Bus other models.

cctmdlnam_mcno

Use this API to return model name of the CCT machine other models.

cctmdlnam_mcnp

Use this API to return model name of the CCT machine protection models.

cctmdlnam_msco

Use this API to return model name of the CCT Miscellaneous other model.

cctmdlnam_swso_2

Use this API to return model name of the CCT switched shunt other type models.

cctmind_2dco

Use this API to return starting array indices and status of CCT 2-terminal dc line other models.

cctmind_2wtd

Use this API to return starting array indices and status of CCT 2-winding transformer device models.

cctmind_3wtd

Use this API to return starting array indices and status of CCT 3-winding transformer device models.

cctmind_brnd

Use this API to return starting array indices and status of CCT branch device models.

cctmind_brno

Use this API to return starting array indices and status of CCT branch other models.

cctmind_buso

Use this API to return starting array indices and status of CCT Bus other models.

cctmind_mcno

Use this API to return starting array indices and status of CCT machine other models.

cctmind_mcnp

Use this API to return starting array indices and status of CCT machine protection models.

cctmind_msco

Use this API to return starting array indices and status of CCT Miscellaneous other models.

cctmind_swso

This API routine is obsolete.

cctmind_swso_2

Use this API to return starting array indices and status of CCT Switched Shunt other models.

chktre

Use this API to check for Type 4 (or greater) buses with in-service branches connected to them.

chnval

Use this API to return the present value of the simulation variable assigned to a specified output channel.

dc2auxmind

Use this API to return the starting array indices and status of auxiliary signal model associated with 2-terminal dc line for the specified signal index.

dc2auxmnam

Use this API to return the auxiliary signal model name associated with a 2-terminal dc line for the specified auxiliary signal index.

dc2dat

This API routine is obsolete.

dc2dat_2

This API is the second release of the API that returns real two-terminal dc line quantities.

dc2int

This API routine is obsolete.

dc2int_2

This API is the second release of the API that returns integer two-terminal dc line quantities.

dc2mind

Use this API to return 2-terminal dc line model starting array indices and status.

dc2mnam

Use this API to return 2-terminal dc line model name.

dcnauxmind

Use this API to return the starting array indices and status of auxiliary signal model associated with N-terminal dc line for the specified signal index.

dcnauxmnam

Use this API to return the auxiliary signal model name associated with a N-terminal dc line for the specified auxiliary signal index.

dcncin

This API routine is obsolete.

dcncin_2

This API is the second release of the API that returns integer multi-terminal dc line converter quantities.

dcndat

This API routine is obsolete.

dcndat_2

This API is the second release of the API that returns real multi-terminal dc line quantities.

dcnint

This API routine is obsolete.

dcnint_2

This API is the second release of the API that returns integer multi-terminal dc line quantities.

dcnmind

Use this API to return N-terminal dc line model starting array indices and status.

dcnmnam

Use this API to return N-terminal dc line model name.

dscval

Use this API to return dynamics character array values.

dsival

Use this API to return dynamics integer array values.

dsrval

Use this API to return dynamics real values.

fcdauxmind

Use this API to return the starting array indices and status of auxiliary signal model associated with FACTS device for the specified signal index.

fcdauxmnam

Use this API to return the auxiliary signal model name associated with a FACTS device for the specified auxiliary signal index.

fcddat

This API routine is obsolete.

fcddat_2

This API is the second release of the API that returns FACTS device real quantities.

fcdint

This API routine is obsolete.

fcdint_2

This API is the second release of the API that returns FACTS device integer quantities.

fcdmind

Use this API to return FACTS device model starting array indices and status.

fcdmnam

Use this API to return FACTS device model name.

fxsdt1

Use this API to return the magnitude of a specified fixed bus shunt.

fxsdt2

Use this API to return complex fixed bus shunt.

fxsint

Use this API to return integer quantities of the specified fixed bus shunt.

gencnv

Use this API to return a flag indicating whether generators are converted.

gendat

Use this API to return plant total power output.

gendt1

Returns total plant power output in MVA.

gensectdat

Use this API routine to return a bus section’s plant total power output.

gensectdt1

Use this API routine to return a bus section’s total plant power output in MVA.

get_mstate

Use this API to return the MSTATE value.

gethomepath

Use this API to retrieve a user’s HOMEPATH directory.

gnechr

Use this API routine to return character quantities of a specified GNE device.

gnedat

Use this API routine to return real quantities of a specified GNE device.

gneint

Use this API routine to return integer quantities of a specified GNE device.

inddt1

Use this API routine to return real induction machine quantities.

inddt2

Use this API routine to return complex induction machine quantities.

indint

Use this API routine to return integer induction machine quantities.

ini2dc

Initializes the two-terminal dc line fetching routine ‘NXT2DC’ for retrieving two-terminal dc lines in dc line name alphabetical order.

inibrn

Initializes the branch fetching routine ‘NXTBRN’ or ‘NXTBRN3’ for returning branches connected to IBUS.

inibrn_2

Initializes the branch fetching routine ‘NXTBRN_2’ or ‘NXTBRN3_2’ for returning branches connected to bus sections described by IBUS and INODE.

inibrx

Initializes the branch fetching routine, ‘NXTBRN’ or ‘NXTBRN3’ for returning branches connected to IBUS.

inibrx_2

Initializes the branch fetching routine, ‘NXTBRN_2’ or ‘NXTBRN3_2’ for returning branches connected to IBUS.

inibus

Initializes the bus fetching routine ‘NXTBUS’ for retrieving buses in ascending numerical order.

inibus_2

Initializes the bus fetching routine ‘NXTBUS_2’ for retrieving buses in ascending numerical order.

inibux

Initializes the bus fetching routine ‘NXTBUS’ for retrieving buses in ascending numerical order.

inifax

Initializes the FACTS device fetching routine ‘NXTFAX’ for retrieving FACTS devices in FACTS device name alphabetical order.

inifxs

Initializes the fixed bus shunt fetching routine ‘NXTFXS’ for returning fixed shunts attached to bus IBUS.

iniind

Initializes induction machine fetching routine ‘NXTIND’ for returning induction machines attached to IBUS.

inilod

Initializes load fetching routine ‘NXTLOD’ for returning loads attached to IBUS.

inimac

Initializes machine fetching routine ‘NXTMAC’ for returning machines attached to IBUS.

inimdc

Initializes the multi-terminal dc line fetching routine ‘NXTMDC’ for retrieving multi-terminal dc lines in dc line name alphabetical order.

inimsl

Initializes the multi-section line member fetching routine ‘NXTMSL’ for retrieving lines that are sections of the specified multi-section line from IBUS to JBUS.

ininam

Initializes the bus fetching routine ‘NXTBUS’ for retrieving buses in ascending alphabetical order.

ininam_2

Initializes the bus fetching routine ‘NXTBUS_2’ for retrieving buses in ascending alphabetical order.

ininax

Initializes the bus fetching routine ‘NXTBUS’ for retrieving buses in ascending alphabetical order.

inistabussect

Use this API routine to initialize the bus section fetching routine ‘NXTSTABUSSECT’ for retrieving the bus sections in a substation.

inistanode

Use this API routine to initialize the node fetching routine ‘NXTSTANODE’ for retrieving the nodes in a sub-station.

inistaswdev

Use this API routine to initialize the switching device fetching routine ‘NXTSTASWDEV’ for retrieving the switching devices in a substation.

inisws

Initializes the switched shunt fetching routine ‘NXTSWS’ for returning switched shunts attached to bus IBUS.

initie

Initializes the tie branch fetching routine ‘NXTTIE’ or ‘NXTTIE3’ for returning tie branches from area IAR.

initix

Initializes the tie branch fetching routine ‘NXTTIE’ or ‘NXTTIE3’ for returning tie branches from area IAR.

inivsc

Initializes the VSC dc line fetching routine ‘NXTVSC’ for retrieving VSC dc lines in dc line name alphabetical order.

island

Trips in-service branches connected to Type 4 (or greater) buses, and disconnects islands not containing a swing bus.

iterat

Use this API to return the number of iterations used in the last solution attempt.

lmodind

Returns load-related model starting array indices and status.

lmodnam

Returns load-related model name.

lodcnv

This obsolete API always returns a 0.

loddt1

Returns load quantities in MVA.

loddt2

Use this API to return complex load quantities.

lodind

Use this API to return the load array index.

lodint

Use this API to return integer load quantities.

lodtype

Use this API to return the load type character string.

macchr

Use this API to return character machine quantities.

macdat

Use this API to return real machine quantities.

macdt2

Use this API to return complex machine quantities.

macind

Use this API to return the machine array index.

macint

Use this API to return integer machine quantities.

macstt

Use this API to return the machine status value.

maxmsm

Use this API to return the complex bus mismatch at the bus with the largest MVA mismatch.

mdlind

Use this API to return plant-related model starting array indices and status.

mdllibcnt

Use this API to return the number of libraries in the list to be searched for dynamics library models.

mdlnam

Use this API to return plant-related model name.

mdlpgmcnt

Use this API to returns the number of model programs loaded from dynamics model libraries.

natono

Use this API to return the bus number for a specified 18-character extended bus name.

notona

Use this API to return the bus 18-character extended bus name for a specified bus number.

notonasect

Use this API to return the bus 18-character extended bus name for a specified bus section.

nxt2dc

Returns the next two-terminal dc line in dc line name alphabetical order.

nxtbrn

Returns the next branch connected to a bus, excluding three-winding transformers.

nxtbrn3

Returns the next branch connected to a bus, including three-winding transformers.

nxtbrn3_2

Returns the next branch connected to a bus section, including three-winding transformers.

nxtbrn_2

Returns the next branch connected to a bus, excluding three-winding transformers.

nxtbus

Returns the next bus in ordered sequence.

nxtbus_2

Returns the next bus in ordered sequence.

nxtfax

Returns the next FACTS device in FACTS device name alphabetical order.

nxtfxs

Use this API to return the identifier of the next fixed shunt connected to a bus.

nxtind

Use this API routine to return the identifier of the next induction machine connected to a bus.

nxtlod

Use this API to return the identifier of the next load connected to a bus.

nxtmac

Use this API to return the identifier of the next machine connected to a bus.

nxtmdc

Returns the next multi-terminal dc line in dc line name alphabetical order.

nxtmsl

Use this API to return the next multi-section line member branch.

nxtstabussect

Use this API routine to retrieve the next bus section in the specified substation.

nxtstanode

Use this API routine to retrieve the next node in the specified substation.

nxtstaswdev

Use this API routine to retrieve the next switching device in the specified substation.

nxtsws

Use this API to return the identifier of the next switched shunt connected to a bus.

nxttie

Use this API to return the next tie branch from an area, excluding three-winding transformers.

nxttie3

Use this API to return the next tie branch from an area, including three-winding transformers.

nxtvsc

Returns the next VSC dc line in dc line name alphabetical order.

okstrt

Routine which may be called after activity STRT or MSTR to indicate the presence of INITIAL CONDITIONS SUSPECT errors (for activity STRT) or at least one MODEL NOT AVAILABLE IN MSTR/MRUN message (for MSTR).

openun

Connects an IPLAN unit number to the Fortran unit used by activity OPEN and returns that IPLAN unit number.

ordbus

This API routine returns the bus number corresponding to the specified position in the ordered list (numeric or alphabetic) of non-hidden buses (i.e., star point buses and topological buses are excluded).

ordbussect

This API routine returns the bus number and section number corresponding to the specified position in the ordered list (numeric or alphabetic) of non-star point buses (i.e., star point buses are excluded).

owndat

Returns the data associated with an owner (‘LOAD’ gets loads at buses of owner ‘IAR’, ‘LOADLD’ gets loads assigned to owner ‘IAR’).

ownnam

Returns the owner name for a specified owner number.

ownnum

Returns the owner number for a specified owner name.

ownuse

Use this API to indicate whether an owner is in use.

prmdat

Use this API routine to return real-valued solution parameters.

prmint

Use this API routine to return integer-valued solution parameters.

ratchr

Use this API to get rating set parameters.

rmodind

Returns the branch relay model starting array indices and status.

rmodnam

Returns the branch relay model name.

sbsgtbkv

Use this API to get previously defined bus subsystem voltage limits.

sc3wnd

Returns the three-winding transformer short circuit currents arriving at IBUS following activity SCMU.

scbrn2

Returns the branch short circuit currents arriving at IBUS following activity SCMU.

scbus2

Returns complex bus voltages and currents following activity SCMU.

scdone

Use this API to restore the working case after ‘SCINIT’.

scinit

Use this API to initialize the short-circuit data retrieval APIs.

scmac2

Use this API to return the machine short circuit currents following activity SCMU.

selctr

Use this API to return the activity selector indicator.

sethomepath

Use this API to set a user’s HOMEPATH directory.

sfiles

Use this API to return the current Saved Case and Snapshot filenames.

slmodind

Use this API to return the subsystem load-related model starting array indices and status.

slmodnam

Use this API to return the subsystem load-related model name.

solstr

Use this API to return a string indicating the result of the last solution attempt.

solved

Use this API to check whether the last solution attempt reached tolerance.

solved_ca

Use this API to check whether the last corrective action solution attempt reached tolerance.

stadat

Use this API routine to return real substation values.

staint

Use this API routine to return integer substation values.

staname

Use this API routine to return a substation’s name.

stanodeint

Use this API routine to return integer substation values.

stanodename

Use this API routine to return the name of a substation node.

starea

Use this API to restrict ‘NXTBUS’ to a single area.

staswdevdat

Use this API routine to return real substation switching device values.

staswdevint

Use this API routine to return integer substation switching device values.

staswdevname

Use this API routine to return the name of a substation switching device.

stbskv

Use this API to restrict ‘NXTBUS’ to a single base voltage level.

stzone

Use this API to restrict ‘NXTBUS’ to a single zone.

swsblk

This API routine is obsolete.

swsblk_2

Use this API to return data for a specified block of a specified switched shunt.

swsblz

This API routine is obsolete.

swsblz2

This API routine is obsolete.

swsdat

This API routine is obsolete.

swsdat_2

Use this API to return switched shunt real data.

swsdt1

This API routine is obsolete.

swsint

This API routine is obsolete.

swsint_2

Use this API to return switched shunt integer parameters.

swsmind

This API routine is obsolete.

swsmind_2

Use this API to return switched shunt model starting array indices and status.

swsmnam

This API routine is obsolete.

swsmnam_2

Use this API to return switched shunt model name.

sysmsm

Use this API to return the total system MVA mismatch.

sysmva

Use this API to return the system base MVA.

systot

Use this API to return complex system-wide values.

titldt

Use this API to return the two line case title.

totbus

Use this API to return the total number of buses in the working case.

tr3dat

Use this API to return three-winding transformer real values.

tr3dt2

Use this API to return three-winding transformer complex values.

tr3int

Use this API to return three-winding transformer integer values.

tr3nam

Use this API to return three-winding transformer name.

trndat

This API routine is obsolete.

trxdat

Use this API to return the inter-area transfer MW.

tspfprofilechr

Use this API to return string parameters of Time Series Power Flow profile.

tspfprofilecurvechr

Use this API to return string parameters of Time Series Power Flow profile curve.

tspfprofilecurveint

Use this API to return integer parameters of Time Series Power Flow profile curve.

tspfprofilecurvereal

Use this API to return real parameters of Time Series Power Flow profile curve.

tspfprofileint

Use this API to return integer parameters of Time Series Power Flow profile.

tspfprofilereal

Use this API to return real parameters of Time Series Power Flow profile.

voltagedroopdata

Use this API to return voltage droop control real parameters.

voltagedroopint

Use this API to return voltage droop control integer parameters.

vscauxmind

Use this API to return the starting array indices and status of auxiliary signal model associated with VSC dc line for the specified signal index.

vscauxmnam

Use this API to return the auxiliary signal model name associated with a VSC dc line for the specified auxiliary signal index.

vsccdt

Use this API to return VSC dc line real parameters.

vsccin

Use this API to return VSC dc line converter integer parameters.

vscint

Use this API to return VSC dc line integer parameters.

vscmind

Use this API to return VSC dc line model starting array indices and status.

vscmnam

Use this API to return VSC dc line model name.

windmind

Use this API to return wind model starting array indices and status.

windmnam

Use this API to return wind model name.

wnddat

Use this API to return three-winding transformer real values for winding connected to bus IBUS.

wnddt2

Use this API to return three-winding transformer complex values for winding connected to bus IBUS.

wndint

Use this API to return three-winding transformer integer values for winding connected to bus IBUS.

xfrdat

Use this API to return two-winding transformer real parameters.

xfrint

Use this API to return two-winding transformer integer parameters.

xfrnam

Use this API to return two-winding transformer name.

zndat

Use this API to return zone totals.

znitoj

Use this API to return the interchange between two zones.

zonnam

Use this API to return the zone name.

zonnum

Use this API to return the zone number.

zonuse

Use this API to indicate whether a zone is in use.

Previous topic
psspy.updatebuslocdiagfile

Next topic
psspy.apierrstr

Quick search
indexmodules |next |previous |Home | psspy »Single Element Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Extension Data Access
Extension Data Access
Release
35.6.0

Date
July 12, 2023

get_ext_acline_char

Use this API to get ac line character extension data.

get_ext_acline_int

Use this API to get ac line integer extension data.

get_ext_acline_logical

Use this API to get ac line logical extension data.

get_ext_acline_real

Use this API to get ac line real extension data.

get_ext_area_char

Use this API to get area character extension data.

get_ext_area_int

Use this API to get area integer extension data.

get_ext_area_logical

Use this API to get area logical extension data.

get_ext_area_real

Use this API to get area real extension data.

get_ext_bus_char

Use this API to get bus character extension data.

get_ext_bus_int

Use this API to get bus integer extension data.

get_ext_bus_logical

Use this API to get bus logical extension data.

get_ext_bus_real

Use this API to get bus real extension data.

get_ext_char

Use this API to get character extension data.

get_ext_facts_char

Use this API to get facts device character extension data.

get_ext_facts_int

Use this API to get facts device integer extension data.

get_ext_facts_logical

Use this API to get facts device logical extension data.

get_ext_facts_real

Use this API to get facts device real extension data.

get_ext_fixshunt_char

Use this API to get fixed shunt character extension data.

get_ext_fixshunt_int

Use this API to get fixed shunt integer extension data.

get_ext_fixshunt_logical

Use this API to get fixed shunt logical extension data.

get_ext_fixshunt_real

Use this API to get fixed shunt real extension data.

get_ext_generator_char

Use this API to get generator character extension data.

get_ext_generator_int

Use this API to get generator integer extension data.

get_ext_generator_logical

Use this API to get generator logical extension data.

get_ext_generator_real

Use this API to get generator real extension data.

get_ext_gne_char

Use this API to get general network element device character extension data.

get_ext_gne_int

Use this API to get general network element device integer extension data.

get_ext_gne_logical

Use this API to get general network element device logical extension data.

get_ext_gne_real

Use this API to get general network element device real extension data.

get_ext_iatrans_char

Use this API to get inter-area transfer character extension data.

get_ext_iatrans_int

Use this API to get inter-area transfer integer extension data.

get_ext_iatrans_logical

Use this API to get inter-area transfer logical extension data.

get_ext_iatrans_real

Use this API to get inter-area transfer real extension data.

get_ext_indmach_char

Use this API to get induction machine character extension data.

get_ext_indmach_int

Use this API to get induction machine integer extension data.

get_ext_indmach_logical

Use this API to get induction machine logical extension data.

get_ext_indmach_real

Use this API to get induction machine real extension data.

get_ext_int

Use this API to get integer extension data.

get_ext_load_char

Use this API to get load character extension data.

get_ext_load_int

Use this API to get load integer extension data.

get_ext_load_logical

Use this API to get load logical extension data.

get_ext_load_real

Use this API to get load real extension data.

get_ext_logical

Use this API to get logical extension data.

get_ext_msline_char

Use this API to get multi-section line character extension data.

get_ext_msline_int

Use this API to get multi-section line integer extension data.

get_ext_msline_logical

Use this API to get multi-section line logical extension data.

get_ext_msline_real

Use this API to get multi-section line real extension data.

get_ext_ntermdc_char

Use this API to get multi-terminal dc line character extension data.

get_ext_ntermdc_int

Use this API to get multi-terminal dc line integer extension data.

get_ext_ntermdc_logical

Use this API to get multi-terminal dc line logical extension data.

get_ext_ntermdc_real

Use this API to get multi-terminal dc line real extension data.

get_ext_owner_char

Use this API to get owner character extension data.

get_ext_owner_int

Use this API to get owner integer extension data.

get_ext_owner_logical

Use this API to get owner logical extension data.

get_ext_owner_real

Use this API to get owner real extension data.

get_ext_rating_char

Use this API to get rating character extension data.

get_ext_rating_int

Use this API to get rating integer extension data.

get_ext_rating_logical

Use this API to get rating logical extension data.

get_ext_rating_real

Use this API to get rating real extension data.

get_ext_real

Use this API to get real extension data.

get_ext_rowcount

Use this API to get extension data table row count.

get_ext_sub_char

Use this API to get substation character extension data.

get_ext_sub_int

Use this API to get substation integer extension data.

get_ext_sub_logical

Use this API to get substation logical extension data.

get_ext_sub_real

Use this API to get substation real extension data.

get_ext_subnode_char

Use this API to get substation node character extension data.

get_ext_subnode_int

Use this API to get substation node integer extension data.

get_ext_subnode_logical

Use this API to get substation node logical extension data.

get_ext_subnode_real

Use this API to get substation node real extension data.

get_ext_subswd_char

Use this API to get substation switching device character extension data.

get_ext_subswd_int

Use this API to get substation switching device integer extension data.

get_ext_subswd_logical

Use this API to get substation switching device logical extension data.

get_ext_subswd_real

Use this API to get substation switching device real extension data.

get_ext_swshunt_char

Use this API to get switched shunt character extension data.

get_ext_swshunt_int

Use this API to get switched shunt integer extension data.

get_ext_swshunt_logical

Use this API to get switched shunt logical extension data.

get_ext_swshunt_real

Use this API to get switched shunt real extension data.

get_ext_sysswd_char

Use this API to get system switching device character extension data.

get_ext_sysswd_int

Use this API to get system switching device integer extension data.

get_ext_sysswd_logical

Use this API to get system switching device logical extension data.

get_ext_sysswd_real

Use this API to get system switching device real extension data.

get_ext_transformer_char

Use this API to get transformer character extension data.

get_ext_transformer_int

Use this API to get transformer integer extension data.

get_ext_transformer_logical

Use this API to get transformer logical extension data.

get_ext_transformer_real

Use this API to get transformer real extension data.

get_ext_twotermdc_char

Use this API to get two-terminal dc line character extension data.

get_ext_twotermdc_int

Use this API to get two-terminal dc line integer extension data.

get_ext_twotermdc_logical

Use this API to get two-terminal dc line logical extension data.

get_ext_twotermdc_real

Use this API to get two-terminal dc line real extension data.

get_ext_vscdc_char

Use this API to get voltage source converter dc line character extension data.

get_ext_vscdc_int

Use this API to get voltage source converter dc line integer extension data.

get_ext_vscdc_logical

Use this API to get voltage source converter dc line logical extension data.

get_ext_vscdc_real

Use this API to get voltage source converter dc line real extension data.

get_ext_zone_char

Use this API to get zone character extension data.

get_ext_zone_int

Use this API to get zone integer extension data.

get_ext_zone_logical

Use this API to get zone logical extension data.

get_ext_zone_real

Use this API to get zone real extension data.

set_ext_acline_char

Use this API to set ac line character extension data.

set_ext_acline_int

Use this API to set ac line integer extension data.

set_ext_acline_logical

Use this API to set ac line logical extension data.

set_ext_acline_real

Use this API to set ac line real extension data.

set_ext_area_char

Use this API to set area character extension data.

set_ext_area_int

Use this API to set area integer extension data.

set_ext_area_logical

Use this API to set area logical extension data.

set_ext_area_real

Use this API to set area real extension data.

set_ext_bus_char

Use this API to set bus character extension data.

set_ext_bus_int

Use this API to set bus integer extension data.

set_ext_bus_logical

Use this API to set bus logical extension data.

set_ext_bus_real

Use this API to set bus real extension data.

set_ext_char

Use this API to set character extension data.

set_ext_facts_char

Use this API to set facts device character extension data.

set_ext_facts_int

Use this API to set facts device integer extension data.

set_ext_facts_logical

Use this API to set facts device logical extension data.

set_ext_facts_real

Use this API to set facts device real extension data.

set_ext_fixshunt_char

Use this API to set fixed shunt character extension data.

set_ext_fixshunt_int

Use this API to set fixed shunt integer extension data.

set_ext_fixshunt_logical

Use this API to set fixed shunt logical extension data.

set_ext_fixshunt_real

Use this API to set fixed shunt real extension data.

set_ext_generator_char

Use this API to set generator character extension data.

set_ext_generator_int

Use this API to set generator integer extension data.

set_ext_generator_logical

Use this API to set generator logical extension data.

set_ext_generator_real

Use this API to set generator real extension data.

set_ext_gne_char

Use this API to set general network element device character extension data.

set_ext_gne_int

Use this API to set general network element device integer extension data.

set_ext_gne_logical

Use this API to set general network element device logical extension data.

set_ext_gne_real

Use this API to set general network element device real extension data.

set_ext_iatrans_char

Use this API to set inter-area transfer character extension data.

set_ext_iatrans_int

Use this API to set inter-area transfer integer extension data.

set_ext_iatrans_logical

Use this API to set inter-area transfer logical extension data.

set_ext_iatrans_real

Use this API to set inter-area transfer real extension data.

set_ext_indmach_char

Use this API to set induction machine character extension data.

set_ext_indmach_int

Use this API to set induction machine integer extension data.

set_ext_indmach_logical

Use this API to set induction machine logical extension data.

set_ext_indmach_real

Use this API to set induction machine real extension data.

set_ext_int

Use this API to set integer extension data.

set_ext_load_char

Use this API to set load character extension data.

set_ext_load_int

Use this API to set load integer extension data.

set_ext_load_logical

Use this API to set load logical extension data.

set_ext_load_real

Use this API to set load real extension data.

set_ext_logical

Use this API to set logical extension data.

set_ext_msline_char

Use this API to set multi-section line character extension data.

set_ext_msline_int

Use this API to set multi-section line integer extension data.

set_ext_msline_logical

Use this API to set multi-section line logical extension data.

set_ext_msline_real

Use this API to set multi-section line real extension data.

set_ext_ntermdc_char

Use this API to set multi-terminal dc line character extension data.

set_ext_ntermdc_int

Use this API to set multi-terminal dc line integer extension data.

set_ext_ntermdc_logical

Use this API to set multi-terminal dc line logical extension data.

set_ext_ntermdc_real

Use this API to set multi-terminal dc line real extension data.

set_ext_owner_char

Use this API to set owner character extension data.

set_ext_owner_int

Use this API to set owner integer extension data.

set_ext_owner_logical

Use this API to set owner logical extension data.

set_ext_owner_real

Use this API to set owner real extension data.

set_ext_rating_char

Use this API to set rating character extension data.

set_ext_rating_int

Use this API to set rating integer extension data.

set_ext_rating_logical

Use this API to set rating logical extension data.

set_ext_rating_real

Use this API to set rating real extension data.

set_ext_real

Use this API to set real extension data.

set_ext_sub_char

Use this API to set substation character extension data.

set_ext_sub_int

Use this API to set substation integer extension data.

set_ext_sub_logical

Use this API to set substation logical extension data.

set_ext_sub_real

Use this API to set substation real extension data.

set_ext_subnode_char

Use this API to set substation node character extension data.

set_ext_subnode_int

Use this API to set substation node integer extension data.

set_ext_subnode_logical

Use this API to set substation node logical extension data.

set_ext_subnode_real

Use this API to set substation node real extension data.

set_ext_subswd_char

Use this API to set substation switching device character extension data.

set_ext_subswd_int

Use this API to set substation switching device integer extension data.

set_ext_subswd_logical

Use this API to set substation switching device logical extension data.

set_ext_subswd_real

Use this API to set substation switching device real extension data.

set_ext_swshunt_char

Use this API to set switched shunt character extension data.

set_ext_swshunt_int

Use this API to set switched shunt integer extension data.

set_ext_swshunt_logical

Use this API to set switched shunt logical extension data.

set_ext_swshunt_real

Use this API to set switched shunt real extension data.

set_ext_sysswd_char

Use this API to set system switching device character extension data.

set_ext_sysswd_int

Use this API to set system switching device integer extension data.

set_ext_sysswd_logical

Use this API to set system switching device logical extension data.

set_ext_sysswd_real

Use this API to set system switching device real extension data.

set_ext_transformer_char

Use this API to set transformer character extension data.

set_ext_transformer_int

Use this API to set transformer integer extension data.

set_ext_transformer_logical

Use this API to set transformer logical extension data.

set_ext_transformer_real

Use this API to set transformer real extension data.

set_ext_twotermdc_char

Use this API to set two-terminal dc line character extension data.

set_ext_twotermdc_int

Use this API to set two-terminal dc line integer extension data.

set_ext_twotermdc_logical

Use this API to set two-terminal dc line logical extension data.

set_ext_twotermdc_real

Use this API to set two-terminal dc line real extension data.

set_ext_vscdc_char

Use this API to set voltage source converter dc line character extension data.

set_ext_vscdc_int

Use this API to set voltage source converter dc line integer extension data.

set_ext_vscdc_logical

Use this API to set voltage source converter dc line logical extension data.

set_ext_vscdc_real

Use this API to set voltage source converter dc line real extension data.

set_ext_zone_char

Use this API to set zone character extension data.

set_ext_zone_int

Use this API to set zone integer extension data.

set_ext_zone_logical

Use this API to set zone logical extension data.

set_ext_zone_real

Use this API to set zone real extension data.

Previous topic
psspy.zonuse

Next topic
psspy.get_ext_acline_char

Quick search
indexmodules |next |previous |Home | psspy »Extension Data Access
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Character Data
Character Data
Release
35.6.0

Date
July 12, 2023

get_char_length

Use this API to return the number of characters required to accommodate the data corresponding to the specified STRING entries, which can be for any of the a*Char data retrieval functions.

Previous topic
psspy.set_ext_zone_real

Next topic
psspy.get_char_length

Quick search
indexmodules |next |previous |Home | psspy »Character Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Bus Data
Bus Data
Release
35.6.0

Date
July 12, 2023

abuschar

Use this API to return an array of character values for subsystem buses.

abuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the bus data family.

abuscplx

Use this API to return an array of complex values for subsystem buses.

abusint

Use this API to return an array of integer values for subsystem buses.

abusreal

Use this API to return an array of real values for subsystem buses.

abustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the bus data family (aBusInt, aBusReal, aBusCplx and aBusChar).

Previous topic
psspy.get_char_length

Next topic
psspy.abuschar

Quick search
indexmodules |next |previous |Home | psspy »Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Plant Bus Data
Plant Bus Data
Release
35.6.0

Date
July 12, 2023

agenbuschar

Use this API to return an array of character values for subsystem buses.

agenbuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the plant bus data family.

agenbuscplx

Use this API to return an array of complex values for subsystem buses.

agenbusint

Use this API to return an array of integer values for subsystem buses.

agenbusreal

Use this API to return an array of real values for subsystem buses.

agenbustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the plant bus data family (aGenBusInt, aGenBusReal, aGenBusCplx and aGenBusChar).

Previous topic
psspy.abustypes

Next topic
psspy.agenbuschar

Quick search
indexmodules |next |previous |Home | psspy »Plant Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Plant Bus Data
Plant Bus Data
Release
35.6.0

Date
July 12, 2023

agenbuschar

Use this API to return an array of character values for subsystem buses.

agenbuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the plant bus data family.

agenbuscplx

Use this API to return an array of complex values for subsystem buses.

agenbusint

Use this API to return an array of integer values for subsystem buses.

agenbusreal

Use this API to return an array of real values for subsystem buses.

agenbustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the plant bus data family (aGenBusInt, aGenBusReal, aGenBusCplx and aGenBusChar).

Previous topic
psspy.abustypes

Next topic
psspy.agenbuschar

Quick search
indexmodules |next |previous |Home | psspy »Plant Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Machine Data
Machine Data
Release
35.6.0

Date
July 12, 2023

amachchar

Use this API to return an array of character values for subsystem machines.

amachcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the machine data family.

amachcplx

Use this API to return an array of complex values for subsystem machines.

amachint

Use this API to return an array of integer values for subsystem machines.

amachreal

Use this API to return an array of real values for subsystem machines.

amachtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the machine data family (aMachInt, aMachReal, aMachCplx and aMachChar).

Previous topic
psspy.agenbustypes

Next topic
psspy.amachchar

Quick search
indexmodules |next |previous |Home | psspy »Machine Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Load Bus Data
Load Bus Data
Release
35.6.0

Date
July 12, 2023

alodbuschar

Use this API to return an array of character values for subsystem buses.

alodbuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the load bus data family.

alodbuscplx

Use this API to return an array of complex values for subsystem buses.

alodbusint

Use this API to return an array of integer values for subsystem buses.

alodbusreal

Use this API to return an array of real values for subsystem buses.

alodbustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the load bus data family (aLodBusInt, aLodBusReal, aLodBusCplx and aLodBusChar).

Previous topic
psspy.amachtypes

Next topic
psspy.alodbuschar

Quick search
indexmodules |next |previous |Home | psspy »Load Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Load Data
Load Data
Release
35.6.0

Date
July 12, 2023

aloadchar

Use this API to return an array of character values for subsystem loads.

aloadcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the load data family.

aloadcplx

Use this API to return an array of complex values for subsystem loads.

aloadint

Use this API to return an array of integer values for subsystem loads.

aloadreal

Use this API to return an array of real values for subsystem loads.

aloadtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the load data family (aLoadInt, aLoadReal, aLoadCplx and aLoadChar).

Previous topic
psspy.alodbustypes

Next topic
psspy.aloadchar

Quick search
indexmodules |next |previous |Home | psspy »Load Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Fixed Shunt Bus Data
Fixed Shunt Bus Data
Release
35.6.0

Date
July 12, 2023

afxshntbuschar

Use this API to return an array of character values for subsystem buses.

afxshntbuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the fixed shunt bus data family.

afxshntbuscplx

Use this API to return an array of complex values for subsystem buses.

afxshntbusint

Use this API to return an array of integer values for subsystem buses.

afxshntbusreal

Use this API to return an array of real values for subsystem buses.

afxshntbustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the fixed shunt bus data family (aFxShntBusInt, aFxShntBusReal, aFxShntBusCplx and aFxShntBusChar).

Previous topic
psspy.aloadtypes

Next topic
psspy.afxshntbuschar

Quick search
indexmodules |next |previous |Home | psspy »Fixed Shunt Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Switched Shunt Bus Data
Switched Shunt Bus Data
Release
35.6.0

Date
July 12, 2023

aswshuntbuschar

Use this API to return an array of character values for subsystem buses.

aswshuntbuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the switched shunt bus data family.

aswshuntbuscplx

Use this API to return an array of complex values for subsystem buses.

aswshuntbusint

Use this API to return an array of integer values for subsystem buses.

aswshuntbusreal

Use this API to return an array of real values for subsystem buses.

aswshuntbustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the switched shunt bus data family (aSwShntBusInt, aSwShntBusReal, aSwShntBusCplx and aSwShntBusChar).

Previous topic
psspy.afxshunttypes

Next topic
psspy.aswshuntbuschar

Quick search
indexmodules |next |previous |Home | psspy »Switched Shunt Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Switched Shunt Data
Switched Shunt Data
Release
35.6.0

Date
July 12, 2023

aswshchar

Use this API to return an array of character values for subsystem switched shunts.

aswshcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the switched shunt data family.

aswshcplx

Use this API to return an array of complex values for subsystem switched shunts.

aswshint

Use this API to return an array of integer values for subsystem switched shunts.

aswshreal

Use this API to return an array of real values for subsystem switched shunts.

aswshtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the switched shunt data family (aSwshInt, aSwshReal, aSwshCplx and aSwshChar).

Previous topic
psspy.aswshuntbustypes

Next topic
psspy.aswshchar

Quick search
indexmodules |next |previous |Home | psspy »Switched Shunt Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Branch Flow Data
Branch Flow Data
Release
35.6.0

Date
July 12, 2023

aflowchar

Use this API to return an array of character values for subsystem branches.

aflowcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the branch flow data family.

aflowcplx

Use this API to return an array of complex values for subsystem branches.

aflowint

Use this API to return an array of integer values for subsystem branches.

aflowreal

Use this API to return an array of real values for subsystem branches.

aflowtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the branch flow data family (aFlowInt, aFlowReal, aFlowCplx and aFlowChar).

Previous topic
psspy.aswshtypes

Next topic
psspy.aflowchar

Quick search
indexmodules |next |previous |Home | psspy »Branch Flow Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Branch Data
Branch Data
Release
35.6.0

Date
July 12, 2023

abrnchar

Use this API to return an array of character values for subsystem branches.

abrncount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the branch data family.

abrncplx

Use this API to return an array of complex values for subsystem branches.

abrnint

Use this API to return an array of integer values for subsystem branches.

abrnreal

Use this API to return an array of real values for subsystem branches.

abrntypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the branch data family (aBrnInt, aBrnReal, aBrnCplx and aBrnChar).

Previous topic
psspy.aflowtypes

Next topic
psspy.abrnchar

Quick search
indexmodules |next |previous |Home | psspy »Branch Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Two-Winding Transformer Data
Two-Winding Transformer Data
Release
35.6.0

Date
July 12, 2023

atrnchar

Use this API to return an array of character values for subsystem two-winding transformers.

atrncount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the two-winding transformer data family.

atrncplx

Use this API to return an array of complex values for subsystem two-winding transformers.

atrnint

Use this API to return an array of integer values for subsystem two-winding transformers.

atrnreal

Use this API to return an array of real values for subsystem two-winding transformers.

atrntypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the two-winding transformer data family (aTrnInt, aTrnReal, aTrnCplx and aTrnChar).

Previous topic
psspy.abrntypes

Next topic
psspy.atrnchar

Quick search
indexmodules |next |previous |Home | psspy »Two-Winding Transformer Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Three-Winding Transformer Data
Three-Winding Transformer Data
Release
35.6.0

Date
July 12, 2023

atr3char

Use this API to return an array of character values for subsystem three-winding transformers.

atr3count

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the three-winding transformer data family.

atr3cplx

Use this API to return an array of complex values for subsystem three-winding transformers.

atr3int

Use this API to return an array of integer values for subsystem three-winding transformers.

atr3real

Use this API to return an array of real values for subsystem three-winding transformers.

atr3types

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the three-winding transformer data family (aTr3Int, aTr3Real, aTr3Cplx and aTr3Char).

Previous topic
psspy.atrntypes

Next topic
psspy.atr3char

Quick search
indexmodules |next |previous |Home | psspy »Three-Winding Transformer Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Three-Winding Transformer Winding Data
Three-Winding Transformer Winding Data
Release
35.6.0

Date
July 12, 2023

awndchar

Use this API to return an array of character values for subsystem three-winding transformer windings.

awndcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the three-winding transformer winding data family.

awndcplx

Use this API to return an array of complex values for subsystem three-winding transformer windings.

awndint

Use this API to return an array of integer values for subsystem three-winding transformer windings.

awndreal

Use this API to return an array of real values for subsystem three-winding transformer windings.

awndtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the three-winding transformer winding data family (aWndInt, aWndReal, aWndCplx and aWndChar).

Previous topic
psspy.atr3types

Next topic
psspy.awndchar

Quick search
indexmodules |next |previous |Home | psspy »Three-Winding Transformer Winding Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Two-Terminal Dc Line Data
Two-Terminal Dc Line Data
Release
35.6.0

Date
July 12, 2023

a2trmdcchar

Use this API to return an array of character values for subsystem two-terminal dc lines.

a2trmdccount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the two-terminal dc line data family.

a2trmdccplx

Use this API to return an array of complex values for subsystem two-terminal dc lines.

a2trmdcint

Use this API to return an array of integer values for subsystem two-terminal dc lines.

a2trmdcreal

Use this API to return an array of real values for subsystem two-terminal dc lines.

a2trmdctypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the two-terminal dc line data family (a2TrmDcInt, a2TrmDcReal, a2TrmDcCplx and a2TrmDcChar).

Previous topic
psspy.awndtypes

Next topic
psspy.a2trmdcchar

Quick search
indexmodules |next |previous |Home | psspy »Two-Terminal Dc Line Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Two-Terminal Dc Line Data
Two-Terminal Dc Line Data
Release
35.6.0

Date
July 12, 2023

a2trmdcchar

Use this API to return an array of character values for subsystem two-terminal dc lines.

a2trmdccount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the two-terminal dc line data family.

a2trmdccplx

Use this API to return an array of complex values for subsystem two-terminal dc lines.

a2trmdcint

Use this API to return an array of integer values for subsystem two-terminal dc lines.

a2trmdcreal

Use this API to return an array of real values for subsystem two-terminal dc lines.

a2trmdctypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the two-terminal dc line data family (a2TrmDcInt, a2TrmDcReal, a2TrmDcCplx and a2TrmDcChar).

Previous topic
psspy.awndtypes

Next topic
psspy.a2trmdcchar

Quick search
indexmodules |next |previous |Home | psspy »Two-Terminal Dc Line Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Two-Terminal Dc Line Converter Data
Two-Terminal Dc Line Converter Data
Release
35.6.0

Date
July 12, 2023

a2trmdcconvchar

Use this API to return an array of character values for subsystem two-terminal dc line converters.

a2trmdcconvcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the two-terminal dc line converter data family.

a2trmdcconvcplx

Use this API to return an array of complex values for subsystem two-terminal dc line converters.

a2trmdcconvint

Use this API to return an array of integer values for subsystem two-terminal dc line converters.

a2trmdcconvreal

Use this API to return an array of real values for subsystem two-terminal dc line converters.

a2trmdcconvtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the two-terminal dc line converter data family (a2TrmDcConvInt, a2TrmDcConvReal, a2TrmDcConvCplx and a2TrmDcConvChar).

Previous topic
psspy.a2trmdctypes

Next topic
psspy.a2trmdcconvchar

Quick search
indexmodules |next |previous |Home | psspy »Two-Terminal Dc Line Converter Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Multi-Terminal Dc Line Data
Multi-Terminal Dc Line Data
Release
35.6.0

Date
July 12, 2023

amultitrmdcchar

Use this API to return an array of character values for subsystem multi-terminal dc lines.

amultitrmdccount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the multi-terminal dc line data family.

amultitrmdccplx

Use this API to return an array of complex values for subsystem multi-terminal dc lines.

amultitrmdcint

Use this API to return an array of integer values for subsystem multi-terminal dc lines.

amultitrmdcreal

Use this API to return an array of real values for subsystem multi-terminal dc lines.

amultitrmdctypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the multi-terminal dc line data family (aMultiTrmDcInt, aMultiTrmDcReal, aMultiTrmDcCplx and aMultiTrmDcChar).

Previous topic
psspy.a2trmdcconvtypes

Next topic
psspy.amultitrmdcchar

Quick search
indexmodules |next |previous |Home | psspy »Multi-Terminal Dc Line Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Multi-Terminal Dc Line Converter Data
Multi-Terminal Dc Line Converter Data
Release
35.6.0

Date
July 12, 2023

amultitrmdcconvchar

Use this API to return an array of character values for subsystem multi-terminal dc line converters.

amultitrmdcconvcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the multi-terminal dc line converter data family.

amultitrmdcconvcplx

Use this API to return an array of complex values for subsystem multi-terminal dc line converters.

amultitrmdcconvint

Use this API to return an array of integer values for subsystem multi-terminal dc line converters.

amultitrmdcconvreal

Use this API to return an array of real values for subsystem multi-terminal dc line converters.

amultitrmdcconvtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the two-terminal dc line converter data family (aMultiTrmDcConvInt, aMultiTrmDcConvReal, aMultiTrmDcConvCplx and aMultiTrmDcConvChar).

Previous topic
psspy.amultitrmdctypes

Next topic
psspy.amultitrmdcconvchar

Quick search
indexmodules |next |previous |Home | psspy »Multi-Terminal Dc Line Converter Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.

PSSE API Manual
indexmodules |next |previous |Home | psspy »Vsc Dc Line Data
Vsc Dc Line Data
Release
35.6.0

Date
July 12, 2023

avscdcchar

Use this API to return an array of character values for subsystem VSC dc lines.

avscdccount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the VSC dc line data family.

avscdccplx

Use this API to return an array of complex values for subsystem VSC dc lines.

avscdcint

Use this API to return an array of integer values for subsystem VSC dc lines.

avscdcreal

Use this API to return an array of real values for subsystem VSC dc lines.

avscdctypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the VSC dc line data family (aVscDcInt, aVscDcReal, aVscDcCplx and aVscDcChar).

Previous topic
psspy.amultitrmdcconvtypes

Next topic
psspy.avscdcchar

Quick search
indexmodules |next |previous |Home | psspy »Vsc Dc Line Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Vsc Dc Line Converter Data
Vsc Dc Line Converter Data
Release
35.6.0

Date
July 12, 2023

avscdcconvchar

Use this API to return an array of character values for subsystem VSC dc line converters.

avscdcconvcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the VSC dc line converter data family.

avscdcconvcplx

Use this API to return an array of complex values for subsystem VSC dc line converters.

avscdcconvint

Use this API to return an array of integer values for subsystem VSC dc line converters.

avscdcconvreal

Use this API to return an array of real values for subsystem VSC dc line converters.

avscdcconvtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the VSC dc line converter data family (aVscDcConvInt, aVscDcConvReal, aVscDcConvCplx and aVscDcConvChar).

Previous topic
psspy.avscdctypes

Next topic
psspy.avscdcconvchar

Quick search
indexmodules |next |previous |Home | psspy »Vsc Dc Line Converter Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Facts Device Data
Facts Device Data
Release
35.6.0

Date
July 12, 2023

afactschar

Use this API to return an array of character values for subsystem FACTS devices.

afactscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the FACTS device data family.

afactscplx

Use this API to return an array of complex values for subsystem FACTS devices.

afactsint

Use this API to return an array of integer values for subsystem FACTS devices.

afactsreal

Use this API to return an array of real values for subsystem FACTS devices.

afactstypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the FACTS device data family (aFactsInt, aFactsReal, aFactsCplx and aFactsChar).

Previous topic
psspy.avscdcconvtypes

Next topic
psspy.afactschar

Quick search
indexmodules |next |previous |Home | psspy »Facts Device Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Facts Device Bus Data
Facts Device Bus Data
Release
35.6.0

Date
July 12, 2023

afactsbuschar

Use this API to return an array of character values for subsystem FACTS device buses.

afactsbuscount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the FACTS device bus data family.

afactsbuscplx

Use this API to return an array of complex values for subsystem FACTS device buses.

afactsbusint

Use this API to return an array of integer values for subsystem FACTS device buses.

afactsbusreal

Use this API to return an array of real values for subsystem FACTS device buses.

afactsbustypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the FACTS device bus data family (aFactsBusInt, aFactsBusReal, aFactsBusCplx and aFactsBusChar).

Previous topic
psspy.afactstypes

Next topic
psspy.afactsbuschar

Quick search
indexmodules |next |previous |Home | psspy »Facts Device Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Area Data
Area Data
Release
35.6.0

Date
July 12, 2023

aareachar

Use this API to return an array of character values for subsystem areas.

aareacount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the area data family.

aareacplx

Use this API to return an array of complex values for subsystem areas.

aareaint

Use this API to return an array of integer values for subsystem areas.

aareareal

Use this API to return an array of real values for subsystem areas.

aareatypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the area data family (aAreaInt, aAreaReal, aAreaCplx and aAreaChar).

Previous topic
psspy.afactsbustypes

Next topic
psspy.aareachar

Quick search
indexmodules |next |previous |Home | psspy »Area Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Owner Data
Owner Data
Release
35.6.0

Date
July 12, 2023

aownerchar

Use this API to return an array of character values for subsystem owners.

aownercount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the owner data family.

aownercplx

Use this API to return an array of complex values for subsystem owners.

aownerint

Use this API to return an array of integer values for subsystem owners.

aownerreal

Use this API to return an array of real values for subsystem owners.

aownertypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the owner data family (aOwnerInt, aOwnerReal, aOwnerCplx and aOwnerChar).

Previous topic
psspy.aareatypes

Next topic
psspy.aownerchar

Quick search
indexmodules |next |previous |Home | psspy »Owner Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Zone Data
Zone Data
Release
35.6.0

Date
July 12, 2023

azonechar

Use this API to return an array of character values for subsystem zones.

azonecount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the zone data family.

azonecplx

Use this API to return an array of complex values for subsystem zones.

azoneint

Use this API to return an array of integer values for subsystem zones.

azonereal

Use this API to return an array of real values for subsystem zones.

azonetypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the zone data family (aZoneInt, aZoneReal, aZoneCplx and aZoneChar).

Previous topic
psspy.aownertypes

Next topic
psspy.azonechar

Quick search
indexmodules |next |previous |Home | psspy »Zone Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Induction Machine Bus Data
Induction Machine Bus Data
Release
35.6.0

Date
July 12, 2023

aindmacbuschar

Use this API routine to return an array of character values for subsystem buses.

aindmacbuscount

Use this API routine to obtain the number of array entries required to accommodate the data to be returned by the remaining members of the induction machine bus data family.

aindmacbuscplx

Use this API routine to return an array of complex values for subsystem buses.

aindmacbusint

Use this API routine to return an array of integer values for subsystem buses.

aindmacbusreal

Use this API routine to return an array of real values for subsystem buses.

aindmacbustypes

Use this API routine to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the induction machine bus data family (aIndMacBusInt, aIndMacBusReal, aIndMacBusCplx and aIndMacBusChar).

Previous topic
psspy.azonetypes

Next topic
psspy.aindmacbuschar

Quick search
indexmodules |next |previous |Home | psspy »Induction Machine Bus Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Induction Machine Data
Induction Machine Data
Release
35.6.0

Date
July 12, 2023

aindmacchar

Use this API routine to return an array of character values for subsystem induction machines.

aindmaccount

Use this API routine to obtain the number of array entries required to accommodate the data to be returned by the remaining members of the induction machine data family.

aindmaccplx

Use this API routine to return an array of complex values for subsystem induction machines.

aindmacint

Use this API routine to return an array of integer values for subsystem induction machines.

aindmacreal

Use this API routine to return an array of real values for subsystem induction machines.

aindmactypes

Use this API routine to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the induction machine data family (aIndMacInt, aIndMacReal, aIndMacCplx and aIndMacChar).

Previous topic
psspy.aindmacbustypes

Next topic
psspy.aindmacchar

Quick search
indexmodules |next |previous |Home | psspy »Induction Machine Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Substation Data
Substation Data
Release
35.6.0

Date
July 12, 2023

astationchar

Use this API to return an array of character values for subsystem substations.

astationcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the substation data family.

astationint

Use this API to return an array of integer values for subsystem substations.

astationreal

Use this API to return an array of real values for subsystem substations.

astationtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the substation data family (aStationInt, aStationReal and aStationChar).

Previous topic
psspy.aindmactypes

Next topic
psspy.astationchar

Quick search
indexmodules |next |previous |Home | psspy »Substation Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Substation Node Data
Substation Node Data
Release
35.6.0

Date
July 12, 2023

anodechar

Use this API to return an array of character values for subsystem substation nodes.

anodecount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the substation node data family.

anodeint

Use this API to return an array of integer values for subsystem substation nodes.

anodereal

Use this API to return an array of real values for subsystem substation nodes.

anodetypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the substation node data family (aNodeInt and aNodeChar).

Previous topic
psspy.astationtypes

Next topic
psspy.anodechar

Quick search
indexmodules |next |previous |Home | psspy »Substation Node Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Substation Switching Device Data
Substation Switching Device Data
Release
35.6.0

Date
July 12, 2023

astaswdevchar

Use this API to return an array of character values for subsystem substation switching devices.

astaswdevcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the substation switching device data family.

astaswdevcplx

Use this API to return an array of complex values for subsystem substation switching devices.

astaswdevint

Use this API to return an array of integer values for subsystem substation switching devices.

astaswdevreal

Use this API to return an array of real values for subsystem substation switching devices.

astaswdevtypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the substation switching device data family (aStaSwDevInt, aStaSwDevReal, aStaSwDevCplx and aStaSwDevChar).

Previous topic
psspy.anodetypes

Next topic
psspy.astaswdevchar

Quick search
indexmodules |next |previous |Home | psspy »Substation Switching Device Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Substation Terminal Data
Substation Terminal Data
Release
35.6.0

Date
July 12, 2023

aterminalchar

Use this API to return an array of integer values for subsystem substation terminals.

aterminalcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the substation terminal data family.

aterminalint

Use this API to return an array of integer values for subsystem substation terminals.

aterminaltypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the substation terminal data family (aTerminalInt and aTerminalChar).

Previous topic
psspy.astaswdevtypes

Next topic
psspy.aterminalchar

Quick search
indexmodules |next |previous |Home | psspy »Substation Terminal Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Zero Sequence Mutuals Data
Zero Sequence Mutuals Data
Release
35.6.0

Date
July 12, 2023

azmutchar

Use this API to return an array of character values for subsystem zero sequence mutual branches.

azmutcount

Use this API to return the number of array entries required to accommodate the data to be returned by the remaining members of the branch zero sequence mutual data family.

azmutcplx

Use this API to return an array of complex values for subsystem zero sequence mutual branches.

azmutint

Use this API to return an array of integer values for subsystem zero sequence mutual branches.

azmutreal

Use this API to return an array of real values for subsystem zero sequence mutual branches.

azmuttypes

Use this API to return an array of character values indicating the data types corresponding to a set of specified STRING values that are valid input values to any of the data retrieval routines of the branch zero sequence mutual data family (aZmutInt, aZmutReal, aZmutCplx and aZmutChar).

Previous topic
psspy.aterminaltypes

Next topic
psspy.azmutchar

Quick search
indexmodules |next |previous |Home | psspy »Zero Sequence Mutuals Data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Graphical Analysis Output
Graphical Analysis Output
Release
35.6.0

Date
July 12, 2023

poly_print

Use this API to print the results of activity POLY from a .pol results file.

pv_print

Use this API to print the results of PV analysis from the .pv results file

qv_print

Use this API to print the results of QV analysis from a .qv resultsfile.

setfullviewgrapharea

Use this API to specify the parameters of the scales used for plotting the results of PV and QV analysis.

setfullviewscale

Use this API to specify the parameters of the scales used for plotting the results of PV and QV analysis.

Previous topic
psspy.azmuttypes

Next topic
psspy.poly_print

Quick search
indexmodules |next |previous |Home | psspy »Graphical Analysis Output
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Scenarios
Scenarios
Release
35.6.0

Date
July 12, 2023

closescenariofile

This API routine is obsolete.

newscenariofile

This API routine is obsolete.

openscenariofile

This API routine is obsolete.

savescenariofile

This API routine is obsolete.

scenarioclose

Use this API to close the currently open Scenario.

scenariocopyfile

Use this API to copy a file from one group to another group.

scenariofileadd

Use this API to add a file to the specified group.

scenariofilecount

Use this API to retrieve the number of files in a specified group in the Scenario.

scenariofilegetattrs

Use this API to retrieve the attributes of the specified file.

scenariofilegetcomments

Use this API to retrieve the comments for the specified file.

scenariofilelengthcomments

Use this API to determine the buffer size needed to hold the comments for the specified file.

scenariofilelist

Use this API to retrieve the list of files in the specified group.

scenariofileremove

Use this API to remove a file from the specified group.

scenariofilerename

Use this API to rename one of the files in the Scenario.

scenariofilesetattrs

Use this API to modify the attributes of the specified file.

scenariofilesetcomments

Use this API to define or modify the comments for the specified file.

scenariogetattrs

Use this API to retrieve the attributes of the Scenario.

scenariogetcomments

Use this API to retrieve the Scenario comments.

scenariogetopt

Use this API to retrieve the Scenario options.

scenariogroupadd

Use this API to add a group to the Scenario.

scenariogroupcount

Use this API to retrieve the number of groups in the Scenario.

scenariogroupgetcomments

Use this API to retrieve the comments for the specified group.

scenariogrouplengthcomments

Use this API to determine the buffer size needed to hold the comments for the specified group.

scenariogrouplist

Use this API to retrieve the list of groups in the Scenario.

scenariogroupopen

Use this API to add a group to the Scenario.

scenariogroupremove

Use this API to remove a group from the Scenario.

scenariogrouprename

Use this API to rename one of the groups in the Scenario.

scenariogroupsetcomments

Use this API to define or modify the comments for the specified group.

scenarioisdirty

Use this API to determine if there are any unsaved changes in the current Scenario.

scenarioisvalid

Use this API to determine if there is a valid Scenario in memory.

scenariolengthcomments

Use this API to determine the buffer size needed to hold the current Scenario comments.

scenariomodelgroup

Use this API to create a new group that is identical to another group.

scenariomovefile

Use this API to move a file from one group to another group.

scenarionew

Use this API to create a new Scenario.

scenarioopen

Use this API to open a previously created Scenario.

scenariosave

Use this API to save the currently open Scenario.

scenariosetattrs

Use this API to modify the root path and startup group attributes of the Scenario.

scenariosetcomments

Use this API to define or modify the Scenario comments.

scenariosetopt

Use this API to modify the Scenario options.

scenariotrackfileadd

Use this API to add the files currently being tracked.

scenariotrackfilelist

Use this API to retrieve the list of files being tracked.

scenariotrackfilenum

Use this API to retrieve the current number of files being tracked.

scenariounzip

Use this API to unzip a zipped Scenario.

scenariounzipproblems

Use this API to retrieve the problems that occurred during the last unzip attempt.

scenariounzipsolutions

Use this API to submit potential solutions to the problems that occurred during the last unzip attempt.

scenariozip

Use this API to zip up the current Scenario.

scenariozipactive

Use this API to determine if the Scenario is currently in Zip Mode.

scenariozipopen

Use this API to open a zipped Scenario.

scenariozipsave

This API routine was first introduced in release 33.2.0.

Previous topic
psspy.setfullviewscale

Next topic
psspy.closescenariofile

Quick search
indexmodules |next |previous |Home | psspy »Scenarios
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Event Studies
Event Studies
Release
35.6.0

Date
July 12, 2023

closeeventstudyfile

Use this API to close an open Event Study file.

openeventstudyfile

Use this API to open a new or existing event study file in the GUI.

rundynamiceventstudy

Use this API to run a dynamic study using the active event study in the open event study file.

runpowerfloweventstudy

Use this API to run a power flow study using the active event study in the open event study file.

saveeventstudyfile

Use this API to save existing event studies in an event study file.

setactiveeventstudy

Use this API to select an Event Study in an Event file as the active Event Study for running dynamic or power flow event studies.

Previous topic
psspy.scenariozipsave

Next topic
psspy.closeeventstudyfile

Quick search
indexmodules |next |previous |Home | psspy »Event Studies
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Using The Vendor Neutral Contingency And Ras Auxiliary File
Using The Vendor Neutral Contingency And Ras Auxiliary File
Release
35.6.0

Date
July 12, 2023

accc_ras

This API routine is obsolete.

accc_ras_2

Use this API to run AC contingency calculation function with RAS model.

add2windingconditionelement

Add 2WindingConditionElement to RAS memory model

add2windingcontingencyelement

Add 2WindingContingencyElement to RAS memory model

add2windingremedialactionelement

Add 2WindingRemedialActionElement to RAS memory model

add3windingconditionelement

Add 3WindingConditionElement to RAS memory model

add3windingcontingencyelement

Add 3WindingContingencyElement to RAS memory model

add3windingremedialactionelement

Add 3WindingRemedialActionElement to RAS memory model

addaclineconditionelement

Add AclineConditionElement to RAS memory model

addaclinecontingencyelement

Add AclineContingencyElement to RAS memory model

addaclineremedialactionelement

Add AclineRemedialActionElement to RAS memory model

addbusconditionelement

Add BusConditionElement to RAS memory model

addbuscontingencyelement

Add BusContingencyElement to RAS memory model

addbusremedialactionelement

Add BusRemedialActionElement to RAS memory model

addcondition

Add Condition to RAS memory model

addconditionelement

Add ConditionElement to RAS memory model

addcontingency

Add Contingency to RAS memory model

addcontingencyelement

Add ContingencyElement to RAS memory model

adddcconvconditionelement

Add DcconvConditionElement to RAS memory model

adddcconvcontingencyelement

Add DcconvContingencyElement to RAS memory model

adddcconvremedialactionelement

Add DcconvRemedialActionElement to RAS memory model

adddclineconditionelement

Add DclineConditionElement to RAS memory model

adddclinecontingencyelement

Add DclineContingencyElement to RAS memory model

adddclineremedialactionelement

Add DclineRemedialActionElement to RAS memory model

addfixshuntconditionelement

Add FixshuntConditionElement to RAS memory model

addfixshuntcontingencyelement

Add FixshuntContingencyElement to RAS memory model

addfixshuntremedialactionelement

Add FixshuntRemedialActionElement to RAS memory model

addgenconditionelement

Add GenConditionElement to RAS memory model

addgencontingencyelement

Add GenContingencyElement to RAS memory model

addgenremedialactionelement

Add GenRemedialActionElement to RAS memory model

addloadconditionelement

Add LoadConditionElement to RAS memory model

addloadcontingencyelement

Add LoadContingencyElement to RAS memory model

addloadremedialactionelement

Add LoadRemedialActionElement to RAS memory model

addnestedcondition

Add NestedCondition to RAS memory model

addpythonconditionelement

Add PythonConditionElement to RAS memory model

addpythoncontingencyelement

Add PythonContingencyElement to RAS memory model

addpythonremedialactionelement

Add PythonRemedialActionElement to RAS memory model

addremedialaction

Add RemedialAction to RAS memory model

addremedialactionelement

Add RemedialActionElement to RAS memory model

addsubconditionelement

Add SubConditionElement to RAS memory model

addsubcontingencyelement

Add SubContingencyElement to RAS memory model

addsubremedialactionelement

Add SubRemedialActionElement to RAS memory model

addvscdcconditionelement

Add VscdcConditionElement to RAS memory model

addvscdccontingencyelement

Add VscdcContingencyElement to RAS memory model

addvscdcremedialactionelement

Add VscdcRemedialActionElement to RAS memory model

append_ras

Use this API to read a Contingency Definition and Remedial Actions auxiliary file, adding to definitions in memory, if present.

read_ras

Use this API to read a Contingency Definition and Remedial Actions auxiliary file into memory.

validate_ras

Use this API to validate Contingency and Remedial Actions definitions in memory.

write_ras

Use this API to write a Contingency Definition and Remedial Actions auxiliary file from memory.

Previous topic
psspy.treedat

Next topic
psspy.accc_ras

Quick search
indexmodules |next |previous |Home | psspy »Using The Vendor Neutral Contingency And Ras Auxiliary File
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Non-Engineering
Non-Engineering
Release
35.6.0

Date
July 12, 2023

alert

Use this API to send output to the alert device.

appendrecording

Start recording program operation at end of specified file.

beginreport

Use this API to create a new report tab in the GUI.

clearalertoutput

Clear the Alerts/Warnings tab of the output bar in the GUI

clearprogressoutput

Clear the Progress tab of the output bar in the GUI

filein

Get input from file (Fortran unit number).

getbatdefaults

Retrieve “no input” value for integers and reals.

getdefaultchar

Retrieve “no input” value for characters (i.e., strings) other than filenames.

getdefaultint

Retrieve “no input” value for integers.

getdefaultreal

Retrieve “no input” value for reals (floats).

getloadedmodules

get list of all modules currently loaded

getmodfunclist

Get list if external callable methods given a module name.

ioflush

Force all files in PSSE to flush buffers to disk, if possible.

launch_program

This API routine was first introduced in release 34.1.0.

pagereport

Use this API to place a report separator on the active report tab of the GUI.

pauserecording

Pause or resume recording program operation.

progress

Send output to progress device.

prompt

Send output to prompt device.

psseinit

Initialize PSSE.

psseversion

Get PSSE version information.

refreshgui

Refresh the graphical user interface.

report

Send output to report device.

runiplanfile

Execute an IPLAN program.

runrspnsfile

Run a response file.

showloadedlibraries

showloadedmodules

startrecording

Start recording program operation.

stoprecording

Stop recording program operation.

t_alert_output

Use this API to specify a “T“‘d alert device, i.e. a destination for a copy of everything sent to the alert device.

t_progress_output

Use this API to specify a “T“‘d progress device, i.e. a destination for a copy of everything sent to the progress device.

t_prompt_output

Use this API to specify a “T“‘d prompt device, i.e. a destination for a copy of everything sent to the prompt device.

t_report_output

Use this API to specify a “T“‘d report device, i.e. a destination for a copy of everything sent to the report device.

userin

Get input from interactive device.

Previous topic
psspy.write_ras

Next topic
psspy.alert

Quick search
indexmodules |next |previous |Home | psspy »Non-Engineering
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.

PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_multiple_merge
psspy.accc_multiple_merge
accc_multiple_merge(option=None, nfiles=None, acfiles=None, accfile=None, **kwds)
Use this API to merge a number of AC contingency solution files (acc files) into one acc file. The acc files must be based on the same base case and MON file.

This API routine was first introduced in release 34.0.0.

Python syntax:
ierr = accc_multiple_merge(option, nfiles, acfiles, accfile)

Parameters
OPTION (integer) – Options for merging acc files. (input).

NFILES (integer) – The number of contingency acc files to be merged. . (input).

ACFILES (character*260) – An array of nfiles elements specifying An array of names of acc files. . (input).

ACCFILE (character*260) – The name of the merged contingency acc file. . (input).

IERR (integer) – Error code. (output).

The argument OPTION allowed values are as follows:

= 0

Do not merge .acc files if some .acc files have different solving options, sub files or .mon files.

= 1

Merge the.acc files even if some .acc files have different solving options, sub files or .mon files.

The possible error code values are as follows:

= 0

no error occured.

= 1

invalid OPTION value.

= 2

invalid NFILES value.

= 3

error opening a Contingency Solution Output File.

= 4

file is not in the form of a current Contingency Solution Output File.

= 5

some input .acc files have different information (.sav, .sub, .mon, PSSE version, solution options).

= 6

error reading or writing Contingency Solution Output file.

= 7

error reading a Contingency Solution Output File.

= 8

error closing a Contingency Solution Output file.

= 9

Prerequisite requirements for function not met.

Notes:

Batch command syntax:
BAT_ACCC_MULTIPLE_MERGE OPTION NFILES ACFILES(1)..ACFILES(NFILES) ACCFILE

Fortran command syntax:
CALL ACCC_MULTIPLE_MERGE(OPTION, NFILES, ACFILES, ACCFILE, IERR)

Previous topic
psspy.accc_2

Next topic
psspy.accc_multiple_run_report

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_multiple_merge
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_multiple_run_report_2
psspy.accc_multiple_run_report_2
accc_multiple_run_report_2(options=None, values=None, nfiles=None, acfiles=None, **kwds)
Use this API to report the results of up to twenty two executions of the AC Contingency Calculation function.

This API routine was first introduced in release 33.2.0.

Python syntax:
ierr = accc_multiple_run_report_2(options, values, nfiles, acfiles)

Parameters
OPTIONS (integer) – An array of sixteen elements specifying defining reporting options. (input).

VALUES (real) – An array of seven elements specifying reporting parameters. (input).

NFILES (integer) – Number of contingency solution output files to be processed (1 through 9). (input; no default allowed).

ACFILES (character*260) – An array of NFILES elements specifying NFILES names of Contingency Solution Output Files. (input; no default allowed).

IERR (integer) – Error code. (output).

The argument OPTIONS values are as follows:

OPTIONS(1)

column headings code (1 by default).

= 1

Contingency Solution Output File names.

= 2

Saved Case File names as contained in the Contingency Solution Output Files.

OPTIONS(2)

base case rating set (rating set program option setting by default).

= 1

rate A.

= 2

rate B.

= 3

rate C.

OPTIONS(3)

contingency case rating set (rating set program option setting by default).

= 1

rate A.

= 2

rate B.

= 3

rate C.

OPTIONS(4)

base case voltage limit when STATUS(1) is 0, 1, 3 or 4.

= 1

normal limit.

= 2

emergency limit.

OPTIONS(5)

contingency case voltage limit when STATUS(1) is 0, 1, 3 or 4.

= 1

normal limit.

= 2

emergency limit.

OPTIONS(6)

print monitored elements summary report (0 by default).

= 0

no.

= 1

yes.

OPTIONS(7)

print missing monitored elements report (0 by default).

= 0

no.

= 1

yes.

OPTIONS(8)

print missing monitored voltage buses report (0 by default).

= 0

no.

= 1

yes.

OPTIONS(9)

print contingency legend (2 by default).

= 0

no.

= 1

complete master legend report only.

= 2

reduced legend with each table.

= 3

both master legend report and legend with each table.

OPTIONS(10)

print missing contingencies report (0 by default).

= 0

no.

= 1

yes.

OPTIONS(11)

print non-converged contingencies report (0 by default).

= 0

no.

= 1

yes.

OPTIONS(12)

print loading violation reports (0 by default).

= 0

no.

= 1

base case and worst case contingency violations only.

= 2

base case and all contingency violations only.

= 3

base case, worst case contingency, and all contingency violations.

OPTIONS(13)

print voltage violation reports (0 by default).

= 0

no.

= 1

base case and worst case contingency violations only.

= 2

base case and all contingency violations only.

= 3

base case, worst case contingency, and all contingency violations.

OPTIONS(14)

option for processing interfaces in loading violation reports (1 by default).

= 0

exclude interfaces from loading violation checking and reporting.

= 1

check and report interface loading violations.

OPTIONS(15)

in loading violation reports, exclude monitored branches and interfaces that show loading violations in the base case from being checked and reported in contingency case reports (0 by default).

= 0

no.

= 1

yes.

OPTIONS(16)

in voltage range violation reports, exclude monitored buses that show voltage range violations in the base case from the corresponding check in contingency case reports (0 by default).

= 0

no.

= 1

yes.

The argument VALUES values are as follows:

VALUES(1)

bus mismatch converged tolerance (MW or Mvar) (0.5 by default).

VALUES(2)

system mismatch converged tolerance (MVA) (5.0 by default).

VALUES(3)

in loading violation reports, percent of flow rating for reporting (100.0 by default).

VALUES(4)

in the worst case contingency loading violation reports, percent of flow rating for counting (> VALUES(3)) (100.0 by default).

VALUES(5)

in loading violation reports, minimum contingency case flow change from base case value for reporting and counting (0.0 by default).

VALUES(6)

in loading violation reports, minimum contingency case percent loading increase from base case value for reporting and counting (0.0 by default).

VALUES(7)

minimum contingency case voltage change for reporting and counting in voltage range violations (0.0 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid OPTIONS value.

= 2

invalid VALUES value.

= 3

invalid NFILES value.

= 4

the percent for counting is less than the percent for reporting.

= 5

file is not in the form of a current Contingency Solution Output File.

= 6

error opening a Contingency Solution Output File.

= 7

error reading a Contingency Solution Output File.

= 8

error opening a temporary file.

= 9

error opening a subfile in the temporary file.

= 10

error reading or writing the temporary file.

= 11

error closing a subfile in the temporary file.

= 12

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ACCC_MULTIPLE_RUN_REPORT_2 OPTIONS(1)..OPTIONS(16) VALUES(1)..VALUES(7) NFILES ACFILES(1)..ACFILES(NFILES)

Fortran command syntax:
CALL ACCC_MULTIPLE_RUN_REPORT_2(OPTIONS, VALUES, NFILES, ACFILES, IERR)

Previous topic
psspy.accc_multiple_run_report

Next topic
psspy.accc_parallel

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_multiple_run_report_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_parallel_2
psspy.accc_parallel_2
accc_parallel_2(tol=None, optacc=None, label=None, dfxfile=None, accfile=None, thrfile=None, inlfile=None, zipfile=None, **kwds)
Use this API routine to run the second release of the parallel implementation of the AC contingency calculation function (use ACCC_WITH_DSP_3 to run AC contingency calculation function serially). The API routine distributes contingency cases among multiple processors evenly, and tests the contingency cases assigned to each processor in parallel.

This API routine was first introduced in release 33.4.0.

Python syntax:
ierr = accc_parallel_2(tol, optacc, label, dfxfile, accfile, thrfile, inlfile, zipfile)

Parameters
TOL (real) – Is the mismatch tolerance. (input; Newton solution convergence tolerance, TOLN, by default).

OPTACC (integer) – An array of 11 elements specifying solution options. The values are as follows:. (input).

LABEL (character*32) – Is the name of the generation dispatch subsystem (blank by default, no default allowed if options(10) is not 0). (input).

DFXFILE (character*260) – Is the name of the distribution factor data file. (input).

ACCFILE (character*260) – Is the name of the contingency solution output file. (input).

THRFILE (character*260) – Is the name of the load throwover data file. (input).

INLFILE (character*260) – Is the name of the unit inertia and governor data file. (input).

ZIPFILE (character*260) – Is the name of the zip archive output file. (input).

IERR (integer) – None. (output).

The argument OPTACC values are as follows:

OPTACC(1)

tap adjustment flag (tap adjustment option setting by default).

= 0

disable.

= 1

enable stepping adjustment.

= 2

enable direct adjustment.

OPTACC(2)

area interchange adjustment flag (area interchange adjustment option setting by default).

= 0

disable.

= 1

enable using tie line flows only in calculating area interchange.

= 2

enable using tie line flows and loads in calculating area interchange.

OPTACC(3)

phase shift adjustment flag (phase shift adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(4)

dc tap adjustment flag (dc tap adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(5)

switched shunt adjustment flag (switched shunt adjustment option setting by default).

= 0

disable.

= 1

enable.

= 2

enable continuous mode, disable discrete mode.

OPTACC(6)

solution method flag (0 by default).

= 0

FDNS.

= 1

FNSL.

= 2

optimized FDNS.

OPTACC(7)

non-divergent solution flag (non-divergent solution option setting by default).

= 0

disable.

= 1

enable.

OPTACC(8)

induction motor treatment flag (applied when an induction motor fails to solve due to low terminal bus voltage) (0 by default).

= 0

stall.

= 1

trip.

OPTACC(9)

induction machine failure flag (0 by default).

= 0

treat contingency as non-converged if any induction machines are placed in the “stalled” or “tripped” state.

= 1

treat contingency as solved if it converges, even if any induction machines are placed in the “stalled” or “tripped” state.

OPTACC(10)

dispatch mode (0 by default).

= 0

disable.

= 1

subsystem machines (reserve).

= 2

subsystem machines (pmax).

= 3

subsystem machines (inertia).

= 4

subsystem machines (governor droop).

OPTACC(11)

ZIP archive flag (0 by default).

= 0

do not write a ZIP archive file.

= 1

write a ZIP archive using the file specified as ZIPFILE.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid TOL value.

= 2

invalid OPTIONS value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

generation dispatch subsystem is not defined.

= 7

too many islands in base case.

= 8

no Distribution Factor Data File specified.

= 9

no Contingency Solution Output File specified.

= 10

in-service induction machines are in the “stalled” or “tripped” state.

= 11

buses with bus type code and series element status inconsistencies.

= 12

no ZIP Archive Output File specified.

= 21

file DFXFILE is not in the form of a PSSE 25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening Load Throwover Data File.

= 54

error opening Unit Inertia and Governor Data File.

= 55

error opening ZIP Archive Output File.

= 56

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ACCC_PARALLEL_2 TOL OPTACC(1)..OPTACC(11) LABEL DFXFILE ACCFILE THRFILE INLFILE ZIPFILE

Fortran command syntax:
CALL ACCC_PARALLEL_2(TOL, OPTACC, LABEL, DFXFILE, ACCFILE, THRFILE, INLFILE, ZIPFILE, IERR)

Previous topic
psspy.accc_parallel

Next topic
psspy.accc_single_run_report

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_parallel_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_single_run_report_6
psspy.accc_single_run_report_6
accc_single_run_report_6(status=None, intval=None, realval=None, chaval=None, rfile=None, **kwds)
This API is the sixth release of the AC Contingency Report function. Use this API to report the results of the AC Contingency Calculation function.

This API routine was first introduced in release 35.4.0.

Python syntax:
ierr = accc_single_run_report_6(status, intval, realval, chaval, rfile)

Parameters
STATUS (integer) – An array of fifteen elementsNone. (input).

INTVAL (integer) – An array of five elementsNone. (input).

REALVAL (real) – An array of eight elementsNone. (input).

CHAVAL (character*80) – An array of 1 elements specifying Selected Contingency Category label for the ACCC report. . (input).

RFILE (character*260) – Contingency solution output file. (input; no default allowed).

IERR (integer) – Error code. (output).

The argument STATUS values are as follows:

STATUS(1)

report format (3 by default).

= 0

spreadsheet overload report.

= 1

spreadsheet loading table.

= 2

available capacity table.

= 3

non-spreadsheet overload report.

= 4

non-spreadsheet loading table.

= 5

non-converged networks report.

= 6

non-spreadsheet corrective actions report.

STATUS(2)

base case branch rating set; used only when STATUS(1) is 0, 1, 3 or 4 (rating set program option setting by default).

= 1

rate 1.

= 2

rate 2.

= 3

rate 3.

= 4

rate 4.

= 5

rate 5.

= 6

rate 6.

= 7

rate 7.

= 8

rate 8.

= 9

rate 9.

= 10

rate 10.

= 11

rate 11.

= 12

rate 12.

STATUS(3)

contingency case branch rating set when STATUS(1) is 0, 1, 3 or 4; base case and contingency case rating set when STATUS(1) is 2 (rating set program option setting by default).

= 1

rate 1.

= 2

rate 2.

= 3

rate 3.

= 4

rate 4.

= 5

rate 5.

= 6

rate 6.

= 7

rate 7.

= 8

rate 8.

= 9

rate 9.

= 10

rate 10.

= 11

rate 11.

= 12

rate 12.

STATUS(4)

base case SWD rating set; used only when STATUS(1) is 0, 1, 3 or 4 (rating set program option setting by default).

= 1

rate 1.

= 2

rate 2.

= 3

rate 3.

STATUS(5)

contingency case SWD rating set when STATUS(1) is 0, 1, 3 or 4; base case and contingency case rating set when STATUS(1) is 2 (rating set program option setting by default).

= 1

rate 1.

= 2

rate 2.

= 3

rate 3.

STATUS(6)

base case voltage limit when STATUS(1) is 0, 1, 3 or 4.

= 1

normal limit.

= 2

emergency limit.

STATUS(7)

contingency case voltage limit when STATUS(1) is 0, 1, 3 or 4.

= 1

normal limit.

= 2

emergency limit.

STATUS(8)

exclude interfaces from report; used only when STATUS(1) is 0, 1, 2, 3, 4 (0 by default).

= 0

no.

= 1

yes.

STATUS(9)

run voltage limit check; used only when STATUS(1) is 0, 1, 3, 4 (0 by default).

= 0

no.

= 1

yes.

STATUS(10)

in overload reports, exclude monitored branches and interfaces that show loading violations in the base case from being checked and reported in contingency cases; used only when STATUS(1) is 0 or 3 (0 by default).

= 0

no.

= 1

yes.

STATUS(11)

in voltage range violation reports, exclude monitored buses that show voltage range violations in the base case from the corresponding check in contingency case reports; used only when STATUS(1) is 0 or 3 (0 by default).

= 0

no.

= 1

yes.

STATUS(12)

exclude cases with no overloads from non-spreadsheet overload report or non-spreadsheet corrective actions report; used only when STATUS(1) is 3 (0 by default).

= 0

no.

= 1

yes.

STATUS(13)

report post-tripping action solutions (0 by default).

= 0

no.

= 1

yes.

STATUS(14)

report loss of loads (0 by default).

= 0

no.

= 1

yes.

STATUS(15)

run angle difference report; used only when STATUS(1) is 0, 1, 3, 4 (0 by default).

= 0

no.

= 1

yes.

The argument INTVAL values are as follows:

INTVAL(1)

number of low voltage range violations filtering criterion (0 by default).

INTVAL(2)

number of high voltage range violations filtering criterion (0 by default).

INTVAL(3)

number of voltage deviation violations filtering criterion; not applied to base case (0 by default).

INTVAL(4)

number of buses in the largest disconnected island filtering criterion; not applied to base case (0 by default).

INTVAL(5)

maximum number of elements in the available capacity table (no limit by default).

The argument REALVAL values are as follows:

REALVAL(1)

bus mismatch converged tolerance (MW or Mvar) (0.5 by default).

REALVAL(2)

system mismatch converged tolerance (MVA) (5.0 by default).

REALVAL(3)

percent of flow rating; used only when STATUS(1) is 0, 3 or 4 (100.0 by default).

REALVAL(4)

in overload reports, minimum contingency case flow change from base case value; used only when STATUS(1) is 0 or 3 (0.0 by default).

REALVAL(5)

in overload reports, minimum contingency case percent loading increase from base case value; used only when STATUS(1) is 0 or 3 (0.0 by default).

REALVAL(6)

in voltage range violation reports, minimum contingency case voltage change from base case value; used only when STATUS(1) is 0, 1, 3 or 4 (0.0 by default).

REALVAL(7)

cutoff threshold for available capacity table; used only when STATUS(1) is 2 (99999.0 by default).

REALVAL(8)

in angle difference report, cutoff threshold for angle differences, used only when STATUS(1) is 0, 1, 3 or 4 (0.0 by default).

The argument CHAVAL values are as follows:

CHAVAL(1)

Selected Contingency Category label (blank by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid STATUS value.

= 2

invalid INTVAL value.

= 3

invalid REALVAL value.

= 4

error opening RFILE.

= 5

error reading RFILE.

= 6

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ACCC_SINGLE_RUN_REPORT_6 STATUS(1)..STATUS(15) INTVAL(1)..INTVAL(5) REALVAL(1)..REALVAL(8) CHAVAL RFILE

Fortran command syntax:
CALL ACCC_SINGLE_RUN_REPORT_6(STATUS, INTVAL, REALVAL, CHAVAL, RFILE, IERR)

Previous topic
psspy.accc_single_run_report_5

Next topic
psspy.accc_trip_cor

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_single_run_report_6
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_trip_cor_3
psspy.accc_trip_cor_3
accc_trip_cor_3(tol=None, optacc=None, opttrp=None, optcor=None, values=None, labels=None, dfxfile=None, accfile=None, thrfile=None, inlfile=None, trpfile=None, **kwds)
This API is the third release of the function to run AC contingency analysis with tripping simulation and corrective actions. Following a post contingency solution, trip events are simulated if their tripping conditions are satisfied. Corrective actions are then specified automatically to eliminate the violations in each post tripping solution with the objective of minimizing the control adjustments including load shedding, MW generation dispatch, phase shifter angle adjustments, off-line generator controls, tap setting adjustments and switched shunt controls. Please note that flows are checked against rating set program option setting and 100.0 percent of the rating to determine flow overload violations.

This API routine was first introduced in release 33.0.0.

Python syntax:
ierr = accc_trip_cor_3(tol, optacc, opttrp, optcor, values, labels, dfxfile, accfile, thrfile, inlfile, trpfile)

Parameters
TOL (real) – Mismatch tolerance. (input; Newton solution convergence tolerance, TOLN, by default).

OPTACC (integer) – An array of ten elements specifying power flow solution. (input).

OPTTRP (integer) – An array of three elements specifying tripping simulation options. (input).

OPTCOR (integer) – An array of eight elements specifying corrective actions options. (input).

VALUES (real) – An array of eight elements specifying corrective actions parameters. (input).

LABELS (character*32) – An array of seven elements specifying subsystem labels. (input).

DFXFILE (character*260) – Name of distribution factor data file. (input; no default allowed).

ACCFILE (character*260) – Name of contingency solution output file. (input; no default allowed).

THRFILE (character*260) – Name of load throwover data file. (input; blank for none).

INLFILE (character*260) – Name of unit inertia data file. (input; blank for none).

TRPFILE (character*260) – Name of tripping element data file. (input; blank for none; no default allowed if OPTTRP(1) is 1).

IERR (integer) – Error code. (output).

The argument OPTACC values are as follows:

OPTACC(1)

tap adjustment flag (tap adjustment option setting by default).

= 0

disable.

= 1

enable stepping adjustment.

= 2

enable direct adjustment.

OPTACC(2)

area interchange adjustment flag (area interchange adjustment option setting by default).

= 0

disable.

= 1

enable using tie line flows only in calculating area interchange.

= 2

enable using tie line flows and loads in calculating area interchange.

OPTACC(3)

phase shift adjustment flag (phase shift adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(4)

dc tap adjustment flag (dc tap adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(5)

switched shunt adjustment flag (switched shunt adjustment option setting by default).

= 0

disable.

= 1

enable.

= 2

enable continuous, disable discrete.

OPTACC(6)

solution method flag (0 by default).

= 0

FDNS.

= 1

FNSL.

= 2

optimized FDNS.

OPTACC(7)

non-divergent solution flag (non-divergent solution option setting by default).

= 0

disable.

= 1

enable.

OPTACC(8)

induction motor treatment flag (applied when an induction motor fails to solve due to low terminal bus voltage, 0, by default).

= 0

stall.

= 1

trip.

OPTACC(9)

induction machine failure flag (0 by default).

= 0

treat contingency as non-converged if any induction machines are placed in the “stalled” or “tripped” state.

= 1

treat contingency as solved if it converges, even if any induction machines are placed in the “stalled” or “tripped” state.

OPTACC(10)

dispatch mode (0 by default).

= 0

disable.

= 1

subsystem machines (RESERVE).

= 2

subsystem machines (PMAX).

= 3

subsystem machines (INERTIA).

= 4

subsystem machines (GOVERNOR DROOP).

The argument OPTTRP values are as follows:

OPTTRP(1)

tripping simulation flag (0 by default).

= 0

disable.

= 1

enable tripping simulation.

OPTTRP(2)

number of tripping events per power flow (1 by default).

OPTTRP(3)

number of power flows per contingency (1 by default).

The argument OPTCOR values are as follows:

OPTCOR(1)

run corrective action (0 by default).

= 0

disable.

= 1

enable.

OPTCOR(2)

number of power flow solutions (1 by default).

OPTCOR(3)

generator control flag (1 by default).

= 0

disable.

= 1

enable.

OPTCOR(4)

load control flag (0 by default).

= 0

disable.

= 1

enable.

OPTCOR(5)

phase shifter control flag (1 by default).

= 0

disable.

= 1

enable.

OPTCOR(6)

off-line generator control flag (0 by default).

= 0

disable.

= 1

enable.

OPTCOR(7)

tap setting adjustment flag (0 by default).

= 0

disable.

= 1

enable.

OPTCOR(8)

switched shunt control flag (0 by default).

= 0

disable.

= 1

enable.

The argument VALUES values are as follows:

VALUES(1)

bus voltage violation tolerance (0.1 by default).

VALUES(2)

branch overload violation tolerance (0.1 by default).

VALUES(3)

generator control weighting factor (1.0 by default).

VALUES(4)

load control weighting factor (1.0 by default).

VALUES(5)

phase shifter control weighting factor (1.0 by default).

VALUES(6)

off-line generator control weighting factor (1.0 by default).

VALUES(7)

tap setting adjustment weighting factor (1.0 by default).

VALUES(8)

switched shunt control weighting factor (1.0 by default).

The argument LABELS values are as follows:

LABELS(1)

label of generation dispatch subsystem (blank by default, no default allowed if OPTACC(8) is not 0).

LABELS(2)

label of generator control subsystem (blank by default, no default allowed if OPTCOR(3) is 1).

LABELS(3)

label of load control subsystem (blank by default, no default allowed if OPTCOR(4) is 1).

LABELS(4)

label of phase shifter control subsystem (blank by default, no default allowed if OPTCOR(5) is 1).

LABELS(5)

off-line generator control subsystem (blank by default; no default allowed if OPTCOR(6) is 1).

LABELS(6)

tap setting adjustment subsystem (blank by default; no default allowed if OPTCOR(7) is 1).

LABELS(7)

switched shunt control subsystem (blank by default; no default allowed if OPTCOR(8) is 1).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid TOL value.

= 2

invalid OPTACC value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

generation subsystem is not defined.

= 7

too many islands in base case.

= 8

in-service induction machines are in the “stalled” or “tripped” state.

= 9

buses with bus type code and series element status inconsistencies.

= 10

invalid OPTTRP value.

= 11

invalid OPTCOR value.

= 12

invalid VALUES value.

= 21

file DFXFILE is not in the form of a PSSE-25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multisection line members.

= 49

error opening Tripping Element Data File.

= 50

error opening Unit Inertia Data File.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening Load Throwover Data File.

= 54

prerequisite requirements for function not met.

Notes:

Batch command syntax:
BAT_ACCC_TRIP_COR_3 TOL OPTACC(1)..OPTACC(10) OPTTRP(1)..OPTTRP(3) OPTCOR(1)..OPTCOR(8) VALUES(1)..VALUES(8) LABELS(1)..LABELS(7) DFXFILE ACCFILE THRFILE INLFILE TRPFILE

Fortran command syntax:
CALL ACCC_TRIP_COR_3(TOL, OPTACC, OPTTRP, OPTCOR, VALUES, LABELS, DFXFILE, ACCFILE, THRFILE, INLFILE, TRPFILE, IERR)

Previous topic
psspy.accc_trip_cor_2

Next topic
psspy.accc_with_cor

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_trip_cor_3
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_dsp_3
psspy.accc_with_dsp_3
accc_with_dsp_3(tol=None, optacc=None, label=None, dfxfile=None, accfile=None, thrfile=None, inlfile=None, zipfile=None, **kwds)
Use this API to run the second release of AC contingency calculation function (ACCC, ACCC_WITH_DSP). The API provides the options to handle induction machines in a contingency analysis.

This API routine was first introduced in release 33.4.0.

Python syntax:
ierr = accc_with_dsp_3(tol, optacc, label, dfxfile, accfile, thrfile, inlfile, zipfile)

Parameters
TOL (real) – Is the mismatch tolerance. (input; Newton solution convergence tolerance, TOLN, by default).

OPTACC (integer) – An array of 11 elements specifying solution options. The values are as follows:. (input).

LABEL (character*32) – Is the name of the generation dispatch subsystem (blank by default, no default allowed if options(10) is not 0). (input).

DFXFILE (character*260) – Is the name of the distribution factor data file. (input).

ACCFILE (character*260) – Is the name of the contingency solution output file. (input).

THRFILE (character*260) – Is the name of the load throwover data file. (input).

INLFILE (character*260) – Is the name of the unit inertia and governor data file. (input).

ZIPFILE (character*260) – Is the name of the zip archive output file. (input).

IERR (integer) – Is the error code. (output).

The argument OPTACC values are as follows:

OPTACC(1)

tap adjustment flag (tap adjustment option setting by default).

= 0

disable.

= 1

enable stepping adjustment.

= 2

enable direct adjustment.

OPTACC(2)

area interchange adjustment flag (area interchange adjustment option setting by default).

= 0

disable.

= 1

enable using tie line flows only in calculating area interchange.

= 2

enable using tie line flows and loads in calculating area interchange.

OPTACC(3)

phase shift adjustment flag (phase shift adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(4)

dc tap adjustment flag (dc tap adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(5)

switched shunt adjustment flag (switched shunt adjustment option setting by default).

= 0

disable.

= 1

enable.

= 2

enable continuous mode, disable discrete mode.

OPTACC(6)

solution method flag (0 by default).

= 0

FDNS.

= 1

FNSL.

= 2

optimized FDNS.

OPTACC(7)

non-divergent solution flag (non-divergent solution option setting by default).

= 0

disable.

= 1

enable.

OPTACC(8)

induction motor treatment flag (applied when an induction motor fails to solve due to low terminal bus voltage).

= 0

stall.

= 1

trip.

OPTACC(9)

induction machine failure flag (0 by default).

= 0

treat contingency as non-converged if any induction machines are placed in the “stalled” or “tripped” state.

= 1

treat contingency as solved if it converges, even if any induction machines are placed in the “stalled” or “tripped” state.

OPTACC(10)

dispatch mode (0 by default).

= 0

disable.

= 1

subsystem machines (reserve).

= 2

subsystem machines (pmax).

= 3

subsystem machines (inertia).

= 4

subsystem machines (governor droop).

OPTACC(11)

ZIP archive flag (0 by default).

= 0

do not write a ZIP archive file.

= 1

write a ZIP archive using the file specified as ZIPFILE.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid TOL value.

= 2

invalid OPTIONS value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

generation dispatch subsystem is not defined.

= 7

too many islands in base case.

= 8

no Distribution Factor Data File specified.

= 9

no AC Contingency Solution Output File specified.

= 10

in-service induction machines are in the “stalled” or “tripped” state.

= 11

buses with bus type code and series element status inconsistencies.

= 12

no ZIP Archive Output File specified.

= 21

file DFXFILE is not in the form of a PSSE 25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening Load Throwover Data File.

= 54

error opening Unit Inertia and Governor Data File.

= 55

error opening ZIP Archive Output File.

= 56

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ACCC_WITH_DSP_3 TOL OPTACC(1)..OPTACC(11) LABEL DFXFILE ACCFILE THRFILE INLFILE ZIPFILE

Fortran command syntax:
CALL ACCC_WITH_DSP_3(TOL, OPTACC, LABEL, DFXFILE, ACCFILE, THRFILE, INLFILE, ZIPFILE, IERR)

Previous topic
psspy.accc_with_dsp_2

Next topic
psspy.accc_with_trip

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_dsp_3
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_trip_2
psspy.accc_with_trip_2
accc_with_trip_2(tol=None, optacc=None, opttrp=None, label=None, dfxfile=None, accfile=None, thrfile=None, inlfile=None, trpfile=None, **kwds)
Use this API to run the second version of AC contingency calculation function with a post- contingency tripping function. This may be used, for example, to simulate switchings that occur when specified monitored quantities are beyond threshold values.

This API routine was first introduced in release 33.0.0.

Python syntax:
ierr = accc_with_trip_2(tol, optacc, opttrp, label, dfxfile, accfile, thrfile, inlfile, trpfile)

Parameters
TOL (real) – Mismatch tolerance. (input; Newton solution convergence tolerance, TOLN, by default).

OPTACC (integer) – An array of ten elements specifying power flow solution options. (input).

OPTTRP (integer) – An array of three elements specifying tripping simulation options. (input).

LABEL (character*32) – Name of the generation dispatch subsystem. (input; blank by default; no default allowed if OPTACC(8) is not 0).

DFXFILE (character*260) – Name of the distribution factor data file. (input; no default allowed).

ACCFILE (character*260) – Name of the contingency solution output file. (input; no default allowed).

THRFILE (character*260) – Name of the load throwover data file. (input; blank by default).

INLFILE (character*260) – Name of the unit inertia and governor data file. (input; blank by default).

TRPFILE (character*260) – Name of the tripping element data file. (input; blank for none; no default allowed if OPTTRP(1) is 1).

IERR (integer) – Error code. (output).

The argument OPTACC values are as follows:

OPTACC(1)

tap adjustment flag (tap adjustment option setting by default).

= 0

disable.

= 1

enable stepping adjustment.

= 2

enable direct adjustment.

OPTACC(2)

area interchange adjustment flag (area interchange adjustment option setting by default).

= 0

disable.

= 1

enable using tie line flows only in calculating area interchange.

= 2

enable using tie line flows and loads in calculating area interchange.

OPTACC(3)

phase shift adjustment flag (phase shift adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(4)

dc tap adjustment flag (dc tap adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(5)

switched shunt adjustment flag (switched shunt adjustment option setting by default).

= 0

disable.

= 1

enable.

= 2

enable continuous mode, disable discrete mode.

OPTACC(6)

solution method flag (0 by default).

= 0

FDNS.

= 1

FNSL.

= 2

optimized FDNS.

OPTACC(7)

non-divergent solution flag (non-divergent solution option setting by default).

= 0

disable.

= 1

enable.

OPTACC(8)

induction motor treatment flag (applied when an induction motor fails to solve due to low terminal bus voltage, 0, by default).

= 0

stall.

= 1

trip.

OPTACC(9)

induction machine failure flag (0 by default).

= 0

treat contingency as non-converged if any induction machines are placed in the “stalled” or “tripped” state.

= 1

treat contingency as solved if it converges, even if any induction machines are placed in the “stalled” or “tripped” state.

OPTACC(10)

dispatch mode (0 by default).

= 0

disable.

= 1

subsystem machines (reserve).

= 2

subsystem machines (pmax).

= 3

subsystem machines (inertia).

= 4

subsystem machines (governor droop).

The argument OPTTRP values are as follows:

OPTTRP(1)

tripping simulation flag (0 by default).

= 0

disable.

= 1

enable tripping simulation.

OPTTRP(2)

number of tripping events per power flow (1 by default).

OPTTRP(3)

number of power flows per contingency (1 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid TOL value.

= 2

invalid OPTACC value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

generation subsystem is not defined.

= 7

too many islands in base case.

= 8

in-service induction machines are in the “stalled” or “tripped” state.

= 9

buses with bus type code and series element status inconsistencies.

= 10

Invalid OPTTRP value.

= 21

file DFXFILE is not in the form of a PSSE-25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-sec-tion line members.

= 49

error opening Tripping Element Data File.

= 50

error opening Unit Inertia and Governor Data File.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening Load Throwover Data File.

= 54

prerequisite requirements for function not met.

Notes:

Batch command syntax:
BAT_ACCC_WITH_TRIP_2 TOL OPTACC(1)..OPTACC(10) OPTTRP(1)..OPTTRP(3) LABEL DFXFILE ACCFILE THRFILE INLFILE TRPFILE

Fortran command syntax:
CALL ACCC_WITH_TRIP_2(TOL, OPTACC, OPTTRP, LABEL, DFXFILE, ACCFILE, THRFILE, INLFILE, TRPFILE, IERR)

Previous topic
psspy.accc_with_trip

Next topic
psspy.accc_with_trip_parallel

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_trip_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_trip_parallel
psspy.accc_with_trip_parallel
accc_with_trip_parallel(tol=None, optacc=None, opttrp=None, label=None, dfxfile=None, accfile=None, thrfile=None, inlfile=None, trpfile=None, **kwds)
Use this API to run the parallel version of AC contingency calculation function with a post- contingency tripping function (use ACCC_WITH_TRIP_2 to run the function sequentially). The API distributes contingency cases among multiple processors evenly, and tests the contingency cases and following tripping actions assigned to each processor in parallel.

This API routine was first introduced in release 33.4.0.

Python syntax:
ierr = accc_with_trip_parallel(tol, optacc, opttrp, label, dfxfile, accfile, thrfile, inlfile, trpfile)

Parameters
TOL (real) – Is the mismatch tolerance. (input; Newton solution convergence tolerance, TOLN, by default).

OPTACC (integer) – An array of 10 elements specifying power flow solution options. The values are as follows:. (input).

OPTTRP (integer) – An array of 3 elements specifying tripping simulation options. The values are as follows:. (input).

LABEL (character*32) – Is the name of the generation dispatch subsystem (blank by default; no default allowed if optacc(8) is not 0). (input).

DFXFILE (character*260) – Is the name of the distribution factor data file. (input).

ACCFILE (character*260) – Is the name of the contingency solution output file. (input).

THRFILE (character*260) – Is the name of the load throwover data file. (input).

INLFILE (character*260) – Is the name of the unit inertia and governor data file. (input).

TRPFILE (character*260) – Is the name of the tripping element data file (input, blank for none; no default allowed if opttrp(1) is 1). (input).

IERR (integer) – Is the error code. . (output).

The argument OPTACC values are as follows:

OPTACC(1)

tap adjustment flag (tap adjustment option setting by default).

= 0

disable.

= 1

enable stepping adjustment.

= 2

enable direct adjustment.

OPTACC(2)

area interchange adjustment flag (area interchange adjustment option setting by default).

= 0

disable.

= 1

enable using tie line flows only in calculating area interchange.

= 2

enable using tie line flows and loads in calculating area interchange.

OPTACC(3)

phase shift adjustment flag (phase shift adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(4)

dc tap adjustment flag (dc tap adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(5)

switched shunt adjustment flag (switched shunt adjustment option setting by default).

= 0

disable.

= 1

enable.

= 2

enable continuous mode, disable discrete mode.

OPTACC(6)

solution method flag (0 by default).

= 0

FDNS.

= 1

FNSL.

= 2

optimized FDNS.

OPTACC(7)

non-divergent solution flag (non-divergent solution option setting by default).

= 0

disable.

= 1

enable.

OPTACC(8)

induction motor treatment flag (applied when an induction motor fails to solve due to low terminal bus voltage). (0 by default).

= 0

stall.

= 1

trip.

OPTACC(9)

induction machine failure flag. (0 by default).

= 0

treat contingency as non-converged if any induction machines are placed in the “stalled” or “tripped” state.

= 1

treat contingency as solved if it converges, even if any induction machines are placed in the “stalled” or “tripped” state.

OPTACC(10)

dispatch mode. (0 by default).

= 0

disable.

= 1

subsystem machines (reserve).

= 2

subsystem machines (pmax).

= 3

subsystem machines (inertia).

= 4

subsystem machines (governor droop).

The argument OPTTRP values are as follows:

OPTTRP(1)

tripping simulation flag (0 by default).

= 0

disable.

= 1

enable tripping simulation.

OPTTRP(2)

number of tripping events per power flow (1 by default).

OPTTRP(3)

number of power flows per contingency (1 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid TOL value.

= 2

invalid OPTACC value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

generation dispatch subsystem is not defined.

= 7

too many islands in base case.

= 8

in-service induction machines are in the “stalled” or “tripped” state.

= 9

buses with bus type code and series element status inconsistencies.

= 10

Invalid OPTTRP value.

= 21

file DFXFILE is not in the form of a PSSE 25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 49

error opening Tripping Element Data File.

= 50

error opening Unit Inertia and Governor Data File.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening Load Throwover Data File.

= 54

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ACCC_WITH_TRIP_PARALLEL TOL OPTACC(1)..OPTACC(10) OPTTRP(1)..OPTTRP(3) LABEL DFXFILE ACCFILE THRFILE INLFILE TRPFILE

Fortran command syntax:
CALL ACCC_WITH_TRIP_PARALLEL(TOL, OPTACC, OPTTRP, LABEL, DFXFILE, ACCFILE, THRFILE, INLFILE, TRPFILE, IERR)

Previous topic
psspy.accc_with_trip_2

Next topic
psspy.accor

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_trip_parallel
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_trip_parallel
psspy.accc_with_trip_parallel
accc_with_trip_parallel(tol=None, optacc=None, opttrp=None, label=None, dfxfile=None, accfile=None, thrfile=None, inlfile=None, trpfile=None, **kwds)
Use this API to run the parallel version of AC contingency calculation function with a post- contingency tripping function (use ACCC_WITH_TRIP_2 to run the function sequentially). The API distributes contingency cases among multiple processors evenly, and tests the contingency cases and following tripping actions assigned to each processor in parallel.

This API routine was first introduced in release 33.4.0.

Python syntax:
ierr = accc_with_trip_parallel(tol, optacc, opttrp, label, dfxfile, accfile, thrfile, inlfile, trpfile)

Parameters
TOL (real) – Is the mismatch tolerance. (input; Newton solution convergence tolerance, TOLN, by default).

OPTACC (integer) – An array of 10 elements specifying power flow solution options. The values are as follows:. (input).

OPTTRP (integer) – An array of 3 elements specifying tripping simulation options. The values are as follows:. (input).

LABEL (character*32) – Is the name of the generation dispatch subsystem (blank by default; no default allowed if optacc(8) is not 0). (input).

DFXFILE (character*260) – Is the name of the distribution factor data file. (input).

ACCFILE (character*260) – Is the name of the contingency solution output file. (input).

THRFILE (character*260) – Is the name of the load throwover data file. (input).

INLFILE (character*260) – Is the name of the unit inertia and governor data file. (input).

TRPFILE (character*260) – Is the name of the tripping element data file (input, blank for none; no default allowed if opttrp(1) is 1). (input).

IERR (integer) – Is the error code. . (output).

The argument OPTACC values are as follows:

OPTACC(1)

tap adjustment flag (tap adjustment option setting by default).

= 0

disable.

= 1

enable stepping adjustment.

= 2

enable direct adjustment.

OPTACC(2)

area interchange adjustment flag (area interchange adjustment option setting by default).

= 0

disable.

= 1

enable using tie line flows only in calculating area interchange.

= 2

enable using tie line flows and loads in calculating area interchange.

OPTACC(3)

phase shift adjustment flag (phase shift adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(4)

dc tap adjustment flag (dc tap adjustment option setting by default).

= 0

disable.

= 1

enable.

OPTACC(5)

switched shunt adjustment flag (switched shunt adjustment option setting by default).

= 0

disable.

= 1

enable.

= 2

enable continuous mode, disable discrete mode.

OPTACC(6)

solution method flag (0 by default).

= 0

FDNS.

= 1

FNSL.

= 2

optimized FDNS.

OPTACC(7)

non-divergent solution flag (non-divergent solution option setting by default).

= 0

disable.

= 1

enable.

OPTACC(8)

induction motor treatment flag (applied when an induction motor fails to solve due to low terminal bus voltage). (0 by default).

= 0

stall.

= 1

trip.

OPTACC(9)

induction machine failure flag. (0 by default).

= 0

treat contingency as non-converged if any induction machines are placed in the “stalled” or “tripped” state.

= 1

treat contingency as solved if it converges, even if any induction machines are placed in the “stalled” or “tripped” state.

OPTACC(10)

dispatch mode. (0 by default).

= 0

disable.

= 1

subsystem machines (reserve).

= 2

subsystem machines (pmax).

= 3

subsystem machines (inertia).

= 4

subsystem machines (governor droop).

The argument OPTTRP values are as follows:

OPTTRP(1)

tripping simulation flag (0 by default).

= 0

disable.

= 1

enable tripping simulation.

OPTTRP(2)

number of tripping events per power flow (1 by default).

OPTTRP(3)

number of power flows per contingency (1 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid TOL value.

= 2

invalid OPTACC value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

generation dispatch subsystem is not defined.

= 7

too many islands in base case.

= 8

in-service induction machines are in the “stalled” or “tripped” state.

= 9

buses with bus type code and series element status inconsistencies.

= 10

Invalid OPTTRP value.

= 21

file DFXFILE is not in the form of a PSSE 25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 49

error opening Tripping Element Data File.

= 50

error opening Unit Inertia and Governor Data File.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening Load Throwover Data File.

= 54

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ACCC_WITH_TRIP_PARALLEL TOL OPTACC(1)..OPTACC(10) OPTTRP(1)..OPTTRP(3) LABEL DFXFILE ACCFILE THRFILE INLFILE TRPFILE

Fortran command syntax:
CALL ACCC_WITH_TRIP_PARALLEL(TOL, OPTACC, OPTTRP, LABEL, DFXFILE, ACCFILE, THRFILE, INLFILE, TRPFILE, IERR)

Previous topic
psspy.accc_with_trip_2

Next topic
psspy.accor

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.accc_with_trip_parallel
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.alert_output
psspy.alert_output
alert_output(islct=None, filarg=None, options=None, **kwds)
Use this API to specify the alert device.

This API routine was first introduced in release 30.0.0.

Python syntax:
ierr = alert_output(islct, filarg, options)

Parameters
ISLCT (integer) – Virtual device selector. (input; 1 by default).

FILARG (character*260) – Printer name or filename; ignored if islct is not 2 or 3. (input).

OPTIONS (integer) – An array of two elements specifying open and printing options; ignored if ISLCT is not 2 or 3. (input).

IERR (integer) – Error code. (output).

The argument ISLCT allowed values are as follows:

= 1

standard destination. In the PSSE GUI standard output for alerts is a message box and a copy to the Alerts/Warnings tab of the output bar.

= 2

direct output to a file.

= 3

direct output to a printer.

= 4

direct output to progress device.

= 5

direct output to report device.

= 6

no output.

The argument OPTIONS values are as follows:

OPTIONS(1)

file and printer open options: The OPTIONS(1) values may be summed to select multiple options (0 by default).

= 0

open with carriage control format and, for files, for overwrite of existing files.

= 1

open with list format.

= 2

open file for append (file output only).

= 2

set printer orientation to portrait mode (printer output only).

= 4

open printer in immediate print mode (printer output only).

OPTIONS(2)

number of copies to print (printer only) (0 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

prerequisite requirements for API are not met.

= 2

failed to open device.

Notes:

Batch command syntax:
BAT_ALERT_OUTPUT ISLCT FILARG OPTIONS(1) OPTIONS(2)

Fortran command syntax:
CALL OPENALERTDEVICE(ISLCT, FILARG, OPTIONS, IERR)

Previous topic
psspy.accor_3

Next topic
psspy.allow_pssuserpf

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.alert_output
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.allow_pssuserpf
psspy.allow_pssuserpf
allow_pssuserpf(ival=None)
Use this API to specify or return the option to allow or disallow the loading or use of the Powerflow Customization Interface (PCI) implementation module (pssuserpf).

This API routine was first introduced in release 33.6.0 and 34.0.1.

Python syntax:
ierr = allow_pssuserpf(ival)

ierr,ival = allow_pssuserpf()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 1 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= 0

PCI disabled.

= 1

PCI enabled.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ALLOW_PSSUSERPF IVAL

Fortran command syntax:
CALL ALLOW_PSSUSERPF(IVAL, IOCODE, IERR)

Previous topic
psspy.alert_output

Next topic
psspy.alph

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.allow_pssuserpf
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.alph
psspy.alph
alph(sid=None, all=None)
Use this API to print an alphabetically sorted table of all buses in a specified subsystem of the working case (activity ALPH).

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = alph(sid, all)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ALPH SID ALL

Fortran command syntax:
CALL ALPHNW(SID, ALL, IERR)

Previous topic
psspy.allow_pssuserpf

Next topic
psspy.append_accc

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.alph
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.append_accc
psspy.append_accc
append_accc(option=None, dfxfile=None, basfile=None, cntfile=None, accfile=None, label=None, numdesc=None, descrpt=None, **kwds)
Use this API to replicate system conditions of a contingency case solution, as contained in a designated Saved Case File, in the form of a Contingency Solution Output File. Results may be appended to an existing Contingency Solution Output File, or an new Contingency Solution Output File may be created.

This API routine was first introduced in release 30.0.0.

Python syntax:
ierr = append_accc(option, dfxfile, basfile, cntfile, accfile, label, numdesc, descrpt)

Parameters
OPTION (integer) – Append flag. (input; 1 by default).

DFXFILE (character*260) – Name of the distribution factor data file. (input; no default allowed).

BASFILE (character*260) – Name of the saved case file containing the pre-contingency power flow working case. this is the case that was present when the distribution factor data file specified in dfxfile was constructed; it is also the case from which the contingency case was formed. its solution is in the saved case file specified in cntfile. (input; no default allowed).

CNTFILE (character*260) – Name of the saved case file containing the contingency case solution for which results are to be placed in the contingency solution output file specified in accfile. this case must be formed by imposing status and/or boundary condition changes on the pre-contingency case specified in basfile, and then solving using one or more of the power flow solution activities. (input; no default allowed).

ACCFILE (character*260) – Name of the contingency solution output file. (input; no default allowed).

LABEL (character*32) – 12 character contingency label. (input; blank by default).

NUMDESC (integer) – Number of lines of text used to describe the contingency case; must be between 1 and 16. (input; no default allowed).

DESCRPT (character*160) – An array of NUMDESC elements specifying Are NUMDESC lines of text describing the contingency case. (input; blank by default).

IERR (integer) – Error code. (output).

The argument OPTION allowed values are as follows:

= 0

create a new Contingency Solution Output File in the file specified in ACCFILE.

= 1

append results to the existing Contingency Solution Output File specified in ACCFILE.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid OPTION value.

= 2

invalid NUMDESC value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

no base case Saved Case File specified.

= 6

no contingency case Saved Case File specified.

= 7

Contingency Solution Output File not found.

= 8

DFAX File and Contingency Solution Output File are not compatible.

= 9

no Distribution Factor Data File specified.

= 10

no Contingency Solution Output File specified.

= 21

file DFXFILE is not in the form of a PSSE-25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 51

error opening Contingency Solution Output File.

= 52

error opening Distribution Factor Data File.

= 53

error opening pre-contingency Saved Case File.

= 54

error opening contingency case Saved Case File.

= 55

error reading Contingency Solution Output File.

= 56

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_APPEND_ACCC OPTION DFXFILE BASFILE CNTFILE ACCFILE LABEL NUMDESC DESCRPT(1)..DESCRPT(NUMDESC)

Fortran command syntax:
CALL APPEND_ACCC(OPTION, DFXFILE, BASFILE, CNTFILE, ACCFILE, LABEL, NUMDESC, DESCRPT, IERR)

Previous topic
psspy.alph

Next topic
psspy.apply_var_limits

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.append_accc
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.apply_var_limits
psspy.apply_var_limits
apply_var_limits(ival=None)
Use this API to specify or return the option for the default VAR limits setting; either apply automatically, apply immediately, ignore, or apply on a specific iteration

This API routine was first introduced in release 35.0.0.

Python syntax:
ierr = apply_var_limits(ival)

ierr, ival = apply_var_limits()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 0 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= -1

ignore.

= 0

apply immediately.

= >0

apply on the specified iteration or when the largest reactive power mismatch is less than a pre-programmed tolerance.

= 99

apply automatically.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_APPLY_VAR_LIMITS IVAL

Fortran command syntax:
CALL APPLY_VAR_LIMITS(IVAL, IOCODE, IERR)

Previous topic
psspy.append_accc

Next topic
psspy.area

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.apply_var_limits
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.area_2
psspy.area_2
area_2(sid=None, all=None, opt=None)
Use this API to tabulate area totals by area, as well as the desired area net interchange (activity AREA).

This API routine was first introduced in release 32.0.0.

Python syntax:
ierr = area_2(sid, all, opt)

Parameters
SID (integer) – A valid area subsystem identifier. valid subsystem identifiers range from 0 to 11. area subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All areas or specified subsystem flag. (input; 1 by default).

OPT (integer) – Load and induction machine reporting option. (input; 2 by default).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all areas.

= 0

process only areas in area subsystem SID.

The argument OPT allowed values are as follows:

= 1

tabulate loads, induction generators and induction motors connected to area buses.

= 2

tabulate loads, induction generators and induction motors assigned to the area.

= 3

tabulate three load and induction machine subtotals for each area: -area load and induction machines connected to area buses -area load and induction machines connected to non-area buses -non-area load and induction machines connected to area buses.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

Invalid OPT value.

= 4

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_AREA_2 SID ALL OPT

Fortran command syntax:
CALL AREA_2(SID, ALL, OPT, IERR)

Previous topic
psspy.area

Next topic
psspy.area_zone

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.area_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.area_zone
psspy.area_zone
area_zone(sid=None, all=None)
Use this API to tabulate area totals by area, along with subtotals by zone. The desired net interchange of each area reported is also tabulated.

This API routine was first introduced in release 30.2.0.

Python syntax:
ierr = area_zone(sid, all)

Parameters
SID (integer) – A valid area subsystem identifier. valid subsystem identifiers range from 0 to 11. area subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All areas or specified subsystem flag. (input; 1 by default).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all areas.

= 0

process only areas in area subsystem SID.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_AREA_ZONE SID ALL

Fortran command syntax:
CALL AREA_ZONE(SID, ALL, IERR)

Previous topic
psspy.area_2

Next topic
psspy.arnm

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.area_zone
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.arnm_2
psspy.arnm_2
arnm_2(sid=None, all=None, status=None, ianew=None, **kwds)
This API routine is the second release of the area renumbering function. Use this API routine to reassign the buses, loads and/or induction machines in a specified subsystem of the working case from their original area to a designated area (activity ARNM).

This API routine was first introduced in release 33.0.0.

Python syntax:
ierr = arnm_2(sid, all, status, ianew)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

STATUS (integer) – An array of three elementsNone. (input).

IANEW (integer) – New area to be assigned to specified buses, load, and/or induction machines. ianew must be between 1 and 9999. (input; 1 by default).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The argument STATUS values are as follows:

STATUS(1)

Area assignments of buses to IANEW; (0 by default).

= 1

Change area assignments of buses to IANEW.

= 0

Leave area assignments of buses unchanged.

STATUS(2)

Area assignments of loads to IANEW; (0 by default).

= 1

Change area assignments of loads to IANEW.

= 0

Leave area assignments of loads unchanged.

STATUS(3)

Area assignments of induction machines to IANEW; (0 by default).

= 1

Change area assignments of induction machines to IANEW.

= 0

Leave area assignments of induction machines unchanged.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid STATUS value.

= 4

invalid new area number.

= 5

area table is full; cannot add area to the working case.

= 6

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_ARNM_2 SID ALL STATUS(1) STATUS(2) STATUS(3) IANEW

Fortran command syntax:
CALL ARNM_2(SID, ALL, STATUS, IANEW, IERR)

Previous topic
psspy.arnm

Next topic
psspy.base_frequency

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.arnm_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.base_frequency
psspy.base_frequency
base_frequency(rval=None)
Use this API to specify or return the value of the base frequency option setting.

This API routine was first introduced in release 29.0.0.

Python syntax:
ierr = base_frequency(rval)

ierr, rval = base_frequency()

Parameters
RVAL (real) – Base frequency (usually 50 or 60). (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 60.0 by default; else output).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid RVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BASE_FREQUENCY RVAL

Fortran command syntax:
CALL BASE_FREQUENCY_API(RVAL, IOCODE, IERR)

Previous topic
psspy.arnm_2

Next topic
psspy.bgen

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.base_frequency
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bgen
psspy.bgen
bgen(sid=None, all=None, status=None)
Use this API to convert the mismatch at boundary buses to equivalent load and/or generation (activity BGEN). It is intended to be used following the removal of a subsystem from a solved working case, with the flows to the deleted subsystem replaced by load and/or generation at those retained buses that were directly connected to the removed subsystem.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = bgen(sid, all, status)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

STATUS (integer) – Type of boundary condition modification to be used. (input; 0 by default).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The argument STATUS allowed values are as follows:

= 0

generator for inflow; load for outflow.

= 1

all equivalent generators.

= 2

all equivalent loads.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid STATUS value.

= 4

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BGEN SID ALL STATUS

Fortran command syntax:
CALL BGENNW(SID, ALL, STATUS, IERR)

Previous topic
psspy.base_frequency

Next topic
psspy.brch

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bgen
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.brch_2
psspy.brch_2
brch_2(sid=None, all=None, dotest=None, tolval=None, **kwds)
Use this API to tabulate those branches where impedances or other characteristics are such that they may be detrimental to the rate of convergence of one or more of the power flow solution activities.

This API routine was first introduced in release 33.2.0.

Python syntax:
ierr = brch_2(sid, all, dotest, tolval)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined . (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

DOTEST (integer) – An array of 11 elements specifying options. Each element determines whether a specific branch check should be applied. For DOTEST(I) = 1, the corresponding branch check is applied; for DOTEST(I) = 0, the check is bypassed. (input; 0 by default).

TOLVAL (real) – An array of 7 elements specifying options. Each element contains a limit or threshold value used in one of the branch checks . (input).

IERR (integer) – Error code . (output).

The argument ALL allowed values are as follows:

= 0

process only buses in subsystem SID.

= 1

process all buses.

The argument DOTEST values are as follows:

DOTEST(1)

check for small reactances.

DOTEST(2)

check for large reactances.

DOTEST(3)

check for large resistance to reactance ratios (R/X).

DOTEST(4)

check for negative reactances.

DOTEST(5)

check for large ratio of largest to smallest reactance at each bus.

DOTEST(6)

check for high or negative charging.

DOTEST(7)

check data of parallel transformers.

DOTEST(8)

check for high tap ratios.

DOTEST(9)

check for low tap ratios.

DOTEST(10)

check for inconsistent transformer loss data values (copper loss and no-load loss).

DOTEST(11)

check for zero sequence non-transformer branch impedances of 0.0.

The argument TOLVAL values are as follows:

TOLVAL(1)

>0.0. reactance lower limit (0.0005 by default).

TOLVAL(2)

>0.0. reactance upper limit (1.0 by default).

TOLVAL(3)

>0.0. R/X threshold (0.66667 by default).

TOLVAL(4)

>=10.0. Xmax/Xmin threshold (500.0 by default).

TOLVAL(5)

>=0.0. charging upper limit (5.0 by default).

TOLVAL(6)

>0.8. high tap ratio limit (1.1 by default).

TOLVAL(7)

> 0.0 and < 1.2. low tap ratio limit (0.9 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid DOTEST value.

= 4

invalid TOLVAL value.

= 5

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BRCH_2 SID ALL DOTEST(1)..DOTEST(11) TOLVAL(1)..TOLVAL(7)

Fortran command syntax:
CALL BRCH_2(SID, ALL, DOTEST, TOLVAL, IERR)

Previous topic
psspy.brch

Next topic
psspy.bsnm

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.brch_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bsnm
psspy.bsnm
bsnm(sid=None, all=None, opt=None, status=None, busrng=None, oldnam=None, tfile=None, out=None, ofile=None, **kwds)
Use this API to change the bus numbers of specified network buses in the working case and retain a tabulation, in file form, of bus number changes made (activity BSNM). This API must be referenced with one OPT 0 reference followed by one of the following: - one OPT 5, 11 or 12 reference. - one or more OPT 1 references, followed by one OPT 7 reference. - one or more OPT 2 references, followed by one OPT 7 reference. - one or more OPT 3 references, followed by one OPT 7 reference. - one or more OPT 4 references, followed by one OPT 7 reference. - one OPT 15 reference for each area in the case containing at least one bus, in ascending area number order, followed by one OPT 25 reference. - zero or more OPT 15 references in the same order as above, followed by one OPT 35 reference.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = bsnm(sid, all, opt, status, busrng, oldnam, tfile, out, ofile)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

OPT (integer) – Method used to renumber the buses. (input; no default allowed).

STATUS (integer) – If opt=15, is the number of the area where the bus number range is specified in busrng. status must be between 1 and areas (the highest area number allowed at the present size level of psse). if opt=4: status = 0 indicates a new bus number range is provided. status = 1 indicates a bus number offset is provided. otherwise status is ignored. (input).

BUSRNG (integer) – An array of 2 elements specifying If OPT = 1: BUSRNG(1) is the new bus number. If OPT = 2: BUSRNG(1) is the old bus number. BUSRNG(2) is the new bus number. If OPT = 3: BUSRNG(1) is the bus number at which to start packing sequentially. BUSRNG(2) is the bus number at which to end packing sequentially. If OPT = 4 and STATUS = 0: BUSRNG(1) is the starting bus number for the range into which the subsystem is to be renumbered. BUSRNG(2) is the ending bus number for the range into which the subsystem is to be renumbered. If OPT = 4 and STATUS = 1: BUSRNG(1) is amount by which all buses in the specified subsystem are offset. If OPT = 5: BUSRNG(1) bus number at which to start renumbering all buses in the working case. Buses are re-sequenced in increments of 1. If OPT = 15: BUSRNG(1) is the starting bus number for the range into which the area is to be renumbered. BUSRNG(2) is the ending bus number for the range into which the area is to be renumbered. (input).

OLDNAM (character*18) – Extended bus name of the bus to be renumbered when opt is 1 (when opt is 1). (input; no default allowed).

TFILE (character*260) – Bus name/number translation file. this file is only used if opt = 11 or 12. data in the translation file must be in the form specified in the psse program operation manual. (when opt is 11 or 12). (input; no default allowed).

OUT (integer) – Option selection when opt is 0. (input; 1 by default).

OFILE (character*260) – Bus renumbering translation file for the records of activity bsnm (when opt is 0 and out is 0). (input; no default allowed).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The argument OPT allowed values are as follows:

= 0

initialize for renumbering.

= 1

renumber buses based on name/new number pairs.

= 11

renumber using name translation file.

= 2

renumber buses based on old number/new number pairs.

= 12

renumber buses using number translation file.

= 3

pack all buses in specified low/high pairs.

= 4

renumber buses based on the subsystem specified in the OPT 0 reference.

= 5

renumber all buses.

= 15

renumber all buses blocking by area.

= 25

apply blocking by area changes.

= 35

cancel blocking by area changes.

= 7

cleanup from renumbering.

The argument OUT allowed values are as follows:

= 0

direct output to a data file specified by OFILE.

= 1

direct output to the current report device.

= 2

no output.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid OUT value.

= 4

invalid OPT 0 call; bus renumbering already initialized.

= 5

prior OPT is not 0 (OPT=1,2,11,12,5,25).

= 6

bus not found (OPT=1,2,11,12).

= 7

invalid new bus number (OPT=1,2,11,12,4).

= 8

bus number is already assigned to another bus (OPT=1,2,11,12,4).

= 9

prior OPT not 0 or 3 (OPT=3,4,15,35).

= 10

invalid starting bus number (OPT=3,4,5,15).

= 11

invalid ending bus number (OPT=3,4,15).

= 12

starting bus number is greater than ending bus number (OPT=3,4,15).

= 13

invalid STATUS value (OPT=4).

= 14

invalid offset value (OPT=4).

= 15

not enough unused bus numbers in specified bus number range (OPT=4).

= 16

not enough numbers between BUSRNG(1) and 999997 (OPT=5).

= 17

area specified but no more areas left to process (OPT=15).

= 18

area out of sequence (OPT=15).

= 19

bus number range of an area overlaps that of another area (OPT=15).

= 20

bus number range of an area is not large enough (OPT=15).

= 21

not enough OPT 15 calls (OPT=25).

= 22

invalid OPT 7 call; bus renumbering is not initialized (OPT=7).

= 23

invalid OPT value.

= 24

error opening TFILE (OPT=11,12).

= 25

error opening OFILE.

= 26

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BSNM SID ALL OPT STATUS BUSRNG(1) BUSRNG(2) OLDNAM TFILE OUT OFILE

Fortran command syntax:
CALL BSNMNW(SID, ALL, OPT, STATUS, BUSRNG, OLDNAM, TFILE, OUT, OFILE, IERR)

Previous topic
psspy.brch_2

Next topic
psspy.bus_input

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bsnm
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bsnm
psspy.bsnm
bsnm(sid=None, all=None, opt=None, status=None, busrng=None, oldnam=None, tfile=None, out=None, ofile=None, **kwds)
Use this API to change the bus numbers of specified network buses in the working case and retain a tabulation, in file form, of bus number changes made (activity BSNM). This API must be referenced with one OPT 0 reference followed by one of the following: - one OPT 5, 11 or 12 reference. - one or more OPT 1 references, followed by one OPT 7 reference. - one or more OPT 2 references, followed by one OPT 7 reference. - one or more OPT 3 references, followed by one OPT 7 reference. - one or more OPT 4 references, followed by one OPT 7 reference. - one OPT 15 reference for each area in the case containing at least one bus, in ascending area number order, followed by one OPT 25 reference. - zero or more OPT 15 references in the same order as above, followed by one OPT 35 reference.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = bsnm(sid, all, opt, status, busrng, oldnam, tfile, out, ofile)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

OPT (integer) – Method used to renumber the buses. (input; no default allowed).

STATUS (integer) – If opt=15, is the number of the area where the bus number range is specified in busrng. status must be between 1 and areas (the highest area number allowed at the present size level of psse). if opt=4: status = 0 indicates a new bus number range is provided. status = 1 indicates a bus number offset is provided. otherwise status is ignored. (input).

BUSRNG (integer) – An array of 2 elements specifying If OPT = 1: BUSRNG(1) is the new bus number. If OPT = 2: BUSRNG(1) is the old bus number. BUSRNG(2) is the new bus number. If OPT = 3: BUSRNG(1) is the bus number at which to start packing sequentially. BUSRNG(2) is the bus number at which to end packing sequentially. If OPT = 4 and STATUS = 0: BUSRNG(1) is the starting bus number for the range into which the subsystem is to be renumbered. BUSRNG(2) is the ending bus number for the range into which the subsystem is to be renumbered. If OPT = 4 and STATUS = 1: BUSRNG(1) is amount by which all buses in the specified subsystem are offset. If OPT = 5: BUSRNG(1) bus number at which to start renumbering all buses in the working case. Buses are re-sequenced in increments of 1. If OPT = 15: BUSRNG(1) is the starting bus number for the range into which the area is to be renumbered. BUSRNG(2) is the ending bus number for the range into which the area is to be renumbered. (input).

OLDNAM (character*18) – Extended bus name of the bus to be renumbered when opt is 1 (when opt is 1). (input; no default allowed).

TFILE (character*260) – Bus name/number translation file. this file is only used if opt = 11 or 12. data in the translation file must be in the form specified in the psse program operation manual. (when opt is 11 or 12). (input; no default allowed).

OUT (integer) – Option selection when opt is 0. (input; 1 by default).

OFILE (character*260) – Bus renumbering translation file for the records of activity bsnm (when opt is 0 and out is 0). (input; no default allowed).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The argument OPT allowed values are as follows:

= 0

initialize for renumbering.

= 1

renumber buses based on name/new number pairs.

= 11

renumber using name translation file.

= 2

renumber buses based on old number/new number pairs.

= 12

renumber buses using number translation file.

= 3

pack all buses in specified low/high pairs.

= 4

renumber buses based on the subsystem specified in the OPT 0 reference.

= 5

renumber all buses.

= 15

renumber all buses blocking by area.

= 25

apply blocking by area changes.

= 35

cancel blocking by area changes.

= 7

cleanup from renumbering.

The argument OUT allowed values are as follows:

= 0

direct output to a data file specified by OFILE.

= 1

direct output to the current report device.

= 2

no output.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid OUT value.

= 4

invalid OPT 0 call; bus renumbering already initialized.

= 5

prior OPT is not 0 (OPT=1,2,11,12,5,25).

= 6

bus not found (OPT=1,2,11,12).

= 7

invalid new bus number (OPT=1,2,11,12,4).

= 8

bus number is already assigned to another bus (OPT=1,2,11,12,4).

= 9

prior OPT not 0 or 3 (OPT=3,4,15,35).

= 10

invalid starting bus number (OPT=3,4,5,15).

= 11

invalid ending bus number (OPT=3,4,15).

= 12

starting bus number is greater than ending bus number (OPT=3,4,15).

= 13

invalid STATUS value (OPT=4).

= 14

invalid offset value (OPT=4).

= 15

not enough unused bus numbers in specified bus number range (OPT=4).

= 16

not enough numbers between BUSRNG(1) and 999997 (OPT=5).

= 17

area specified but no more areas left to process (OPT=15).

= 18

area out of sequence (OPT=15).

= 19

bus number range of an area overlaps that of another area (OPT=15).

= 20

bus number range of an area is not large enough (OPT=15).

= 21

not enough OPT 15 calls (OPT=25).

= 22

invalid OPT 7 call; bus renumbering is not initialized (OPT=7).

= 23

invalid OPT value.

= 24

error opening TFILE (OPT=11,12).

= 25

error opening OFILE.

= 26

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BSNM SID ALL OPT STATUS BUSRNG(1) BUSRNG(2) OLDNAM TFILE OUT OFILE

Fortran command syntax:
CALL BSNMNW(SID, ALL, OPT, STATUS, BUSRNG, OLDNAM, TFILE, OUT, OFILE, IERR)

Previous topic
psspy.brch_2

Next topic
psspy.bus_input

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bsnm
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bus_input
psspy.bus_input
bus_input(ival=None)
Use this API to specify or return the bus input option setting, for either numbers or names.

This API routine was first introduced in release 29.0.0.

Python syntax:
ierr = bus_input(ival)

ierr, ival = bus_input()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 0 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= 0

bus numbers.

= 1

extended bus names.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BUS_INPUT IVAL

Fortran command syntax:
CALL BUS_INPUT_API(IVAL, IOCODE, IERR)

Previous topic
psspy.bsnm

Next topic
psspy.bus_output

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bus_input
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bus_output
psspy.bus_output
bus_output(ival=None)
Use this API to specify or return the bus output option setting, for either numbers or names.

This API routine was first introduced in release 29.0.0.

Python syntax:
ierr = bus_output(ival)

ierr, ival = bus_output()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 0 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= 0

bus numbers.

= 1

extended bus names.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BUS_OUTPUT IVAL

Fortran command syntax:
CALL BUS_OUTPUT_API(IVAL, IOCODE, IERR)

Previous topic
psspy.bus_input

Next topic
psspy.bus_size_level

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bus_output
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bus_size_level
psspy.bus_size_level
bus_size_level(ival=None)
Use this API to specify or return the value of the PSSE size level option setting to a multiple of 1,000 between 1,000 and 200,000.

This API routine was first introduced in release 30.0.0.

Python syntax:
ierr = bus_size_level(ival)

ierr, ival = bus_size_level()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 1000 by default; else output).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

= 4

unable to change bus size. PSSE Xplore is limited to 50 buses.

Notes:

Batch command syntax:
BAT_BUS_SIZE_LEVEL IVAL

Fortran command syntax:
CALL BUS_SIZE_LEVEL_API(IVAL, IOCODE, IERR)

Previous topic
psspy.bus_output

Next topic
psspy.busn

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.bus_size_level
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.busn
psspy.busn
busn(buslo=None, bushi=None)
Use this API to tabulate unused bus numbers within a specified bus number range (activity BUSN).

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = busn(buslo, bushi)

Parameters
BUSLO (integer) – Low limit of bus number range. (input; 1 by default).

BUSHI (integer) – High limit of bus number range. (input; 999,997, by default).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid starting bus number.

= 2

starting bus number is greater than ending bus number.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_BUSN BUSLO BUSHI

Fortran command syntax:
CALL BUSNAPI(BUSLO, BUSHI, IERR)

Previous topic
psspy.bus_size_level

Next topic
psspy.ca_iterations

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.busn
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.ca_iterations
psspy.ca_iterations
ca_iterations(ival=None)
Use this API to specify or return the contingency iterations limit setting.

This API routine was first introduced in release 34.1.0.

Python syntax:
ierr = ca_iterations(ival)

ierr, ival = ca_iterations()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 20 by default; else output).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CA_ITERATIONS IVAL

Fortran command syntax:
CALL CA_ITERATIONS(IVAL, IOCODE, IERR)

Previous topic
psspy.busn

Next topic
psspy.case

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.ca_iterations
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.case
psspy.case
case(sfile=None)
Use this API to open a PSSE Saved Case file and transfers its data into the PSSE working case.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = case(sfile)

Parameters
SFILE (character*260) – Name of the psse saved case file if sfile is “*”, casenw attempts to reopen the most recently accessed saved case file. if no saved case file was accessed in the current execution of psse, casenw returns an error code. (input; no default allowed).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

SFILE is blank.

= 2

error reading from SFILE.

= 3

error opening SFILE.

= 4

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CASE SFILE

Fortran command syntax:
CALL CASENW(SFILE, IERR)

Previous topic
psspy.ca_iterations

Next topic
psspy.check_powerflow_data

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.case
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.check_powerflow_data
psspy.check_powerflow_data
check_powerflow_data(sid=None, all=None, opt=None)
Use this API routine to perform data checks on the selected categories of powerflow data for all buses in the working case or for all buses in a specified subsystem.

This API routine was first introduced in release 33.1.0.

Python syntax:
ierr = check_powerflow_data(sid, all, opt)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined . (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

OPT (integer) – Powerflow data category to be checked . (input; 0 by default).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 0

process only buses in subsystem SID.

= 1

process all buses.

The argument OPT allowed values are as follows:

= 0

all data categories.

= 1

bus data.

= 2

load data.

= 3

plant data.

= 4

generator unit data.

= 5

induction machine data.

= 6

fixed bus shunt data.

= 7

switched shunt data.

= 8

non-transformer branch data.

= 9

two-winding transformer data.

= 10

three-winding transformer data.

= 11

transformer impedance table correction data.

= 12

multi-section line data.

= 13

two-terminal dc line data.

= 14

multi-terminal dc line data.

= 15

VSC dc line data.

= 16

FACTS device data.

= 17

GNE device data.

= 18

area interchange data.

= 19

owner data.

= 20

zone data.

= 21

capability curve data.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid OPT value.

= 4

capability curve data is not in the working case.

= 5

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CHECK_POWERFLOW_DATA SID ALL OPT

Fortran command syntax:
CALL CHECK_POWERFLOW_DATA(SID, ALL, OPT, IERR)

Previous topic
psspy.case

Next topic
psspy.checkvoltagelimits

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.check_powerflow_data
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.checkvoltagelimits
psspy.checkvoltagelimits
checkvoltagelimits(sid=None, all=None, opt=None, thrsh=None)
Use this API to tabulate those buses where voltage magnitude is beyond their normal or emergency voltage limits. This check may be performed for all buses in the working case or for all buses in a specified subsystem.

This API routine was first introduced in release 33.1.0.

Python syntax:
ierr = checkvoltagelimits(sid, all, opt, thrsh)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined . (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag . (input; 1 by default).

OPT (integer) – Set of voltage limits to be used. (input; 1 by default).

THRSH (real) – Voltage limit threshold (-0.05 < thrsh < 0.05). (input; 0.0 by default).

IERR (integer) – Error code . (output).

The argument ALL allowed values are as follows:

= 0

process only buses in subsystem SID.

= 1

process all buses.

The argument OPT allowed values are as follows:

= 1

normal limits.

= 2

emergency limits.

The argument THRSH allowed values are as follows:

= 0.0

log voltages above upper limit or below lower limit.

> 0.0

log voltages beyond or within THRSH of a limit.

< 0.0

log voltage outside a limit by more than (-THRSH).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid OPT value.

= 4

invalid THRSH value.

= 5

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CHECKVOLTAGELIMITS SID ALL OPT THRSH

Fortran command syntax:
CALL CHECKVOLTAGELIMITS(SID, ALL, OPT, THRSH, IERR)

Previous topic
psspy.check_powerflow_data

Next topic
psspy.chkcntduplicon

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.checkvoltagelimits
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.chkcntduplicon
psspy.chkcntduplicon
chkcntduplicon(confile=None)
Check duplicate labels in Contingengy (CON) file.

This API routine was first introduced in release 33.10.0 and 34.2.0.

Python syntax:
ierr, dnum = chkcntduplicon(confile)

Parameters
CONFILE (character*260) – Contingency file name. (input).

DNUM (integer) – Total number of duplicated contingency labels in the contingency file. (output; 0 by default).

IERR (integer) – None. (output).

The possible error code values are as follows:

= 1

no CON file specified.

= 2

error opening CON file.

= 3

prerequisite requirements for function not met.

Notes:

Batch command syntax:
BAT_CHKCNTDUPLICON CONFILE

Fortran command syntax:
CALL CHKCNTDUPLICON(CONFILE, DNUM, IERR)

Previous topic
psspy.checkvoltagelimits

Next topic
psspy.chkcntduplidfx

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.chkcntduplicon
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.chkcntduplidfx
psspy.chkcntduplidfx
chkcntduplidfx(dfxfile=None)
Check duplicate labels in DFAX file.

This API routine was first introduced in release 33.10.0 and 34.2.0.

Python syntax:
ierr, dnum = chkcntduplidfx(dfxfile)

Parameters
DFXFILE (character*260) – Contingency file name. (input).

DNUM (integer) – Total number of duplicated contingency labels in the dfax file. (output; 0 by default).

IERR (integer) – None. (output).

The possible error code values are as follows:

= 1

no DFAX file specified.

= 2

error opening DFAX file.

= 3

prerequisite requirements for function not met.

Notes:

Batch command syntax:
BAT_CHKCNTDUPLIDFX DFXFILE

Fortran command syntax:
CALL CHKCNTDUPLIDFX(DFXFILE, DNUM, IERR)

Previous topic
psspy.chkcntduplicon

Next topic
psspy.close_powerflow

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.chkcntduplidfx
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.close_powerflow
psspy.close_powerflow
close_powerflow()
Removes the current powerflow working case from PSSE’s working memory. Thus, the PSSE powerflow arrays are in the same state as they are immediately following PSSE startup. The default PSSE program option settings are unchanged.

This API routine was first introduced in release 30.2.0.

Python syntax:
ierr = close_powerflow()

Parameters
IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CLOSE_POWERFLOW

Fortran command syntax:
CALL CLOSE_POWERFLOW(IERR)

Previous topic
psspy.chkcntduplidfx

Next topic
psspy.close_report

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.close_powerflow
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.close_report
psspy.close_report
close_report()
Sets the report output device to the standard output and sets the command line to request device selection for individual reporting activities (Activity CLOS).

This API routine was first introduced in release 30.0.0.

Python syntax:
ierr = close_report()

Parameters
IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CLOSE_REPORT

Fortran command syntax:
CALL CLOSEREPORTDEVICE(IERR)

Previous topic
psspy.close_powerflow

Next topic
psspy.cmpr

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.close_report
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.cmpr
psspy.cmpr
cmpr(sid=None, apiopt=None, status=None, thrsh=None, cfile=None, **kwds)
Use this API to tabulate certain case totals, as contained in the working case, with those of a designated Saved Case (activity CMPR). Either system totals, area totals, owner totals, or zone totals may be compared. It must be referenced using one of the following procedures: - One reference with APIOPT=1, followed by any number of references with APIOPT=2, followed by one reference with APIOPT=3. - One reference with APIOPT=0. This automatically combines the processing of one APIOPT 1 reference, followed by one APIOPT 2 reference, followed by one APIOPT 3 reference.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = cmpr(sid, apiopt, status, thrsh, cfile)

Parameters
SID (integer) – A valid area, zone or owner subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; used only when APIOPT is 0 or 1; 0 by default).

APIOPT (integer) – Mode of operation in the api. (input; 0 by default).

STATUS (integer) – An array of four elements specifying The value of each element is as follows. (input).

THRSH (real) – Difference threshold, in either engineering units or a percent, based on the value of status(2). (input; used only when APIOPT is 0 or 2; 0.0 by default).

CFILE (character*260) – Saved case file to be compared against the working case (when apiopt is 0 or 1). (input; no default allowed).

IERR (integer) – Error code. (output).

The argument APIOPT allowed values are as follows:

= 0

initialize for case totals comparison, run the comparison specified by STATUS(3), and run post-processing clean up.

= 1

initialize system for system, area, owner, zone totals.

= 2

calculate and report system, area, owner, zone totals.

= 3

postprocessing housekeeping.

The argument STATUS values are as follows:

STATUS(1)

tabulation method (used only when APIOPT is 0 or 1; 0 by default).

= 0

tabulate system totals.

= 1

tabulate area totals for area subsystem SID.

= 2

tabulate owner totals for owner subsystem SID.

= 3

tabulate zone totals for zone subsystem SID.

STATUS(2)

units for the difference threshold (used only when APIOPT is 0 or 2; 0 by default).

= 0

threshold in engineering units.

= 1

threshold in percent.

STATUS(3)

quantity to be compared (used only when APIOPT is 0 or 2; 1 by default).

= 1

compare generation.

= 2

compare load.

= 3

compare losses.

= 4

compare mismatch.

= 5

compare interchange; not valid for STATUS(1) = 2.

STATUS(4)

file to restore into the working case upon completion (used only when APIOPT is 0 or 3; 0 by default).

= 0

restore the working case.

= 1

restore the comparison file to the working case.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid APIOPT value.

= 3

invalid STATUS value.

= 4

owner (STATUS(1)=2) interchange (STATUS(3)=5) combination is invalid.

= 5

invalid THRSH value.

= 6

CFILE is blank.

= 7

error writing the working case to a temporary file.

= 8

unexpected APIOPT value.

= 9

error reading the comparison case.

= 10

error opening the temporary file.

= 11

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CMPR SID APIOPT STATUS(1)..STATUS(4) THRSH CFILE

Fortran command syntax:
CALL CMPRNW(SID, APIOPT, STATUS, THRSH, CFILE, IERR)

Previous topic
psspy.close_report

Next topic
psspy.cntb

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.cmpr
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.cntb
psspy.cntb
cntb(sid=None, all=None, apiopt=None, status=None, v=None, **kwds)
Use this API to tabulate the voltage setpoints and desired voltage bands of voltage-controlling equipment in the working case (activity CNTB). Optionally, new scheduled voltages may be specified.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr, next, bus, ckt, v = cntb(sid, all, apiopt, status, v)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 0 by default).

ALL (integer) – All buses or specified subsystem flag (used only when apiopt is 2). (input; 0 by default).

APIOPT (integer) – Mode of operation in the api. (input).

STATUS (integer) – An array of three elements specifying used to control reporting and processing options. (input).

V (real) – An array of two elements specifying Voltage values. (input).

NEXT (integer) – Returned as the next apiopt value expected by the api. (output).

BUS (integer) – An array of three elements specifying a returned three bus values. (output).

CKT (character*2) – Returned as the circuit id of the transformer returned in bus(2) and bus(3) when next returned as 3. (output).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The argument APIOPT allowed values are as follows:

= 1

initialize.

= 2

specify voltage setpoint for controlled bus.

= 3

specify voltage band for load drop compensating transformer.

The argument STATUS values are as follows:

STATUS(1)

varies by APIOPT.

= 0

For APIOPT=1, list subsystem controlled buses with conflicts. For APIOPT=2 or 3, no change.

= 1

For APIOPT=1, list all subsystem controlled buses. For APIOPT=2, change voltage setpoints to new setpoint in V(1). For APIOPT=3, change voltage band to new voltage band in V(1) and V(2).

STATUS(2)

varies by APIOPT.

= 0

For APIOPT=1, report at OPENed output device. For APIOPT=2 or 3, not used.

= 1

For APIOPT=1, list in progress area and allow voltage schedule change. For APIOPT=2 or 3, not used.

STATUS(3)

varies by APIOPT.

= 0

For APIOPT=1, process all controlling elements and controlled buses. For APIOPT=2 or 3, not used.

= 1

For APIOPT=1, process active controlling elements and controlled buses. For APIOPT=2 or 3, not used.

The argument V values are as follows:

V(1)

New setpoint when APIOPT=2, new VMIN when APIOPT=3. Returned as present setpoint when NEXT=2, returned as present VMIN when NEXT=3.

V(2)

New VMAX when APIOPT=3. Returned as present VMAX when NEXT=3.

The argument NEXT allowed values are as follows:

= 1

done with this execution of CNTBNW.

= 2

change voltage setpoint/schedule.

= 3

change VMIN, VMAX of load drop compensating transformer.

The argument BUS values are as follows:

BUS(1)

Returned as controlled bus for which voltage schedule may be changed when Next=2. Returned as controlled bus for which voltage schedule may be changed when Next=3.

BUS(2)

Returned as the from bus of the transformer when Next=3.

BUS(3)

Returned as the to bus of the transformer when Next=3.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid STATUS value.

= 4

invalid new voltage setpoint value (V(1) <= 0.5 or V(1) >= 1.5).

= 5

VMIN is not less than VMAX.

= 6

invalid APIOPT value.

= 7

unexpected APIOPT value.

= 8

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CNTB SID ALL APIOPT STATUS(1)..STATUS(3) V(1) V(2)

Fortran command syntax:
CALL CNTBNW(SID, ALL, APIOPT, STATUS, NEXT, BUS, CKT, V, IERR)

Previous topic
psspy.cmpr

Next topic
psspy.cong

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.cntb
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.cong
psspy.cong
cong(opt=None)
Use this API to convert generators from their power flow representation in preparation for switching studies and dynamic simulations (activity CONG).

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = cong(opt)

Parameters
OPT (integer) – Machine impedance option. (input; 0 by default).

IERR (integer) – Error code. (output).

The argument OPT allowed values are as follows:

= 0

use ZSORCE and IMZSRC.

= 1

use fault analysis subtransient impedance and IMZPOS.

= 2

use fault analysis transient impedance and IMZPOS.

= 3

use fault analysis synchronous impedance and IMZPOS.

The possible error code values are as follows:

= 0

no error.

= 1

invalid OPT value.

= 2

generators are already converted.

= 3

generator conversion failed due to a machine impedance of zero.

= 4

generator conversion failed due to the presence of in-service induction machines that are in the “stalled” or “tripped” state.

= 5

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CONG OPT

Fortran command syntax:
CALL CONGAPI(OPT, IERR)

Previous topic
psspy.cntb

Next topic
psspy.conl

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.cong
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.conl
psspy.conl
conl(sid=None, all=None, apiopt=None, status=None, loadin=None, **kwds)
Use this API to convert the constant MVA load for a specified grouping of network loads to a specified mixture of the constant MVA, constant current, and constant admittance load characteristics (activity CONL).

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr, rlods = conl(sid, all, apiopt, status, loadin)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; used only when APIOPT is 2; 0 by default).

ALL (integer) – All buses or specified subsystem flag. (input; used only when APIOPT is 2; 0 by default).

APIOPT (integer) – Mode of operation in the api. (input; no default allowed).

STATUS (integer) – An array of two elements specifying The value of each element is as follows. (input).

LOADIN (real) – An array of four elementsNone. (input; used only when APIOPT is 2; 0.0 by default). The value of each element is percent of the load being converted in this step to be represented by the corresponding load characteristic as follows).

RLODS (integer) – Returned as the number of unconverted loads remaining in the working case. if the value is nonzero after a call with apiopt = 2, and the remaining loads are to be converted, the api is called again with all = 1 and apiopt = 2. (output).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 1

process all buses.

= 0

process only buses in subsystem SID.

The argument APIOPT allowed values are as follows:

= 1

initialize for load conversion.

= 2

convert loads.

= 3

postprocessing housekeeping.

The argument STATUS values are as follows:

STATUS(1)

method of conversion (used only when APIOPT is 1; 0 by default).

= 0

convert existing constant MVA load.

= 1

reconstruct loads using present voltage, then convert.

= 2

reconstruct loads using unity voltage, then convert.

STATUS(2)

a special OPF bus type code flag (used only when APIOPT is 2; 0 by default).

= 0

all buses in subsystem.

= 1

only Type 1 buses in subsystem.

= 2

only Type 2 and 3 buses in subsystem.

The argument LOADIN values are as follows:

LOADIN(1)

percent of active power load to be converted to the constant current characteristic.

LOADIN(2)

percent of active power load to be converted to the constant admittance characteristic.

LOADIN(3)

percent of reactive power load to be converted to the constant current characteristic.

LOADIN(4)

percent of reactive power load to be converted to the constant admittance characteristic.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid APIOPT value.

= 4

invalid STATUS value.

= 5

unexpected APIOPT value.

= 6

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CONL SID ALL APIOPT STATUS(1) STATUS(2) LOADIN(1).. LOADIN(2) LOADIN(3) LOADIN(4)

Fortran command syntax:
CALL CONLNW(SID, ALL, APIOPT, STATUS, LOADIN, RLODS, IERR)

Previous topic
psspy.cong

Next topic
psspy.connectivity_check

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.conl
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.connectivity_check
psspy.connectivity_check
connectivity_check(ival=None)
Use this API to specify or return the option to enable or disable the solution connectivity checking option setting.

This API routine was first introduced in release 29.0.0.

Python syntax:
ierr = connectivity_check(ival)

ierr, ival = connectivity_check()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 1 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= 0

no solution connectivity check before power flow solutions.

= 1

run solution connectivity check before each power flow solution.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CONNECTIVITY_CHECK IVAL

Fortran command syntax:
CALL CONNECTIVITY_CHECK_API(IVAL, IOCODE, IERR)

Previous topic
psspy.conl

Next topic
psspy.control_area_interchange

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.connectivity_check
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.control_area_interchange
psspy.control_area_interchange
control_area_interchange(ival=None)
Use this API to to specify or return the area interchange control option setting to disabled, or enabled with tie lines only, or enabled with tie lines and loads.

This API routine was first introduced in release 30.0.0.

Python syntax:
ierr = control_area_interchange(ival)

ierr, ival = control_area_interchange()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, then input of 0 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= 0

disabled.

= 1

enabled with interchange determined from tie lines only.

= 2

enabled with interchange determined from tie lines and loads.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CONTROL_AREA_INTERCHANGE IVAL

Fortran command syntax:
CALL CONTROL_AREA_INTERCHANGE_API(IVAL, IOCODE, IERR)

Previous topic
psspy.connectivity_check

Next topic
psspy.csv_to_rawx

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.control_area_interchange
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.csv_to_rawx
psspy.csv_to_rawx
csv_to_rawx(tblname=None, sfile=None)
Use this API to import a rawx (extended raw data) data table from a CSV (comma-separated values) file.

This API routine was first introduced in release 35.1.0.

Python syntax:
ierr = csv_to_rawx(tblname, sfile)

Parameters
TBLNAME (character*100) – Name of the data table to import into (not case sensitive). (input; no default allowed).

SFILE (character*260) – File path of the csv input file. (input; no default allowed).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid tblname.

= 2

error opening SFILE.

= 3

error generating RAWX data.

= 4

error reading RAWX data.

= 10

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CSV_TO_RAWX

Fortran command syntax:
CALL CSV_TO_RAWX(TBLNAME, SFILE, IERR)

Previous topic
psspy.control_area_interchange

Next topic
psspy.csv_to_rawx_with_metamodel

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.csv_to_rawx
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.csv_to_rawx_with_metamodel
psspy.csv_to_rawx_with_metamodel
csv_to_rawx_with_metamodel(infile=None, outfile=None, domainname=None, elementname=None)
Use this API to import a rawx (extended raw data) data table from a CSV (comma-separated values) file with metamodel.

This API routine was first introduced in release 35.1.0.

Python syntax:
ierr = csv_to_rawx_with_metamodel(infile, outfile, domainname, elementname)

Parameters
INFILE (character*260) – Name of the input file. (input; no default allowed).

OUTFILE (character*260) – Name of the output file. (input; no default allowed).

DOMAINNAME (character*260) – File path of the csv input file. (input; no default allowed).

ELEMENTNAME (character*260) – File path of the csv input file. (input; no default allowed).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

No error occurred.

= 1

Error opening “infile”

= 2

Empty “outfile”

= 10

Prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CSV_TO_RAWX_WITH_METAMODEL INFILE OUTFILE DOMAINNAME ELEMENTNAME

Fortran command syntax:
CALL CSV_TO_RAWX_WITH_METAMODEL(INFILE, OUTFILE, DOMAINNAME, ELEMENTNAME, IERR)

Previous topic
psspy.csv_to_rawx

Next topic
psspy.dc_tap_adjustment

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.csv_to_rawx_with_metamodel
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.csv_to_rawx_with_metamodel
psspy.csv_to_rawx_with_metamodel
csv_to_rawx_with_metamodel(infile=None, outfile=None, domainname=None, elementname=None)
Use this API to import a rawx (extended raw data) data table from a CSV (comma-separated values) file with metamodel.

This API routine was first introduced in release 35.1.0.

Python syntax:
ierr = csv_to_rawx_with_metamodel(infile, outfile, domainname, elementname)

Parameters
INFILE (character*260) – Name of the input file. (input; no default allowed).

OUTFILE (character*260) – Name of the output file. (input; no default allowed).

DOMAINNAME (character*260) – File path of the csv input file. (input; no default allowed).

ELEMENTNAME (character*260) – File path of the csv input file. (input; no default allowed).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

No error occurred.

= 1

Error opening “infile”

= 2

Empty “outfile”

= 10

Prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_CSV_TO_RAWX_WITH_METAMODEL INFILE OUTFILE DOMAINNAME ELEMENTNAME

Fortran command syntax:
CALL CSV_TO_RAWX_WITH_METAMODEL(INFILE, OUTFILE, DOMAINNAME, ELEMENTNAME, IERR)

Previous topic
psspy.csv_to_rawx

Next topic
psspy.dc_tap_adjustment

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.csv_to_rawx_with_metamodel
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dc_tap_adjustment
psspy.dc_tap_adjustment
dc_tap_adjustment(ival=None)
Use this API to specify or return the option to enable or disable the dc tap adjustment option setting.

This API routine was first introduced in release 29.0.0.

Python syntax:
ierr = dc_tap_adjustment(ival)

ierr, ival = dc_tap_adjustment()

Parameters
IVAL (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, 0 by default; else output).

IERR (integer) – Error code. (output).

The argument IVAL allowed values are as follows:

= 0

disabled.

= 1

enabled.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid IVAL value.

= 2

invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DC_TAP_ADJUSTMENT IVAL

Fortran command syntax:
CALL DC_TAP_ADJUSTMENT_API(IVAL, IOCODE, IERR)

Previous topic
psspy.csv_to_rawx_with_metamodel

Next topic
psspy.dccc

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dc_tap_adjustment
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dccc_2
psspy.dccc_2
dccc_2(options=None, values=None, dfxfile=None, **kwds)
Use this API to run contingency case solutions using a linear network (dc) model (activity DCCC).

This API routine was first introduced in release 34.0.0.

Python syntax:
ierr = dccc_2(options, values, dfxfile)

Parameters
OPTIONS (integer) – An array of 8 elements specifying calculation and reporting options. The value of each element is as follows. (input).

VALUES (real) – An array of 3 elements specifying tolerances and thresholds. The value of each element is as follows. (input).

DFXFILE (character*260) – Is the name of distribution factor data file. (input).

IERR (integer) – Is the error code. (output).

The argument OPTIONS values are as follows:

OPTIONS(1)

is the loss estimate option (1 by default).

= 0

exclude loss estimate.

= 1

use the present voltage vector to estimate losses and apply them as “hidden loads”.

OPTIONS(2)

is the regulating phase shifter code. (0 by default).

= 0

fixed phase shift angles in the base case and the contingency cases.

= 1

fixed MW in the base case, fixed phase shift angles in the contingency cases.

= 2

fixed MW in the base case and the contingency cases.

OPTIONS(3)

contingency case rating set; 1 through 12 (rating set program option setting by default).

OPTIONS(4)

base case line flow code (0 by default).

= 0

dc base case.

= 1

ac base case.

OPTIONS(5)

output format code (0 by default).

= 0

overload output.

= 1

full output.

OPTIONS(6)

exclude cases with no overloads from the overload report (0 by default).

= 0

no.

= 1

yes.

OPTIONS(7)

convert MVA ratings to estimated MW ratings. (0 by default).

= 0

no.

= 1

yes.

OPTIONS(8)

code to discontinue activity if MW mismatch exceeds VALUES(1). (0 by default).

= 0

discontinue.

= 1

continue.

The argument VALUES values are as follows:

VALUES(1)

required MW mismatch tolerance for continuing (Newton solution convergence tolerance, TOLN, , by default).

VALUES(2)

percent of rating for reporting an element as overloaded. (100 by default).

VALUES(3)

minimum contingency case flow change for including an element in the overload report. (0.0 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid OPTIONS value.

= 2

invalid VALUES value.

= 3

no Distribution Factor Data File specified.

= 4

generators are converted.

= 5

buses in island(s) without a swing bus; use activity TREE.

= 6

largest mismatch exceeds mismatch tolerance.

= 7

error opening DFXFILE.

= 8

file DFXFILE is not in the form of a PSSE 25 or later DFAX file; run DFAX.

= 9

file DFXFILE does not contain distribution factors; run DFAX with distribution factor option enabled.

= 10

no monitored branches or interfaces defined.

= 11

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DCCC_2 OPTIONS(1)..OPTIONS(8) VALUES(1)..VALUES(3) DFXFILE

Fortran command syntax:
CALL DCCC_2 (OPTIONS, VALUES, DFXFILE, IERR)

Previous topic
psspy.dccc

Next topic
psspy.dccor

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dccc_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dccor
psspy.dccor
dccor(options=None, values=None, labels=None, dfxfile=None, **kwds)
Use this API to apply corrective actions to the base case using linear programming methods. The corrective actions are to eliminate flow overloads with the objective of minimizing the control adjustments, including load shedding, MW generations dispatch, and phase shifter angle adjustments.

This API routine was first introduced in release 30.3.0.

Python syntax:
ierr = dccor(options, values, labels, dfxfile)

Parameters
OPTIONS (integer) – An array of seven elements specifying DC corrective actions solution options. (input).

VALUES (real) – An array of six elements specifying DC corrective actions parameters. (input).

LABELS (character*32) – An array of three elements specifying subsystem labels. (input).

DFXFILE (character*260) – Name of the distribution factor data file. (input; no default allowed).

IERR (integer) – Error code. (output).

The argument OPTIONS values are as follows:

OPTIONS(1)

rating set (rating set program option setting by default).

= 1

rating A.

= 2

rating B.

= 3

rating C.

OPTIONS(2)

generator control flag (1 by default).

= 0

disable.

= 1

enable.

OPTIONS(3)

load control flag (0 by default).

= 0

disable.

= 1

enable.

OPTIONS(4)

phase shifter control flag (1 by default).

= 0

disable.

= 1

enable.

OPTIONS(5)

convert MVA ratings to estimated MW ratings (0 by default).

= 0

disable.

= 1

enable.

OPTIONS(6)

code to discontinue activity if MW mismatch exceeds tolerance (VALUES(1) (0 by default).

= 0

disable (i.e. continue, do not discontinue activity).

= 1

enable (i.e. discontinue).

OPTIONS(7)

modify network data with corrective actions solutions (1 by default).

= 0

disable (i.e. do not modify network data).

= 1

enable (i.e. allow network data to be modified).

The argument VALUES values are as follows:

VALUES(1)

MW mismatch tolerance for continuing (Newton solution convergence tolerance, TOLN, by default).

VALUES(2)

percent of rating set (100.0 by default).

VALUES(3)

branch flow overload tolerance (0.1 by default).

VALUES(4)

generator control weighting factor (1.0 by default).

VALUES(5)

load control weighting factor (1.0 by default).

VALUES(6)

phase shifter control weighting factor (1.0 by default).

The argument LABELS values are as follows:

LABELS(1)

label of generator control subsystem (blank by default; no default allowed if OPTIONS(2) is 1).

LABELS(2)

label of load control subsystem (blank by default; no default allowed if OPTIONS(3) is 1).

LABELS(3)

label of phase shifter control subsystem (blank by default; no default allowed if OPTIONS(4) is 1).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid OPTIONS value.

= 2

invalid VALUES value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

No controls.

= 6

control subsystem not defined.

= 7

Distribution Factor Data File not specified.

= 8

largest mismatch exceeds tolerance.

= 21

file DFXFILE is not in the form of a PSSE-25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 51

error opening Distribution Factor Data File.

= 52

prerequisite requirements for function not met.

Notes:

Batch command syntax:
BAT_DCCOR OPTIONS(1)..OPTIONS(7) VALUES(1)..VALUES(6) LABELS(1)..LABELS(3) DFXFILE

Fortran command syntax:
CALL DCCORAPI(OPTIONS, VALUES, LABELS, DFXFILE, IERR)

Previous topic
psspy.dccc_2

Next topic
psspy.dccor_2

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dccor
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dclf_2
psspy.dclf_2
dclf_2(sid=None, all=None, status=None, brnch=None, ckt=None, **kwds)
Use this API routine to apply the dc analogy network solution algorithm to the network modeled in the working case (activity DCLF).

This API routine was first introduced in release 34.0.0.

Python syntax:
ierr = dclf_2(sid, all, status, brnch, ckt)

Parameters
SID (integer) – Is a valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; 1 by default).

ALL (integer) – Is the all buses or specified subsystem flag. (input; 1 by default).

STATUS (integer) – An array of 6 elements specifying calculation options. The value of each element is as follows. (input).

BRNCH (integer) – An array of 3 elements specifying calculation options. The use of each element is as follows. The values can all be zero or defaulted if no branch is to be changed for the solution. (input).

CKT (character*2) – Is the circuit id of the branch for which status is to be changed for the solution. (input; ‘1’ by default).

IERR (integer) – Is the error code. (output).

The argument STATUS values are as follows:

STATUS(1)

is the loss estimate option. (1 by default).

= 0

exclude loss estimate.

= 1

use the present voltage vector to estimate losses and apply them as “hidden loads”.

STATUS(2)

is the regulating phase shifter code (0 by default).

= 0

fixed phase shift angles in the base case and the change case.

= 1

fixed MW in the base case, fixed phase shift angles in the change case.

= 2

fixed MW in the base case and the change case.

STATUS(3)

is rating used in tabulating the report; 1 through 12 (default rating set program option setting by default).

STATUS(4)

is the voltage that should be saved. (0 by default).

= 0

original voltages.

= 1

base case dc power flow voltages.

= 2

change case dc power flow voltages.

STATUS(5)

is status of the changed branch upon completion (0 by default).

= 0

leave unchanged.

= 1

save changed status.

STATUS(6)

is action code if the MW mismatch exceeds 0.5 MW. (1 by default).

= 0

discontinue.

= 1

continue.

The argument BRNCH values are as follows:

BRNCH(1)

is the from bus of the branch for which status is to be changed for the solution (0 by default).

BRNCH(2)

is the to bus of the branch for which status is to be changed for the solution (0 by default).

BRNCH(3)

is the third bus connected by a three-winding transformer, or zero for a nontransformer branch or a two-winding transformer (0 by default).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid STATUS value.

= 4

bus not found.

= 5

branch not found.

= 6

three-winding transformer not found.

= 7

multi-section line specified but multi-section line reporting option is disabled.

= 8

closing a multi-section line is invalid in DCLF.

= 9

returning a Type 4 bus to service is not allowed in DCLF.

= 10

closing a three-winding transformer is not allowed in DCLF.

= 11

generators are converted.

= 12

buses in island(s) without a swing bus; use activity TREE.

= 13

largest mismatch exceeds 0.5 MW.

= 14

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DCLF_2 SID ALL STATUS(1)..STATUS(6) BRNCH(1)..BRNCH(3) CKT

Fortran command syntax:
CALL DCLF_2(SID, ALL, STATUS, BRNCH, CKT, IERR)

Previous topic
psspy.dclf

Next topic
psspy.dcpscopf

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dclf_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dcpscopf
psspy.dcpscopf
dcpscopf(options=None, values=None, labels=None, dfxfile=None, inlfile=None, thrfile=None, **kwds)
This API is the DC based Preventive Security Constrained Optimal Power Flow solution (DCPSCOPF). This API is used to find the settings of controls for a system to comply with base case and contingency case operation limits. The API is implemented with DC preventive security constrained optimal power flow method (DCPSCOPF). The objective of the DCPSCOPF is to minimize control adjustments subject to operation limits constraints. The available controls are generation MW outputs of on-line and off-line generators, loads, phase shifters.

This API routine was first introduced in release 35.2.0.

Python syntax:
ierr = dcpscopf(options, values, labels, dfxfile, inlfile, thrfile)

Parameters
OPTIONS (integer) – An array of 7 elements specifying power flow options. (input).

VALUES (real) – An array of 6 elements specifying power flow options. (input).

LABELS (character*32) – An array of 5 elements specifying labels. (input).

DFXFILE (character*260) – Is the name of the distribution factor data file . (input).

INLFILE (character*260) – Is the name of load throwover data file (input, blank for none). (input).

THRFILE (character*260) – Is the name of unit inertia data file (input, blank for none). (input).

IERR (integer) – Is the error code . (output).

The argument OPTIONS values are as follows:

OPTIONS(1)

dispatch mode (0 by default).

= 0

disable.

= 1

subsystem machines (RESERVE).

= 2

subsystem machines (PMAX).

= 3

subsystem machines (INERTIA).

= 4

subsystem machines (GOVERNOR DROOP).

OPTIONS(2)

Ignore initial violations in the base case (1 by default).

= 0

No.

= 1

Yes.

OPTIONS(3)

Abort if MW mismatch exceeds tolerance (0 by default).

= 0

No.

= 1

Yes.

OPTIONS(4)

generator control flag (1 by default).

= 0

disable generation MW dispatch.

= 1

enable.

OPTIONS(5)

load control flag (0 by default).

= 0

disable load shedding control.

= 1

enable.

OPTIONS(6)

phase shifter control flag (1 by default).

= 0

disable phase shifter control.

= 1

enable.

OPTIONS(7)

off-line generator control flag (0 by default).

= 0

disable generation MW dispatch of off-line generators.

= 1

enable.

The argument VALUES values are as follows:

VALUES(1)

Mismatch tolerance (TOLN by default).

VALUES(2)

Flow tolerance in linear programming.

VALUES(3)

Weighting factor of generation MW dispatch (1.0 by default).

VALUES(4)

Weighting factor of load control (1.0 by default).

VALUES(5)

Weighting factor of phase shifter control (1.0 by default).

VALUES(6)

Weighting factor of generation MW dispatch of off-line generators (1.0 by default).

The argument LABELS values are as follows:

LABELS(1)

The label of generation dispatch system, required if the dispatch mode of OPTIONS(15) is not zero. The dispatch mode and the system provide for a default dispatch method for contingencies causing unbalance between load demand and generation output (blank for none).

LABELS(2)

The label of generation dispatch control system. MW injections of the generators within the system are available for dispatch in the corrective action mode or preventive security constrained optimal power flow mode (blank for none).

LABELS(3)

The label of load control system. Loads in the load control system are available for curtailment in the corrective action mode or preventive security constrained optimal power flow mode (blank for none).

LABELS(4)

The label of phase shifter adjustment system. The phase angles of phase shifters in the system are regulated either by corrective action or preventive security constrained optimal power flow (blank for none).

LABELS(5)

The label of generation MW control of off-line generator control system. MW injections of the off-line generators within the system are available for dispatch in the corrective action mode or preventive security constrained optimal power flow mode (blank for none).

The possible error code values are as follows:

= -1

PSCOPF terminates with active constraints.

= 0

No error.

= 1

invalid OPTIONS value.

= 2

invalid VALUES value.

= 3

generators are converted.

= 4

buses in island(s) without a swing bus; use activity TREE.

= 5

largest mismatch exceeds mismatch tolerance.

= 6

Generation subsystem not specified.

= 7

too many islands in base case.

= 8

buses with bus type code and series element status inconsistencies.

= 9

no Distribution Factor Data File specified.

= 10

No controls are specified.

= 11

No constraints are specified.

= 12

Simulation STOP. Duplicated contingency labels in DFAX file.

= 21

file DFXFILE is not in the form of a PSSE 25 or later DFAX file; run DFAX.

= 22

monitored elements exceed limit when adding multi-section line members.

= 51

error opening Distribution Factor Data File.

= 52

error opening Load Throwover Data File.

= 53

error opening Unit Inertia and Governor Data File.

= 54

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DCPSCOPF OPTIONS(1)..OPTIONS(7) VALUES(1)..VALUES(6) LABELS(1)..LABELS(5) DFXFILE INLFILE THRFILE

Fortran command syntax:
CALL DCPSCOPFAPI(OPTIONS, VALUES, LABELS, DFXFILE, INLFILE, THRFILE, IERR)

Previous topic
psspy.dclf_2

Next topic
psspy.deltmpfiles

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dcpscopf
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.deltmpfiles
psspy.deltmpfiles
deltmpfiles()
Delete closed temporary files. PSSE creates a subdirectory within the user’s “temporary” directory; only files there are removed.

This API routine was first introduced in release 32.2.0.

Python syntax:
ierr = deltmpfiles()

Parameters
IERR (integer) – None. (output).

The possible error code values are as follows:

= 1

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DELTMPFILES

Fortran command syntax:
CALL DELTMPFILES(IERR)

Previous topic
psspy.dcpscopf

Next topic
psspy.dfax

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.deltmpfiles
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dfax_2
psspy.dfax_2
dfax_2(options=None, subfile=None, monfile=None, confile=None, dfxfile=None, **kwds)
Use this API to construct a Distribution Factor Data File (activity DFAX).

This API routine was first introduced in release 33.6.0.

Python syntax:
ierr = dfax_2(options, subfile, monfile, confile, dfxfile)

Parameters
OPTIONS (integer) – An array of 3 elements specifying calculation options. The value of each element is as follows. (input).

SUBFILE (character*260) – Is the name of the subsystem description file. (input).

MONFILE (character*260) – Is the name of monitored element description file. (input).

CONFILE (character*260) – Is the name of contingency description data file. (input).

DFXFILE (character*260) – Is the name of distribution factor data file. (input).

IERR (integer) – Is the error code. (output).

The argument OPTIONS values are as follows:

OPTIONS(1)

distribution factor option flag. (1 by default).

= 0

do not calculate distribution factors (i.e., DFAX,AC).

= 1

calculate distribution factors.

OPTIONS(2)

monitored element sorting flag (0 by default).

= 0

do not sort (i.e., leave in Monitored Element Description File order).

= 1

sort.

OPTIONS(3)

out-of-service monitored branch flag (0 by default).

= 0

eliminate out-of-service branch from monitored branches.

= 1

keep out-of-service branch in monitored branches.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid OPTIONS value.

= 2

generators are converted.

= 3

buses in island(s) without a swing bus; use activity TREE.

= 4

no Distribution Factor Data File specified.

= 5

no Monitored Element Data input file specified.

= 6

no Contingency Description Data file specified.

= 7

fatal error reading input file.

= 8

error opening output file DFXFILE.

= 9

error opening input file SUBFILE.

= 10

error opening input file MONFILE.

= 11

error opening input file CONFILE.

= 12

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DFAX_2 OPTIONS(1)..OPTIONS(3) SUBFILE MONFILE CONFILE DFXFILE

Fortran command syntax:
CALL DFAXAPI_2(OPTIONS, SUBFILE, MONFILE, CONFILE, DFXFILE, IERR)

Previous topic
psspy.dfax

Next topic
psspy.dfax_contingency

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dfax_2
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dfax_contingency
psspy.dfax_contingency
dfax_contingency(option=None, confile=None, dfxfile=None, **kwds)
Use this API to combine one contingency in the first Distribution Factor file with one contingency in the second Distribution Factor file and so on, till specified contingency level is reached, to create multiple event contingencies and then export resulting contingencies to user defined report device.

This API routine was first introduced in release 31.0.0.

Python syntax:
ierr = dfax_contingency(option, confile, dfxfile)

Parameters
OPTION (integer) – Level of multiple contingencies. (input; from 1 to 3; 1 by default).

CONFILE (character*260) – Name of contingency description data file. (input; blank by default).

DFXFILE (character*260) – An array of OPTION elements specifying OPTION names of Distribution Factor Data Files where contingencies are combined each other to build OPTION level contingencies. (input; no default allowed).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid OPTION value.

= 2

Input file is not a Distribution Factor Data File.

= 3

error reading Distribution Factor Data File.

= 51

error opening Contingency Description Data File.

= 52

error opening Distribution Factor Data File.

Notes:

Fortran command syntax:
CALL DFAX_CONTINGENCY(OPTION, CONFILE, DFXFILE, IERR)

Previous topic
psspy.dfax_2

Next topic
psspy.dfti

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dfax_contingency
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dfti
psspy.dfti
dfti(sid=None, apiopt=None, status=None, thrsh=None, cfile=None, **kwds)
Use this API to compare tie lines, as contained in the working case, with those of a designated Saved Case (activity DFTI). It must be referenced using one of the following procedures: - One reference with APIOPT=1, followed by any number of references with APIOPT=2, followed by one reference with APIOPT=3. - One reference with APIOPT=0. This automatically combines the processing of one APIOPT 1 reference, followed by one APIOPT 2 reference, followed by one APIOPT 3 reference.

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr, seqflg = dfti(sid, apiopt, status, thrsh, cfile)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input; used only when APIOPT is 0 or 1; 0 by default).

APIOPT (integer) – Mode of operation of dftiapi. (input; 0 by default).

STATUS (integer) – An array of five elements specifying comparison options. (input).

THRSH (real) – Difference threshold. (input; used only when APIOPT is 0 or 2; 0.0 by default).

CFILE (character*260) – Name of saved case file in which tie lines are to be compared to those of the working case (when apiopt is 0 or 1). (input; no default allowed).

SEQFLG (logical) – An array of two elements specifying returned when APIOPT=0 or 1. (output).

IERR (integer) – Error code. (output).

The argument APIOPT allowed values are as follows:

= 0

initialize for case comparison, run the comparison specified by STATUS(4), and run post-processing clean up.

= 1

initialize for case comparison.

= 2

run a comparison.

= 3

post-processing clean up.

The argument STATUS values are as follows:

STATUS(1)

defines the working case content following an APIOPT=0 or 3 reference (used only when APIOPT is 0, 1 or 3; 0, by default).

= 0

original working case.

= 1

Saved Case specified in CFILE.

STATUS(2)

flag for method of considering buses in the two cases to be the same bus (used only when APIOPT is 0 or 1; 0 by default).

= 0

same bus numbers.

= 1

same extended bus names.

= 2

same bus numbers and extended bus names.

STATUS(3)

flag for specifying THRESH (used only when APIOPT is 0 or 2; 0 by default).

= 0

engineering units.

= 1

percent.

STATUS(4)

code for the comparison to be run (used only when APIOPT is 0 or 2; 1 by default).

= 1

branch status.

= 2

line R, X, B.

= 3

line shunts.

= 4

line ratings.

= 5

metered end.

= 6

line length.

= 7

transformers.

= 8

flow MW or MVAR (from bus).

= 9

flow MW or MVAR (from & to).

= 10

line MW or MVAR losses.

= 11

zero sequence R, X, B.

= 12

zero sequence line shunts.

= 13

transformer connection codes.

= 14

flow MW (from bus).

= 15

flow MVAR (from bus).

= 16

flow MW (from and to buses).

= 17

flow MVAR (from and to buses).

= 18

line MW losses.

= 19

line MVAR losses.

STATUS(5)

line rating to be compared when STATUS(4) is 4 (used only when APIOPT is 0 or 2; 0 by default).

= 0

all ratings.

= 1

RATEA.

= 2

RATEB.

= 3

RATEC.

The argument SEQFLG values are as follows:

SEQFLG(1)

true if there is sequence data in the working case.

SEQFLG(2)

true if there is sequence data in the Saved Case in file CFILE.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid STATUS value.

= 3

CFILE is blank.

= 4

no ties to compare.

= 5

invalid APIOPT value.

= 6

unexpected APIOPT value.

= 7

invalid THRSH value.

= 8

error reading the comparison case.

= 9

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DFTI SID APIOPT STATUS(1)..STATUS(5) THRSH CFILE

Fortran command syntax:
CALL DFTIAPI(SID, APIOPT, STATUS, THRSH, CFILE, SEQFLG, IERR)

Previous topic
psspy.dfax_contingency

Next topic
psspy.diff

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dfti
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.diff
psspy.diff
diff(sid=None, all=None, apiopt=None, status=None, thrsh=None, cfile=None, **kwds)
Use this API to compare specified power flow data and solution results, as contained in the working case, with those of a designated Saved Case (activity DIFF). It must be referenced first with APIOPT=1, followed by any number of references with APIOPT=2, followed by one reference with APIOPT=3:

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr, seqflg = diff(sid, all, apiopt, status, thrsh, cfile)

Parameters
SID (integer) – A valid subsystem identifier. valid subsystem identifiers range from 0 to 11. subsystem sid must have been previously defined. (input).

ALL (integer) – All buses or specified subsystem flag. (input; 1 by default).

APIOPT (integer) – Mode of operation in the api. (input).

STATUS (integer) – An array of 4 elements specifying STATUS contains various processing options and has different values or meanings depending on the value of APIOPT. (input).

THRSH (real) – An array of three elements specifying thresholds (only used when APIOPT is 2). (input).

CFILE (character*260) – Saved case to be compared against the data currently in the working case (only used when apiopt is 1). (input; no default allowed).

SEQFLG (logical) – An array of two elements specifying returned when APIOPT = 1. (output).

IERR (integer) – Error code. (output).

The argument ALL allowed values are as follows:

= 0

process only buses in subsystem SID.

= 1

process all buses.

The argument APIOPT allowed values are as follows:

= 1

initialize for case comparison.

= 2

run case comparison for specified data category.

= 3

postprocessing housekeeping.

The argument STATUS values are as follows:

STATUS(1)

working case or threshold option (0 by default).

= 0

If APIOPT=1 or 3, leave original case as working case. If APIOPT=2, thresholds are in enginering units.

= 1

If APIOPT=1 or 3, leave comparison case (CFILE) as working case. If APIOPT=2, thresholds are percentages.

STATUS(2)

comparison options.

= 0

If APIOPT=1, bus numbers must be the same to match (default for APIOPT=1 or 3).

= 1

If APIOPT=1, bus names must be the same to match. If APIOPT=2, compare bus identifiers (default for APIOPT=2).

= 2

If APIOPT=1, bus numbers and names must be the same to match. If APIOPT=2, compare bus type codes.

= 3

(If APIOPT=2) compare machine statuses.

= 4

(If APIOPT=2) compare generator MW.

= 5

(If APIOPT=2) compare generator MW or MVAR.

= 6

(If APIOPT=2) compare bus loads.

= 7

(If APIOPT=2) compare bus shunts.

= 8

(If APIOPT=2) compare switched shunts.

= 9

(If APIOPT=2) compare voltage.

= 10

(If APIOPT=2) compare bus voltage & angle.

= 11

(If APIOPT=2) compare MBASE & ZSORCE.

= 12

(If APIOPT=2) compare MBASE & RPOS+jX.

= 13

(If APIOPT=2) compare MBASE & ZNEG.

= 14

(If APIOPT=2) compare MBASE & ZZERO.

= 15

(If APIOPT=2) compare negative sequence loads.

= 16

(If APIOPT=2) compare zero sequence loads.

= 17

(If APIOPT=2) compare branch status.

= 18

(If APIOPT=2) compare line R, X, & B.

= 19

(If APIOPT=2) compare line shunts.

= 20

(If APIOPT=2) compare line ratings.

= 21

(If APIOPT=2) compare metered end.

= 22

(If APIOPT=2) compare transformers.

= 23

(If APIOPT=2) compare from P or Q flow.

= 24

(If APIOPT=2) compare from and to P or Q flow.

= 25

(If APIOPT=2) compare P or Q losses.

= 26

(If APIOPT=2) compare zero sequence R, X, & B.

= 27

(If APIOPT=2) compare zero sequence line shunts.

= 28

(If APIOPT=2) compare connection codes.

= 29

(If APIOPT=2) compare zero sequence mutuals.

= 30

(If APIOPT=2) compare multisection lines.

= 31

(If APIOPT=2) compare multisection line metered end.

= 32

(If APIOPT=2) compare load status.

= 33

(If APIOPT=2) compare line lengths.

= 34

(If APIOPT=2) compare generator Q.

= 35

(If APIOPT=2) compare from P flow.

= 36

(If APIOPT=2) compare from Q flow.

= 37

(If APIOPT=2) compare from and to P flow.

= 38

(If APIOPT=2) compare from and to Q flow.

= 39

(If APIOPT=2) compare line P losses.

= 40

(If APIOPT=2) compare line Q losses.

= 41

(If APIOPT=2) compare shunt status.

= 42

(If APIOPT=2) compare switched shunt status.

= 43

(If APIOPT=2) compare load scalable flag.

= 44

(If APIOPT=2) compare MBASE & RPOS+jX’.

= 45

(If APIOPT=2) compare MBASE & RPOS+jXs.

= 46

(If APIOPT=2) compare bus substation.

= 47

(If APIOPT=2) compare node status.

= 48

(If APIOPT=2) compare switching device status.

= 49

(If APIOPT=2) compare switching device P or Q flow.

= 50

(If APIOPT=2) compare switching device P flow.

= 51

(If APIOPT=2) compare switching device Q flow.

STATUS(3)

load characteric comparison option (0 by default).

= 0

use total nominal load (only used if APIOPT=2).

= 1

use contant MVA (only used if APIOPT=2).

= 2

use constant current (only used if APIOPT=2).

= 3

use constant admittance (only used if APIOPT=2).

STATUS(4)

line rating to use. (1 by default).

= 0

use all ratings (only used if APIOPT=2).

= ‘1-12’

use rating specified (only used if APIOPT=2).

The argument THRSH values are as follows:

THRSH(1)

difference threshold (0.0 by default).

THRSH(2)

voltage or tap ratio threshold (0.0 by default).

THRSH(3)

angle threshold (0.0 by default).

The argument SEQFLG values are as follows:

SEQFLG(1)

true if there is sequence data in the working case.

SEQFLG(2)

true if there is sequence data in the Saved Case in file CFILE.

The possible error code values are as follows:

= 0

no error occurred.

= 1

invalid SID value or subsystem SID is not defined.

= 2

invalid ALL value.

= 3

invalid APIOPT value.

= 4

invalid STATUS value.

= 5

invalid THRSH value.

= 6

CFILE is blank.

= 7

unexpected APIOPT value.

= 8

error building the case to case translation files.

= 9

error reading the comparison case.

= 10

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DIFF SID ALL APIOPT STATUS(1)..STATUS(4) THRSH(1)..THRSH(3) CFILE

Fortran command syntax:
CALL DIFFNW(SID, ALL, APIOPT, STATUS, THRSH, CFILE, SEQFLG, IERR)

Previous topic
psspy.dfti

Next topic
psspy.dscn

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.diff
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dscn
psspy.dscn
dscn(bus=None)
Use this API to electrically disconnect a bus (activity DSCN).

This API routine was first introduced in release 28.0.0.

Python syntax:
ierr = dscn(bus)

Parameters
BUS (integer) – Number of the bus to be disconnected. (input; no default allowed).

IERR (integer) – Error code. (output).

The possible error code values are as follows:

= 0

no error occurred.

= 1

bus BUS not found.

= 2

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DSCN BUS

Fortran command syntax:
CALL DSCNAPI(BUS, IERR)

Previous topic
psspy.diff

Next topic
psspy.duplicate_cntlabel_check

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.dscn
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.
PSSE API Manual
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.duplicate_cntlabel_check
psspy.duplicate_cntlabel_check
duplicate_cntlabel_check(status=None)
Use this API to specify or return the option to enable or disable the duplicated contingency labels check when Distribution Factor Data File (.dfx) or Contingency Description Data File (.con) files are used.

This API routine was first introduced in release 33.10.0 and 34.2.0.

Python syntax:
ierr = duplicate_cntlabel_check(status)

ierr, status = duplicate_cntlabel_check()

Parameters
STATUS (integer) – Value of the option setting. (input; if Batch command, or for Python if specified as an argument, or for Fortran if IOCODE is 0, no default allowed; else output).

IERR (integer) – Error code. (output).

The argument STATUS allowed values are as follows:

= 0

disable checking duplicated contingency labels in DFAX or CON file.

= 1

enable checking duplicated contingency labels in DFAX or CON file.

The possible error code values are as follows:

= 0

no error.

= 1

Invalid STATUS value.

= 2

Invalid IOCODE value.

= 3

prerequisite requirements for API are not met.

Notes:

Batch command syntax:
BAT_DUPLICATE_CNTLABEL_CHECK STATUS

Fortran command syntax:
CALL DUPLICATE_CNTLABEL_CHECK(STATUS, ICODE, IERR)

Previous topic
psspy.dscn

Next topic
psspy.ecdi

Quick search
indexmodules |next |previous |Home | psspy »Power Flow Operation »psspy.duplicate_cntlabel_check
© Copyright 2023, Siemens PTI. Created using Sphinx 3.5.1.